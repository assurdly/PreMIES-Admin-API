{
	"info": {
		"_postman_id": "a695395c-6fc2-42e3-923b-2193802dee94",
		"name": "PMI/MAF/DISREP",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "MAF",
			"item": [
				{
					"name": "Authorization",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"pm.collectionVariables.set(\"maf-token\", responseData[\"accessToken\"]);",
											"",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "de7dc35d-5025-41d4-97d5-7e0edd806213",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\"\n}\n\n// {\n//    \"username\": \"emediongetuk323@gmail.com\",\n//     \"password\": \"1234\"\n// }",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "ee7c4403-3881-4555-8811-344e767f43f4",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.collectionVariables.set(\"maf-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "50c0699a-80fa-4e42-85d0-8eca43f5d9ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"g\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "bc41ea0a-b890-415f-93d6-4ca25c1a61be",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.collectionVariables.set(\"maf-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b2f76cce-6889-4517-aad6-f4a83ad05148",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"T\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "4d435993-2ba6-4bf9-9319-e4c0f7e3bbb6",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "24f1ae64-ed0a-4583-bdfe-f4404bb2e6aa",
					"description": "This endpoint return bearer token, which must be bind to the request for all others request"
				},
				{
					"name": "Verify Security Code",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{passcode}",
									"item": [
										{
											"name": "verifycode",
											"id": "d184f7fe-8885-44f4-9944-720df54426b2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"authentication",
														"verifycodeuser",
														":data",
														":passcode"
													],
													"variable": [
														{
															"id": "1ef212e5-2b6c-430c-b815-5d1d0487db4a",
															"key": "data",
															"value": "string",
															"description": "(Required) "
														},
														{
															"id": "fbc0fc89-5423-4d6a-94f1-99d0d61296fa",
															"key": "passcode",
															"value": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "65ac299e-85e6-4244-9863-999260ae1b8b",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"authentication",
																"verifycodeuser",
																":data",
																":passcode"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "passcode"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
												}
											]
										}
									],
									"id": "575ae99d-71a2-49c6-9c06-9b00984ae25a",
									"description": "Security code to be validated"
								}
							],
							"id": "b299c137-1d54-43be-8669-c22760a63d0b",
							"description": "Email address"
						}
					],
					"id": "f7af02d2-7693-4d14-9061-8d4118771648",
					"description": "Use this endpoint to verify security code for type of users"
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2970e671-729b-4274-a10e-453324738aee",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate response structure and values\", () => {",
											"",
											"    // Top-level checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"responsecode\", 200);",
											"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Data object should exist",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"  ",
											"});",
											"",
											"pm.test(\"Validate response user dataTypes\", () => {",
											"    pm.expect(jsonData.data).to.have.property(\"fullname\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"username\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"roles\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data.canwrite).to.be.true;",
											"    pm.expect(jsonData.data.lockstatus).to.be.false;",
											"});",
											"",
											"pm.test(\"Validate inroles and roles\", () => {",
											"    pm.expect(jsonData.data.inroles).to.eql(\"MAF\");",
											"    pm.expect(jsonData.data.roles).to.eql(\"Admin\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9a091d59-2d40-4582-905a-7565219ea1cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "3c5f38d3-2185-4587-8788-1f96a58df690",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "631b9a9b-490c-4f08-8f49-386c5a283b31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@13\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "d55eccee-f43f-4cdd-8ead-56aaafe47079",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7b29c014-70a8-4bc7-a743-aa25f6803a54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilm@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "a964d8f2-ed1d-4eef-890b-e4117d4c775f",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Empty login Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validation Error Response\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.status).to.eql(400);",
											"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
											"    pm.expect(jsonData.errors).to.be.an(\"object\");",
											"",
											"    if (jsonData.errors.password) {",
											"        pm.expect(jsonData.errors.password).to.include(\"The password field is required.\");",
											"    }",
											"    if (jsonData.errors.username) {",
											"        pm.expect(jsonData.errors.username).to.include(\"The username field is required.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b22e8334-1c63-4625-919c-5c03ece875b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \" \",\n    \"password\": \" \"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "c49fe910-142f-47f0-a3e1-69c81d5e8e3e",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						}
					],
					"id": "d50c4832-2a4a-421d-88f3-c9f8ba60ca14",
					"description": "Use this endpoint for user login.\n\nThis endpoint return user object upon successful login"
				},
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "PMI Chart",
							"item": [
								{
									"name": "/pmichart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "284ee2f0-e936-42ae-ac84-97d6630f8d81",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response structure and months in data\", () => {",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    const expectedMonths = [",
													"        \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\",",
													"        \"july\", \"aug\", \"sept\", \"oct\", \"nov\", \"dec\"",
													"    ];",
													"",
													"    // Validate keys exist and values are numbers",
													"    expectedMonths.forEach(month => {",
													"        pm.expect(jsonData.data).to.have.property(month);",
													"        pm.expect(jsonData.data[month]).to.be.a(\"number\");",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e40ef774-2a05-44c4-9a33-2204ebabb5dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pmichart?disco=abuja disco&ms=undefined&year=2025",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pmichart"
											],
											"query": [
												{
													"key": "disco",
													"value": "abuja disco",
													"description": "(Required) "
												},
												{
													"key": "ms",
													"value": "undefined",
													"description": "(Required) "
												},
												{
													"key": "year",
													"value": "2025",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "eaf3a988-5082-407b-be04-0cba1a2a2116",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pmichart?disco=string&ms=string&year=147",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pmichart"
													],
													"query": [
														{
															"description": "(Required) ",
															"key": "disco",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "ms",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "year",
															"value": "147"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 8124,\n  \"responsecode\": 4773,\n  \"data\": {\n    \"jan\": 5476,\n    \"feb\": 9670,\n    \"mar\": 7924,\n    \"apr\": 3517,\n    \"may\": 9818,\n    \"jun\": 9014,\n    \"july\": 6898,\n    \"aug\": 3795,\n    \"sept\": 3071,\n    \"oct\": 2050,\n    \"nov\": 1926,\n    \"dec\": 6078\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3420,\n  \"currentpage\": 7800\n}"
										}
									]
								}
							],
							"id": "3735da55-6361-4d05-81a0-0d8352b94087"
						},
						{
							"name": "MAF Overview",
							"item": [
								{
									"name": "MAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5e824e-594f-49ea-98c8-f89901539b36",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
													"    pm.expect(jsonData).to.have.property(\"totalpage\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"});",
													"",
													"// Validate required keys inside `data`",
													"pm.test(\"Validate keys inside data object\", () => {",
													"    const requiredKeys = [",
													"        \"contract\",",
													"        \"meters\",",
													"        \"assigned\",",
													"        \"assignedmeter\",",
													"        \"pending\",",
													"        \"pendingmeter\"",
													"    ];",
													"",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate types of values inside `data`",
													"pm.test(\"Validate types of values inside data object\", () => {",
													"    pm.expect(jsonData.data.contract).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.meters).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assigned).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assignedmeter).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
													"});",
													"",
													"// Validate values are non-negative",
													"pm.test(\"Validate numeric values are non-negative\", () => {",
													"    Object.values(jsonData.data).forEach(val => {",
													"        pm.expect(val).to.be.at.least(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c5f03caa-bb06-4c8c-bb32-fd80bf41975b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/contractquick/MAF"
									},
									"response": []
								}
							],
							"id": "a6bca197-927d-4d09-b19d-cbb1699f171a"
						},
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6ed8808-0f46-4e07-b032-a7ed34c1720b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Allowed list of DISCOs",
													"const allowedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Validate that disco field exists and has allowed values",
													"pm.test(\"Validate disco values against allowed list\", () => {",
													"    // The response is an array, so we check the length and items directly",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"",
													"    jsonData.forEach(item => {",
													"        pm.expect(item).to.be.a('string'); // Validate each item is a string",
													"        pm.expect(allowedDiscos).to.include(item); // Check if the item is in the allowed list",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "73583c94-4230-44d9-9d31-de8906f94e36",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "7ff8d3b1-0ea2-4ff8-9f4a-c6928ce1de3e",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "b682e503-34c2-4118-838e-216568b583a4"
						}
					],
					"id": "b3380956-76eb-448b-86f3-e05666ae25eb"
				},
				{
					"name": "Meter Suppliers",
					"item": [
						{
							"name": "msoverview",
							"item": [
								{
									"name": "ms overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ffe9c67-82b8-4345-a4ed-bfe0255e46a1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"total_supplier\",",
													"        \"country\",",
													"        \"declined\",",
													"        \"approved\",",
													"        \"approved_meter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bd3f527c-0179-4500-a350-71373fb345ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/overview/msoverview"
									},
									"response": [
										{
											"id": "2ddf504b-f48f-4789-b709-a873f8e8679a",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/overview/msoverview"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2521,\n  \"responsecode\": 698,\n  \"data\": {\n    \"pending\": 985,\n    \"total_supplier\": 7457,\n    \"country\": 1931,\n    \"declined\": 4597,\n    \"approved\": 517,\n    \"approved_meter\": 5100\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8988,\n  \"currentpage\": 8682\n}"
										}
									]
								}
							],
							"id": "234f5a8c-ebac-472b-9e3c-92505abf7485"
						},
						{
							"name": "Get Meter Supplier List",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "meter suppliers",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dd0e1d6c-0999-4ce6-a1d9-597a944236f8",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API responsecode",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each data object and their types",
																	"pm.test(\"Validate keys in each supplier object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\", \"m_supplier\", \"m_brand\", \"company\", \"m_country\", \"emailaddress\",",
																	"        \"pri_contact\", \"contact_email\", \"company_phone\", \"roles\", \"vendor_id\",",
																	"        \"mailgoup\", \"phone_number\", \"country\", \"state\", \"address\", \"zipcode\",",
																	"        \"firstname\", \"lastname\", \"mcount\", \"concount\", \"accountstatus\",",
																	"        \"datejoin\", \"lastlogin\", \"contract\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional: check types for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.m_supplier).to.be.a(\"string\");",
																	"        pm.expect(item.m_brand).to.be.a(\"string\");",
																	"        pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																	"        pm.expect(item.accountstatus).to.be.a(\"boolean\");",
																	"        pm.expect(item.mcount).to.be.a(\"number\");",
																	"        pm.expect(item.concount).to.be.a(\"number\");",
																	"        pm.expect(item.contract).to.be.a(\"number\");",
																	"        pm.expect(item.datejoin).to.be.a(\"string\");",
																	"        pm.expect(item.lastlogin).to.be.a(\"string\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "df03bcaa-c149-407f-9e03-1ab4f104037a",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "eb76cd31-0903-4713-a5fb-5307df712e04",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"metersupplier",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
														}
													]
												}
											],
											"id": "0adbb43e-4307-47f9-947c-c53b9e0d79e8"
										}
									],
									"id": "5d3eb594-6fd2-458b-a377-2cf80a68c99b"
								}
							],
							"id": "368d7318-f003-4514-9ae6-3797a3a1c9fe",
							"description": "This endpoint return Meter Supplier List"
						},
						{
							"name": "PMI Installation quick overview",
							"item": [
								{
									"name": "installtion quick overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8157bb57-7181-4189-9125-eced7ed1fd9a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "92527f8d-003c-4886-9797-4e6ab8259f0e",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								},
								{
									"name": "installtion quick overview - No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bdcf6c75-8f49-4523-974f-4d38bc583416",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "c216ccfb-e958-49c7-9869-a4ab4e623dd9",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								}
							],
							"id": "8e5f27ee-fa8e-490b-b385-4d35fb9cb547",
							"description": "Use this endpoint for PMI Installation quick overview"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "31a30d43-6b07-4c54-afca-04b8b7b05e79",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=MAF",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "MAF",
																	"type": "text"
																}
															],
															"variable": [
																{
																	"id": "87fa5ed3-5752-41e3-8854-44163da7593e",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "203e94c5-9d4c-4079-8243-102d8db6ff99",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "a2ccdd74-96e5-4ea9-b534-c2f591a1fb3d",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "604fee9a-03d8-4cdf-b73d-4cf2a1d03381"
										}
									],
									"id": "a7aab47b-8b3e-4afd-8bf6-931ab7ccf676"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ce720c72-6b1b-4d8b-a231-dedb029ca6f0",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "79759ae7-d175-4ade-837b-f8ab207344c3",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "e581b771-2a2b-4a72-9436-cf9fe77698c6",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "3b513eb7-01db-4b4e-80d3-d381c8b32304"
												}
											],
											"id": "bcf5a754-8fa8-40e3-b341-cc8f476b9385"
										},
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "list of MAF created contracts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save Contract ID of first contract",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", function () {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate top-level response fields",
																					"pm.test(\"Validate top-level response fields\", () => {",
																					"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																					"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																					"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																					"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys exist in each contract object",
																					"pm.test(\"Validate keys in each contract object\", () => {",
																					"    const requiredKeys = [",
																					"        \"id\",",
																					"        \"vendor_id\",",
																					"        \"vendorname\",",
																					"        \"contract_id\",",
																					"        \"contract_title\",",
																					"        \"meter_brand\",",
																					"        \"company\",",
																					"        \"meterphase\",",
																					"        \"disco\",",
																					"        \"quantity\",",
																					"        \"amount\",",
																					"        \"prop_scheme\",",
																					"        \"review_by\",",
																					"        \"datecreated\",",
																					"        \"approved\",",
																					"        \"expected_delivery\"",
																					"    ];",
																					"",
																					"    jsonData.data.forEach((item, index) => {",
																					"        requiredKeys.forEach(key => {",
																					"            pm.expect(item).to.have.property(key);",
																					"        });",
																					"",
																					"        // Optional type checks for some important fields",
																					"        pm.expect(item.id).to.be.a(\"number\");",
																					"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																					"        pm.expect(item.vendorname).to.be.a(\"string\");",
																					"        pm.expect(item.contract_id).to.be.a(\"string\");",
																					"        pm.expect(item.contract_title).to.be.a(\"string\");",
																					"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																					"        pm.expect(item.company).to.be.a(\"string\");",
																					"        pm.expect(item.meterphase).to.be.a(\"string\");",
																					"        pm.expect(item.disco).to.be.a(\"string\");",
																					"        pm.expect(item.quantity).to.be.a(\"number\");",
																					"        pm.expect(item.amount).to.be.a(\"number\");",
																					"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"        pm.expect(item.review_by).to.be.a(\"string\");",
																					"        pm.expect(item.datecreated).to.be.a(\"string\");",
																					"        pm.expect(item.approved).to.be.a(\"boolean\");",
																					"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																					"    });",
																					"});",
																					"",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "186e07ca-d3bb-48eb-8e76-18af3d138010",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "8c1262e6-2b08-4efc-ae1a-af26c788638d",
																			"name": "list of created contracts",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "accept",
																						"value": "application/json, text/plain, */*"
																					},
																					{
																						"key": "accept-language",
																						"value": "en-US,en;q=0.9"
																					},
																					{
																						"key": "authorization",
																						"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																					},
																					{
																						"key": "origin",
																						"value": "https://primes.omniswift.com"
																					},
																					{
																						"key": "priority",
																						"value": "u=1, i"
																					},
																					{
																						"key": "referer",
																						"value": "https://primes.omniswift.com/"
																					},
																					{
																						"key": "sec-ch-ua",
																						"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																					},
																					{
																						"key": "sec-ch-ua-mobile",
																						"value": "?0"
																					},
																					{
																						"key": "sec-ch-ua-platform",
																						"value": "\"macOS\""
																					},
																					{
																						"key": "sec-fetch-dest",
																						"value": "empty"
																					},
																					{
																						"key": "sec-fetch-mode",
																						"value": "cors"
																					},
																					{
																						"key": "sec-fetch-site",
																						"value": "cross-site"
																					},
																					{
																						"key": "user-agent",
																						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"operations",
																						"supplystatus",
																						"1",
																						"10"
																					],
																					"query": [
																						{
																							"key": "prop_scheme",
																							"value": "MAF"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": null,
																			"header": [
																				{
																					"key": "content-type",
																					"value": "application/json; charset=utf-8"
																				},
																				{
																					"key": "date",
																					"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																				},
																				{
																					"key": "server",
																					"value": "Kestrel"
																				},
																				{
																					"key": "access-control-allow-origin",
																					"value": "*"
																				},
																				{
																					"key": "transfer-encoding",
																					"value": "chunked"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																		}
																	]
																}
															],
															"id": "97ebf3f5-a39d-489c-907d-d654851d2ae4"
														}
													],
													"id": "937ec9d7-9dbd-447e-9f3b-6d10958f8b29"
												}
											],
											"id": "9d057071-290f-4eef-8c9d-c426aa2d82ec"
										}
									],
									"id": "5af7e736-ec1c-4149-8e75-cd6ce52c44c0"
								}
							],
							"id": "d56a2a57-41e0-4189-aa66-0a68b070bfe2"
						}
					],
					"id": "1d315a64-7aa2-42e5-ad13-af4716fbff85"
				},
				{
					"name": "Contract Management",
					"item": [
						{
							"name": "overview",
							"item": [
								{
									"name": "Contract quick view",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "mscontract",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d66ecb0c-db87-4c43-b6e0-c1f5f5acf531",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"pm.test(\"Validate required keys in data and their types\", () => {",
																	"    const expectedKeys = [",
																	"        \"assigned_contract\",",
																	"        \"complete_contract\",",
																	"        \"active_contract\",",
																	"        \"qunty_request\",",
																	"        \"supply\",",
																	"        \"meters\"",
																	"    ];",
																	"",
																	"    expectedKeys.forEach(key => {",
																	"        pm.expect(jsonData.data).to.have.property(key);",
																	"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "f3ddb7ee-0420-4cf6-aadc-84cc9540bc48",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/overview/mscontract/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"overview",
																"mscontract",
																":data"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "MAF",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"id": "7e27a61d-fc33-4178-88ba-6de7090018a9",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/overview/mscontract/:data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"overview",
																		"mscontract",
																		":data"
																	],
																	"variable": [
																		{
																			"key": "data"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 35,\n  \"responsecode\": 4043,\n  \"data\": {\n    \"assigned_contract\": 9786,\n    \"complete_contract\": 9058,\n    \"active_contract\": 8363,\n    \"qunty_request\": 5240,\n    \"supply\": 5059,\n    \"meters\": 2878\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"stri\",\n  \"responsStatus\": true,\n  \"totalpage\": 5372,\n  \"currentpage\": 9922\n}"
														}
													]
												}
											],
											"id": "25571a1c-c518-434b-ba94-bb2d293548de",
											"description": "vendor id"
										}
									],
									"id": "f49547c4-aa87-42ba-b0d7-484d7444eafd"
								}
							],
							"id": "8551fabb-a220-407d-be21-5718c10a5f9d"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "e6762e94-7980-42a2-b1b6-18d750d820ec",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=MAF",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "MAF"
																}
															],
															"variable": [
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "12c34fae-7b2a-4957-b1f2-ccc67af518d8",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "02aa2225-c109-4730-aa64-829de2b68308"
										}
									],
									"id": "1e18d5a4-b60d-4d39-873b-cde473d13df4"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of MAF created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Save Contract ID of first contract",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																			"}",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200); ",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "1ea9cab7-66ca-4a13-9bfd-f6ee99d7a90e",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "MAF"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "78047c7d-5322-4d1a-96df-b9149b67e2d7",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "618a6059-4ba2-4616-816e-a1a0ad6dbf9a"
												}
											],
											"id": "ec0f4d7e-78d8-4786-9f1f-f2350b568433"
										}
									],
									"id": "2609033d-966b-40d4-abe0-4ac8dc8272d1"
								},
								{
									"name": "create contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "aec9327c-dc54-4432-995b-29cc121ecdfe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Lex-Electric\",\n    \"contract_title\": \"Lex Electric\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 3,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 4500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "139f7991-c6b9-4fb5-afea-a9d613032640",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create contract - zero quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b402554e-c6a0-4cb3-aa50-6ef051d276c9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 0,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 4500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "44ca5e8b-45f7-4856-ab65-a3e7dba3cdf1",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create new contract- No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0227549-98ea-425d-9a5f-e75c625ab8e1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7a2a62d5-d35b-4e76-824f-c62db7bfae19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Sabinus-natus\",\n    \"contract_title\": \"Sabinus natus\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-23T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mbah Power Limited\",\n    \"quantity\": 6,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "f9ac4263-6a08-44c2-a14d-02cf0936e9b4",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_supplier\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"role\": \"string\",\n  \"company\": \"string\",\n  \"contract_id\": \"string\",\n  \"quantity\": 7400,\n  \"amount\": 6096.93058254557,\n  \"expected_delivery\": \"2001-08-16T13:19:03.212Z\",\n  \"endate\": \"1978-04-25T09:22:29.179Z\",\n  \"meter_brand\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/newcontractassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "34b0a6b8-a65d-46ec-80be-972ce9d84dfe"
						},
						{
							"name": "Approve Meter Supplier Contract",
							"item": [
								{
									"name": "approve contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "435402c8-7770-4ae1-8a45-3fed8e3c281d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message contains contract approval info",
													"pm.test(\"Response message indicates contract approved\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"approved\")",
													");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b985eb68-b5fb-4808-b871-ff01abf92f3e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// {\n//     \"amount\": 4965023555325227000,\n//     \"comment\": \"string\",\n//     \"company\": \"string\",\n//     \"constractstatusd_dstatus\": \"string\",\n//     \"contract_id\": \"string\",\n//     \"contract_title\": \"string\",\n//     \"disco\": \"string\",\n//     \"meter_brand\": \"string\",\n//     \"meterphase\": \"string\",\n//     \"prop_scheme\": \"string\",\n//     \"review_by\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"id\": 0,\n//     \"vendorname\": \"string\",\n//     \"quantity\": 5224,\n//     \"batchschedule\": 5388,\n//     \"quantiysupplier\": 3156,\n//     \"qcertified\": 6048,\n//     \"qassigned\": 8228,\n//     \"singleupload\": 193,\n//     \"threeupload\": 20,\n//     \"singlemeter\": 1529,\n//     \"threemeter\": 3735,\n//     \"singlassigned\": 8134,\n//     \"threeassigned\": 5054,\n//     \"approved\": true,\n//     \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n//     \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n//     \"unassignedcomment\": \"string\",\n//     \"approverequired\": false,\n//     \"endate\": \"1978-06-08T17:44:51.733Z\",\n//     \"meterinstalled\": 2885\n// }\n{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/approvecontract"
									},
									"response": [
										{
											"id": "3c88bd1a-d531-40ad-8317-af0ebc10aa30",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/approvecontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "68e5878c-86a1-4a30-a9f4-a76ca00e1728"
						},
						{
							"name": "Unassign Contract",
							"item": [
								{
									"name": "unassign contract",
									"id": "f28ee198-b324-4335-87db-ec82338f9f66",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 21,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 0,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "7c4ba970-c37a-4d8f-8c83-d4d9418e8968",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "unassign contract without initiating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb31713f-3447-4eea-93ad-fddd20e5fc41",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is false",
													"pm.test(\"responsStatus is false\", () => pm.expect(jsonData.responsStatus).to.be.false);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message indicates contract cannot be unassigned",
													"pm.test(\"Response message indicates unassign requirement\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"can not be unassigned\")",
													");",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c4f7ece4-ed75-483b-a8e5-37172b86d639",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": true,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}\n// {\n//     \"id\": 21,\n//     \"vendor_id\": \"Mita\",\n//     \"vendorname\": \"Mita Soplaya\",\n//     \"contract_id\": \"Croxhair-Electric\",\n//     \"constractstatusd_dstatus\": \"Approved\",\n//     \"contract_title\": \"Croxhair Electric\",\n//     \"meter_brand\": \"Mojec Meter Company Limited\",\n//     \"company\": \"Mita Soplaya\",\n//     \"meterphase\": \"Both Phase\",\n//     \"disco\": \"Abuja Electricity Distribution Company\",\n//     \"quantity\": 0,\n//     \"newassigned\": false,\n//     \"amount\": 4500000,\n//     \"batchschedule\": 0,\n//     \"prop_scheme\": \"MAF\",\n//     \"quantiysupplier\": 0,\n//     \"qcertified\": 0,\n//     \"qassigned\": 0,\n//     \"singleupload\": 0,\n//     \"threeupload\": 0,\n//     \"singlemeter\": 0,\n//     \"threemeter\": 0,\n//     \"singlassigned\": 0,\n//     \"threeassigned\": 0,\n//     \"approved\": false,\n//     \"expected_delivery\": \"2025-09-29T23:00:00\",\n//     \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n//     \"comment\": \"New Contract\",\n//     \"unassignedcomment\": \"\",\n//     \"approverequired\": false,\n//     \"review_by\": \"gilmaf@yopmail.com\",\n//     \"endate\": \"2025-09-03T23:00:00\",\n//     \"meterinstalled\": 0\n// }",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "67afcbd2-0882-40f8-acd2-ce8edd41846e",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "ac19c057-e96e-4157-9693-ea1f3219408a"
						}
					],
					"id": "67e5be84-b0c7-4325-89f4-5670fc9278aa"
				},
				{
					"name": "Installation Schedule",
					"item": [
						{
							"name": "MAF Overview",
							"item": [
								{
									"name": "MAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5e824e-594f-49ea-98c8-f89901539b36",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
													"    pm.expect(jsonData).to.have.property(\"totalpage\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"});",
													"",
													"// Validate required keys inside `data`",
													"pm.test(\"Validate keys inside data object\", () => {",
													"    const requiredKeys = [",
													"        \"contract\",",
													"        \"meters\",",
													"        \"assigned\",",
													"        \"assignedmeter\",",
													"        \"pending\",",
													"        \"pendingmeter\"",
													"    ];",
													"",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate types of values inside `data`",
													"pm.test(\"Validate types of values inside data object\", () => {",
													"    pm.expect(jsonData.data.contract).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.meters).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assigned).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assignedmeter).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
													"});",
													"",
													"// Validate values are non-negative",
													"pm.test(\"Validate numeric values are non-negative\", () => {",
													"    Object.values(jsonData.data).forEach(val => {",
													"        pm.expect(val).to.be.at.least(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ff541a31-f7ed-444a-bb94-41796f113156",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/contractquick/MAF"
									},
									"response": []
								}
							],
							"id": "184f4ef5-6ed1-4b70-8068-88df8f01be6b"
						},
						{
							"name": "MAF Installation quick overview",
							"item": [
								{
									"name": "/api/customers/pmiinstquick",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5b3bb87-a96a-4516-afd9-f3de12006f1d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
													"});",
													"",
													"// Validate data object keys and types",
													"pm.test(\"Validate data object keys and types\", () => {",
													"    const expectedKeys = [",
													"        \"totalsche\",",
													"        \"totalschmeter\",",
													"        \"totalscheinstalled\",",
													"        \"totalschmeterinstaller\",",
													"        \"totalschepending\",",
													"        \"totalschmeterpending\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "164c40a6-6a82-4898-89a4-efce06a09797",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstquick"
									},
									"response": [
										{
											"id": "e6ce3504-7d83-4f1f-a365-2284ae85b921",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2331,\n  \"responsecode\": 80,\n  \"data\": {\n    \"totalsche\": 644,\n    \"totalschmeter\": 772,\n    \"totalscheinstalled\": 125,\n    \"totalschmeterinstaller\": 6749,\n    \"totalschepending\": 5135,\n    \"totalschmeterpending\": 8974\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2007,\n  \"currentpage\": 7879\n}"
										}
									]
								}
							],
							"id": "2bc968c3-47b6-4dec-844f-3dfbae24f3f2",
							"description": "This endpoint return quick over for PMI"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"}",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "7f4d4450-2ecb-4f84-ac64-382280e15d7f",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "7a440713-5d9d-4a66-b3cc-484a0c11a34f",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "d44c7111-babe-4368-b01a-c67501e8cc7f"
										}
									],
									"id": "8cc8888f-d575-41c6-b715-87cb60ecc629"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of MAF created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "5114ff5e-c29b-4ed6-93be-b3d11c9a649b",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "8014e7ce-ebcf-49da-92c7-e694772ec260",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														},
														{
															"name": "View a contract detail",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "debf5c11-c1d1-4ecc-a423-dd2be5a51b45",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?contract_id={{contract_id}}&prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "{{contract_id}}"
																		},
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		},
																		{
																			"key": "fullname",
																			"value": "HKKLL",
																			"type": "text",
																			"disabled": true
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "5446191f-fb57-4886-b5b0-916b8f54468a",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "02046277-faa1-4fb3-860c-79849f739c3d"
												}
											],
											"id": "7d020c88-6450-4da9-83fa-77be4eb8d6ad"
										}
									],
									"id": "3d04b3f4-07b8-47f9-b53e-a4eaacb526e5"
								}
							],
							"id": "b8ac5611-e3a5-4405-a979-4849ec449656"
						},
						{
							"name": "Get Customer Schedule",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "Get a customer schedule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b8f93da-f03a-4e53-bb02-8c58230b01dd",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate each item in the data array",
																			"pm.test(\"Validate each installation record\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\", \"fullname\", \"customerid\", \"phone_number\", \"emaill_address\", \"location\",",
																			"        \"schedule_id\", \"feeder_name\", \"vendor_id\", \"prop_scheme\", \"dt\", \"meter_number\",",
																			"        \"meter_phase\", \"disco\", \"state\", \"lga\", \"address\", \"installation_status\",",
																			"        \"installer_number\", \"installer_sealnumber\", \"installer\", \"date_assigned\",",
																			"        \"install_date\", \"installer_remark\", \"customer_remark\", \"disco_seal\", \"nemsa_seal\",",
																			"        \"customer_date\", \"commissioned\", \"date_commissioned\", \"date_disco\", \"expected_date\",",
																			"        \"disco_remark\", \"contract_id\", \"supervisor\", \"latitude\", \"longitude\",",
																			"        \"d_latitude\", \"d_longitude\", \"installer_accept_status\", \"date_installer_accepted\",",
																			"        \"date_installer_assigned\", \"scheduledate\", \"installationstatus\", \"installationid\",",
																			"        \"meterengineer\", \"region\", \"csp\", \"tsp\", \"installerarrived\", \"installerarrived_date\",",
																			"        \"installationstarts\", \"installationstarts_date\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach(item => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"        pm.expect(item.location).to.be.a(\"string\");",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"        pm.expect(item.feeder_name).to.be.a(\"string\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.dt).to.be.a(\"string\");",
																			"        pm.expect(item.meter_number).to.be.a(\"string\");",
																			"        pm.expect(item.meter_phase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.state).to.be.a(\"string\");",
																			"        pm.expect(item.lga).to.be.a(\"string\");",
																			"        pm.expect(item.address).to.be.a(\"string\");",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"        pm.expect(item.installer_accept_status).to.be.a(\"boolean\");",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"        pm.expect(item.installerarrived).to.be.a(\"boolean\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "24e0b16d-1797-41b0-a312-5395d55e3cb7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit?fullname=Christopher Dauda Paul",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulepmitype",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "testcontract",
																			"disabled": true
																		},
																		{
																			"key": "fullname",
																			"value": "Christopher Dauda Paul"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Scheduled",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "500af3ce-2aa0-413d-856b-5f07e2cec8ba",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"schedulepmitype",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														},
														{
															"name": "Get customers schedules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b8f93da-f03a-4e53-bb02-8c58230b01dd",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate each item in the data array",
																			"pm.test(\"Validate each installation record\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\", \"fullname\", \"customerid\", \"phone_number\", \"emaill_address\", \"location\",",
																			"        \"schedule_id\", \"feeder_name\", \"vendor_id\", \"prop_scheme\", \"dt\", \"meter_number\",",
																			"        \"meter_phase\", \"disco\", \"state\", \"lga\", \"address\", \"installation_status\",",
																			"        \"installer_number\", \"installer_sealnumber\", \"installer\", \"date_assigned\",",
																			"        \"install_date\", \"installer_remark\", \"customer_remark\", \"disco_seal\", \"nemsa_seal\",",
																			"        \"customer_date\", \"commissioned\", \"date_commissioned\", \"date_disco\", \"expected_date\",",
																			"        \"disco_remark\", \"contract_id\", \"supervisor\", \"latitude\", \"longitude\",",
																			"        \"d_latitude\", \"d_longitude\", \"installer_accept_status\", \"date_installer_accepted\",",
																			"        \"date_installer_assigned\", \"scheduledate\", \"installationstatus\", \"installationid\",",
																			"        \"meterengineer\", \"region\", \"csp\", \"tsp\", \"installerarrived\", \"installerarrived_date\",",
																			"        \"installationstarts\", \"installationstarts_date\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach(item => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"        pm.expect(item.location).to.be.a(\"string\");",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"        pm.expect(item.feeder_name).to.be.a(\"string\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.dt).to.be.a(\"string\");",
																			"        pm.expect(item.meter_number).to.be.a(\"string\");",
																			"        pm.expect(item.meter_phase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.state).to.be.a(\"string\");",
																			"        pm.expect(item.lga).to.be.a(\"string\");",
																			"        pm.expect(item.address).to.be.a(\"string\");",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"        pm.expect(item.installer_accept_status).to.be.a(\"boolean\");",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"        pm.expect(item.installerarrived).to.be.a(\"boolean\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "925bd3d8-5142-4bab-9567-9de8b2a4f9d7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulepmitype",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "testcontract",
																			"disabled": true
																		},
																		{
																			"key": "fullname",
																			"value": "Christopher Dauda Paul",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Scheduled",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "07b44a33-01dd-40dd-91a8-aaa782ab02eb",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"schedulepmitype",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														}
													],
													"id": "6f77c8c7-9c47-44e0-a198-9f5f4cae8bcc"
												}
											],
											"id": "57d63bf0-7559-434e-89f6-d6b0ee29ad9d"
										}
									],
									"id": "ebd78f9e-286f-4280-a263-971069e4ac75",
									"description": "Pending\n\nScheduled"
								}
							],
							"id": "dcd75814-47f9-48f7-bad8-776e90931403",
							"description": "This endpoint return customer record, Meter assigned.\n\nSince Meters are pre-assigned to customers this endpoint may not be needed anymore"
						},
						{
							"name": "Approve Installation for Meter",
							"item": [
								{
									"name": "meterassign",
									"id": "5b811233-b72b-4d87-877a-6561d866f083",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contract_id\": \"Friday_review_contract\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"vendor_id\": \"ErnestKlien\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/customers/Pmimeterassign"
									},
									"response": [
										{
											"id": "d701e0f6-cf41-42ed-8aac-bc1ba2e3d755",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"contract_id\": \"string\",\n  \"disco\": \"string\",\n  \"vendor_id\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/customers/Pmimeterassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "08e79359-c9b7-4cb3-849a-4aead6338056",
							"description": "Use this endpoint for PMI meter assignment.\n\nCheck the request body for a type of data to be posted"
						}
					],
					"id": "d8cda2c4-fef3-4ca7-85ed-b70f865a5ae3"
				},
				{
					"name": "Installation Monitoring",
					"item": [
						{
							"name": "PMI Installation quick overview",
							"item": [
								{
									"name": "installtion quick overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0366f501-6134-4f2f-b05b-9958f8a95d33",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "17896fe1-803a-466d-81f5-5db65f1280d0",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								},
								{
									"name": "installtion quick overview - No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "efd2566e-db43-414b-94b6-2431a0fd8801",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "be29d185-5c7c-40c2-976d-370de9dc037a",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								}
							],
							"id": "54182f85-5c8f-4148-a3ad-371d410c873c",
							"description": "Use this endpoint for PMI Installation quick overview"
						},
						{
							"name": "Installation Group Batch",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{status}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "installation group by batch - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "a3f4939f-8ac2-419e-ba01-c37886903b5d",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": null,
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "25c91407-6bc4-486c-9fe3-3a0ffeb19444",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch ID - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "08710611-e02b-4bc8-a4cc-80e1f59afc11",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}&contract_title={{batch}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "{{batch}}"
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "8c11658a-99a5-427f-80f1-d48eb772a160",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Approved",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f424d5a9-fed2-4b9f-bd38-73fcc1c3daf8",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "99abad8f-06de-4b8c-8888-0fa826a458ae",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"key": "status",
																					"value": "Approved",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "542e1f50-5787-4ff6-a6ad-74bd70fbceb2",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Completed",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "d257d45f-ab62-475c-8287-78ddbefdeab7",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "ac85bc86-6987-4938-93dc-cfd22929ee41",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"key": "status",
																					"value": "Completed",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "58d4f642-a77d-4a7c-8e11-1160ba7c96a3",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																}
															],
															"id": "e4744694-0de3-4398-85cf-1a51b25156fd"
														}
													],
													"id": "2c02ed77-bfa9-4557-9d1b-58af445dc4b1"
												}
											],
											"id": "01a17caa-36a7-47df-966b-d9abd64dee85",
											"description": "Pending, Ongoing, Completed, Installed"
										}
									],
									"id": "ecf70d95-9c01-41b0-b725-ad76e22c74db",
									"description": "PMI, DISREP:\n\n\\--Pass the prop_scheme"
								}
							],
							"id": "c235eec2-2c5c-4a88-a14b-70cdae26f1f5",
							"description": "This endpoint return a schedules, grouping them by schedule ID"
						}
					],
					"id": "c34de8c9-4404-4e95-ba4d-61648b94adee"
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "User Management",
							"item": [
								{
									"name": "Get Users",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get users",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "24da172d-9645-49ec-8480-fbdbac2f5b18",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "0b6dc740-d096-412d-9468-f494f00de098",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														},
														{
															"name": "get user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "431fa2bc-493f-4fb9-8e7b-3bf4e691d39e",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit?username=emediongetuk323",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "2",
																			"disabled": true
																		},
																		{
																			"key": "username",
																			"value": "emediongetuk323",
																			"type": "text"
																		}
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "639514c7-8435-4fe5-b1b6-2f408c2df08c",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														}
													],
													"id": "6af4722c-1d98-48d0-83f6-a7af99d17ba5"
												}
											],
											"id": "3fba42f1-f162-4038-bba8-cb26e885aefb"
										}
									],
									"id": "82969a67-af9d-4d4b-87cc-69633ad84444",
									"description": "This endpoint return list of users from the following user group.\n\nPMI\n\nDISREP\n\nNEMSA\n\netc"
								},
								{
									"name": "Get User group",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "20379680-9698-4db7-9b27-3036638a5cd7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "1474aab0-42e3-40cd-b9eb-07f02dbde56b",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "f4f15da2-1238-4525-a28a-9a8b979d75ce"
												}
											],
											"id": "a3f6201c-cb74-4ad8-98cf-46a362f81e50"
										},
										{
											"name": "create usergroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c89e328-d388-4bf7-8e30-5794995e5235",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate specific response message",
															"pm.test(\"Validate response message is 'Add'\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Add\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "e91d1b5e-84cf-458e-9bfb-14b41934f04a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroup"
											},
											"response": [
												{
													"id": "d7f0c7f6-3dd9-44ea-9201-d37afd487f95",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroup"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "5023f25e-3913-45de-914e-e740658d937a"
								},
								{
									"name": "Get User group Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Save the first usergroup as a collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"usergroup\", jsonData.data[0].usergroup);",
																			"}",
																			"",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "cdacd0d0-960f-4213-98a1-df655d1d0af1",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a30969bd-937b-49b0-b230-d2a454b5c1b3",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "04d35dc4-88da-4ad5-b44a-72954b7bbedd"
												}
											],
											"id": "2aa878ad-6df4-4328-a178-86fcc4351e8d"
										}
									],
									"id": "af6224d2-98e3-4b71-8310-d4ee991e35d4"
								},
								{
									"name": "Delete User group",
									"item": [
										{
											"name": "delete user group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fafeb9f-4439-4939-b8dd-382f93d736b8",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate responsemessage is not empty and contains 'removed'",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.be.a(\"string\").and.not.empty;",
															"    pm.expect(jsonData.responsemessage).to.include(\"removed\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9df7d73b-d70b-4ba7-b060-1e759b109f7f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": {{usergroup-id}},\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroupdelete"
											},
											"response": [
												{
													"id": "b1d7d418-c9d4-4eba-83ae-3edda5a8f62b",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroupdelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "ccf84aae-2395-4f4d-8b70-4fa71cbd328d"
								},
								{
									"name": "Get User group role",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "8dd42a1b-cc2f-4d50-9726-583db0a5fc1a",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "40513fa0-5985-480d-9973-c462c8a4513c",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "0ac50444-2897-4b27-ad6b-d0d9f343a0a0"
												}
											],
											"id": "c22ec0f9-b8e9-4be1-a452-1572f2e21846"
										},
										{
											"name": "create usergroup role",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24a9b83f-3c43-40c4-9cbb-df36443912cf",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate that responsemessage is empty",
															"pm.test(\"Validate responsemessage is empty\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "537a3b68-92b7-44b1-9dda-ec34f39b68b6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 10,\n  \"usergroup\": \"MAF\",\n  \"role\": \"Admin 3\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouprole"
											},
											"response": [
												{
													"id": "a38818ae-e5a0-488c-a6eb-0593c06e3475",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouprole"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "397f4c65-21a3-4773-b2fd-dbd6f0d6f68d"
								},
								{
									"name": "Get User group role Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "f0491ec0-949d-4778-9ef6-8a3c334cdd5b",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "9a4d7a2e-5cd7-4d30-b156-5551e0cdad54",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "c826b5b8-6faf-43de-a928-07957fb2985f",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "6af55cb4-715c-47b1-b267-aae23d261cd5",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "472d2c43-dfae-44d6-bcb5-ed59f2064de1"
												}
											],
											"id": "d98d9d99-ba21-4310-bb8b-3ce3189b9192"
										}
									],
									"id": "4a77b6f6-27d7-4975-816b-1a156e6f751a"
								},
								{
									"name": "Delete User group roles",
									"item": [
										{
											"name": "delete usergroup role",
											"id": "8d3a52c6-b23c-41db-8b71-ea7d3a4d1aa4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouproledelete"
											},
											"response": [
												{
													"id": "99502b2f-d95b-4c86-b781-4e67d3426ecc",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouproledelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "dcf6de40-db11-4f42-8a0e-63f691b1014f"
								},
								{
									"name": "Deactivate User",
									"item": [
										{
											"name": "deactivate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a3f852-8f7c-4072-9914-a3c1b8ae9c50",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "29d1e3bc-85b5-4b62-b0c0-b488899f034d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": true,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "3c66cb64-28d1-49e8-b931-9eb78b17659b"
								},
								{
									"name": "Activate User",
									"item": [
										{
											"name": "activate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d385da7-bb33-4766-ad65-8cb56ef51f68",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "257df33d-03d1-40dd-9525-10f4f25e7f70",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": false,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "6b97b272-6004-4e97-8149-667b81d39184"
								},
								{
									"name": "Invite User",
									"item": [
										{
											"name": "inviteuser",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 200 or 301",
															"pm.test(\"Status code is 200 or 301\", () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate API response code is 200 or 301",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message based on response code",
															"pm.test(\"Validate response message content\", () => {",
															"    if (jsonData.responsecode === 200) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"registered\");",
															"    } else if (jsonData.responsecode === 301) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"email already exist\");",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "91a4f8f3-ba8c-4a55-aac0-46680bcc505b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No auth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"// Validate HTTP status code",
															"pm.test(\"Status code is 401\", () => {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "b4fe6bc2-8262-4a7c-b45e-7c33169ff567",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 400",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Validate top-level error response fields",
															"pm.test(\"Validate top-level error fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"title\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"status\", 400);",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"object\");",
															"    pm.expect(jsonData).to.have.property(\"traceId\").that.is.a(\"string\");",
															"});",
															"",
															"// Validate email validation error",
															"pm.test(\"Validate email error message\", () => {",
															"    pm.expect(jsonData.errors).to.have.property(\"email\").that.is.an(\"array\");",
															"    pm.expect(jsonData.errors.email[0]).to.eql(\"The email field is required.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "f9ebad62-8b12-4331-94a4-d01bdcb890a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \" \",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										}
									],
									"id": "2b79f442-2e24-4995-b6b8-50f980f21949",
									"description": "Use this endpoint to invite user, auth_level must be specify in a way that it can use to retrieve user list based on auth_level assigned."
								},
								{
									"name": "Post User activities",
									"item": [
										{
											"name": "update activity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38a93eff-240e-4c2b-bd54-3a38f075422b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage.toLowerCase()).to.eql(\"activity saved\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4fcab200-16bb-470b-bddc-8b10dcf4ae18",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
														"disabled": true
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/updateactivity"
											},
											"response": [
												{
													"id": "be2ecf9e-1613-4a4f-a155-04ca1166295a",
													"name": "update activity",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "accept",
																"value": "application/json, text/plain, */*"
															},
															{
																"key": "accept-language",
																"value": "en-US,en;q=0.9"
															},
															{
																"key": "authorization",
																"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
																"disabled": true
															},
															{
																"key": "content-type",
																"value": "application/json"
															},
															{
																"key": "origin",
																"value": "https://primes.omniswift.com"
															},
															{
																"key": "priority",
																"value": "u=1, i"
															},
															{
																"key": "referer",
																"value": "https://primes.omniswift.com/"
															},
															{
																"key": "sec-ch-ua",
																"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
															},
															{
																"key": "sec-ch-ua-mobile",
																"value": "?0"
															},
															{
																"key": "sec-ch-ua-platform",
																"value": "\"macOS\""
															},
															{
																"key": "sec-fetch-dest",
																"value": "empty"
															},
															{
																"key": "sec-fetch-mode",
																"value": "cors"
															},
															{
																"key": "sec-fetch-site",
																"value": "cross-site"
															},
															{
																"key": "user-agent",
																"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/operations/updateactivity"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:05:00 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "access-control-allow-origin",
															"value": "*"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": null,\n    \"responsemessage\": \"activity saved\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 0,\n    \"currentpage\": 0\n}"
												}
											]
										}
									],
									"id": "21a04b57-b500-47e0-8fc7-8a9d941ed881"
								},
								{
									"name": "User Invited Account",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "/api/users/invitedaccount/:data/:offset/:limit",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f549a7b9-3ab1-42c3-bbcc-639b8c9a3fe0",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "b8d4de7f-eac4-42af-bfaa-b9967734b3d8",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "39f71d8f-2c3f-460e-8b88-5ba5dca8a0ca",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "dfdc249b-ef01-42aa-97d6-1b773677c3e6"
														}
													],
													"id": "a7e49e6c-dc3d-4356-8752-92d393a61888"
												}
											],
											"id": "a0c54f87-45aa-45ba-8124-67aa8df0d30a"
										}
									],
									"id": "3c51fd39-e8e0-420b-866f-3aae571770c6"
								},
								{
									"name": "Get Invited Users",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "invited accounts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "7235175d-0742-4f16-836c-43f4200f17b9",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "b98d5088-d8ee-478e-9e46-70d2395a0399",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "100",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "f886a1ad-927a-49b7-a96f-39effd668e42",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "4c94c947-8164-41fe-87ff-2711b945fb6e"
														}
													],
													"id": "0f114c36-1821-4a57-8b27-742426bc1ef9"
												}
											],
											"id": "b9869d52-e6ff-4356-b81f-7af51c8b305a",
											"description": "PMI\n\nDISREP\n\n\\--refere to prop_scheme"
										}
									],
									"id": "56c7ebd9-d3db-4844-abf7-4a0bbcd414ad",
									"description": "This endpoint return list of newly invited user"
								},
								{
									"name": "Send Mail",
									"item": [
										{
											"name": "/sendmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e61c31c-c49d-4114-aad5-d96f55121de9",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate specific message",
															"pm.test(\"Validate verification message\", () => {",
															"    pm.expect(jsonData).to.eql(\"Verification code sent!!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "0013eb5b-b185-4d61-afd3-9c59c9738c3c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/sendmail"
											},
											"response": [
												{
													"id": "f53c5a67-1451-43e8-a128-8657ea7205ae",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"string\",\n  \"receiver\": \"string\",\n  \"subject\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"responseTime": null,
													"body": ""
												},
												{
													"id": "45a92c65-b43e-4457-8bbd-b1da1eadc98f",
													"name": "/sendmail",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:18:23 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "\"Verification code sent!!\""
												}
											]
										}
									],
									"id": "f661b151-7f9c-4a97-ab32-efadeb3f621e"
								}
							],
							"id": "ad75c036-1dad-4710-ad5a-53c2bd33e16e"
						},
						{
							"name": "Security",
							"item": [
								{
									"name": "Update Password",
									"item": [
										{
											"name": "update password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70dedc31-a94c-4636-b9b2-14edeb0351f9",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Test that the response message indicates password was changed",
															"pm.test(\"Response message is 'Password Changed'\", function () {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Password Changed\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "3f4094ed-93df-41c3-8278-b0b9d91a98de",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "8666b3d4-8359-43dc-a053-9a6b0f1b02fc",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "update password with same password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "3150a109-118c-4e59-bf23-37e9700c1f37",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "9143bcaa-b95f-4a95-a845-5dc83ef831cd",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "validate password complexity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Get the request body",
															"let body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
															"let password = body.newpassword;",
															"",
															"if (!password) {",
															"    pm.test(\"Password validation\", function () {",
															"        pm.expect.fail(\"newpassword is missing from payload\");",
															"    });",
															"} else {",
															"    let minLength = password.length >= 8;",
															"    let hasUppercase = /[A-Z]/.test(password);",
															"    let hasLowercase = /[a-z]/.test(password);",
															"    let hasNumber = /[0-9]/.test(password);",
															"    let hasSpecialChar = /[!@#$%^&*(),.?\\\":{}|<>]/.test(password);",
															"",
															"    pm.test(\"Password meets complexity requirements\", function () {",
															"        pm.expect(minLength, \"Minimum 8 characters\").to.be.true;",
															"        pm.expect(hasUppercase, \"Has uppercase\").to.be.true;",
															"        pm.expect(hasLowercase, \"Has lowercase\").to.be.true;",
															"        pm.expect(hasNumber, \"Has number\").to.be.true;",
															"        pm.expect(hasSpecialChar, \"Has special character\").to.be.true;",
															"    });",
															"}",
															"",
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4046eb6a-98ff-4565-8b3e-8e2fa2dad3e5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "e540e277-c96d-42e1-ba9e-028e033c2fce",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "c0a47529-d194-4b50-9e4f-1d0656fc4fec"
								}
							],
							"id": "10b984a4-1976-4059-a6ca-76cd4a2577fa"
						},
						{
							"name": "Audit Log",
							"item": [
								{
									"name": "Get Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1ae6e76d-3413-41c9-96f7-cea57146ccd2",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "766eecba-7d0e-44dd-9ab2-70d19acfc08c",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "3d883c66-6019-4266-bfa1-c3a242b249c0",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "504a31bb-b32f-4efa-a248-063c50ae148d"
												}
											],
											"id": "1e5c4d5d-5292-495d-b6e1-b4626900d6ab"
										}
									],
									"id": "cd6c84a5-e055-4693-b893-be3ffc58b3c5"
								},
								{
									"name": "Get User's Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1e8ec071-2804-440b-b801-0aec7b32a4d1",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    const firstLog = jsonData.data[0];",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "c5d80aa3-5a43-4022-a2f2-a1db7dd7b31b",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit?id={{log-id}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "{{log-id}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "cc693b18-77e2-4f68-9e9e-6ff32776ce42",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "7ef22315-671e-439c-a1aa-fdc5aff33835"
												}
											],
											"id": "0e959a1f-db4c-427f-8f41-49ba3757e798"
										}
									],
									"id": "f59fd5d3-32e9-4c9a-b1f7-7340031fa20a"
								},
								{
									"name": "Post user logs",
									"item": [
										{
											"name": "/logging",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "250b37fc-f2a5-4aa7-b86e-e53954eec282",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "88cded33-d134-4402-84df-b4b18f85b705",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": {{log-id}},\n    \"logdate\": \"2025-09-02T11:20:33.6271878\",\n    \"logtype\": \"Installer\",\n    \"logmessage\": \"Login\",\n    \"logby\": \"Meter Test\",\n    \"logid\": \"b692d281-5ee0-49e0-9fe0-f29ba0f183eb\",\n    \"logevent\": \"User Login\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "0f04317b-68f4-47d5-a144-eb32f86058b1",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "78003117-e273-41f6-98b2-fb3e591f0435"
								},
								{
									"name": "Get User Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "79364f44-fe63-4120-9de6-92240b838957",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "56602e09-be84-4ac5-aba8-96508d3c70bb",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "b481af80-c7d4-4879-bc9a-916424ac4b0e",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "7a9370bd-3d49-40e1-b42e-8286b3510bc7"
												}
											],
											"id": "563268eb-af15-4143-aa6c-47bea1801b03"
										}
									],
									"id": "905bc207-decd-4372-b1e5-47cc5e3aa1ec"
								},
								{
									"name": "Post Logs",
									"item": [
										{
											"name": "post logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "038f1db6-bde1-4177-8b8f-cf0527156405",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "5822f991-1433-4a9e-8048-1be796592a5b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "52e8e4b4-7697-4b4b-878f-9ec389ffcfdb",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "9ce8ee08-b12c-40c7-bbf4-4ade9d7b7177"
								}
							],
							"id": "24db7439-4ce9-4960-abbb-7fad4907667a"
						}
					],
					"id": "c16d285b-1bc3-44b8-ae60-8a36f047838f"
				},
				{
					"name": "Verify User Email",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "verifyallusers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdea7846-474f-41c2-9505-c15338740496",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate response message",
													"pm.test(\"Validate response message\", () => {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Verified\");",
													"});",
													"",
													"// Validate required keys in data object",
													"pm.test(\"Validate keys in data object\", () => {",
													"    const requiredKeys = [",
													"        \"id\",",
													"        \"fullname\",",
													"        \"username\",",
													"        \"roles\",",
													"        \"pagerole\",",
													"        \"disco\",",
													"        \"prop_scheme\",",
													"        \"canwrite\",",
													"        \"auth_level\",",
													"        \"mailgoup\",",
													"        \"inroles\",",
													"        \"lockstatus\",",
													"        \"userpresnt\",",
													"        \"logtime\",",
													"        \"datejoint\",",
													"        \"password\",",
													"        \"passcode\",",
													"        \"codevalid\",",
													"        \"retry\"",
													"    ];",
													"    ",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate data types of important fields",
													"pm.test(\"Validate data types in user object\", () => {",
													"    pm.expect(jsonData.data.id).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.fullname).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.username).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.roles).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.canwrite).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.mailgoup).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.lockstatus).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.userpresnt).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.retry).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.logtime).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.codevalid).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1e709df2-2e06-4a24-a971-132fa7f099fa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Profiles",
												"verifyalluser",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "emediongetuk323@gmail.com",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "ebdcd89a-6011-4e18-a761-e60039d3f31a",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Profiles",
														"verifyalluser",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "22245e1f-4cf2-4144-a0fe-8974d7fa07e5",
							"description": "Email Address"
						}
					],
					"id": "654dc37d-6b2f-43d4-a18b-885f864e7827",
					"description": "This endpoint is for verifying of user by email address, User must be registered first.\n\nUpon successful verification, Security code will be sent to the user mailbox"
				},
				{
					"name": "Get Meter Phase",
					"item": [
						{
							"name": "meter phase list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "244e2b65-7f4a-4bb9-b851-7818a44b7af4",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test that the response is an array",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test that the array contains 'Single Phase' and 'Three Phase'",
											"pm.test(\"Array contains expected meter phases\", function () {",
											"    pm.expect(jsonData).to.include(\"Single Phase\");",
											"    pm.expect(jsonData).to.include(\"Three Phase\");",
											"});",
											"",
											"// Test that the array has exactly 2 elements",
											"pm.test(\"Array has 2 elements\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a5e38dda-c291-421c-a6b6-16345232b6a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": "{{baseUrl}}/api/operations/meterphase"
							},
							"response": [
								{
									"id": "f1ef4f46-811f-4262-a4d2-0b286c8efb4e",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/operations/meterphase"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n  \"string\",\n  \"string\"\n]"
								}
							]
						}
					],
					"id": "938153e9-91f0-4ea7-8948-65d95eed2834"
				},
				{
					"name": "Delete Meter Brand",
					"item": [
						{
							"name": "delete brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daa531ed-f292-4984-8d09-eadacc4a30f6",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a('string');",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a('string');",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is true\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "94315c62-8114-4f6f-9515-1b633620be19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/deletebrand"
							},
							"response": [
								{
									"id": "f6740ca5-a028-487a-9b80-1e0c32de0f37",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/deletebrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "637ab146-2672-48cc-abe2-00e4ca287eaf"
				},
				{
					"name": "Save Meter Brand",
					"item": [
						{
							"name": "save meter brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf7b3d8-6226-4a11-ba22-34d3fd9289c0",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that cc is 2222",
											"pm.test(\"cc is 2222\", function () {",
											"    pm.expect(jsonData.cc).to.eql(2222);",
											"});",
											"",
											"// Test that responsecode is 2883",
											"pm.test(\"responsecode is 2883\", function () {",
											"    pm.expect(jsonData.responsecode).to.eql(2883);",
											"});",
											"",
											"// Test that data.nullable is true",
											"pm.test(\"data.nullable is true\", function () {",
											"    pm.expect(jsonData.data.nullable).to.be.true;",
											"});",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a(\"string\");",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is false\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.false;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "27fbf0cf-9f1a-4d09-a652-12afee910310",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savemeterbrand"
							},
							"response": [
								{
									"id": "0227c6c8-cd75-44a3-a460-5fc19e9441e8",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savemeterbrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "8218a957-1846-4898-839a-a8b7a258c86a"
				},
				{
					"name": "Asset Folder",
					"item": [
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74a81c3-cb31-4832-a018-e89709d1334d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Expected list of DISCOs",
													"const expectedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Test that response is an array",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(jsonData)).to.be.true);",
													"",
													"// Test that response has all expected DISCOs",
													"pm.test(\"Response contains all expected DISCOs\", () => {",
													"    expectedDiscos.forEach(disco => {",
													"        pm.expect(jsonData).to.include(disco);",
													"    });",
													"});",
													"",
													"// Test that the length matches",
													"pm.test(\"Response array length matches expected\", () => {",
													"    pm.expect(jsonData.length).to.eql(expectedDiscos.length);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cba6e660-9dac-41cc-a50c-0c6ad658a94d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "a1316877-8e6b-494a-ae5d-f1de6caa75ce",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "7848b007-643b-48d0-8246-1b1a403c87a9"
						},
						{
							"name": "Get State",
							"item": [
								{
									"name": "get list of states",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b81c42e-1610-43ae-8630-4cd47520fc02",
												"exec": [
													"// Parse response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response is an array",
													"pm.test(\"Response is an array\", () => {",
													"    pm.expect(Array.isArray(jsonData)).to.be.true;",
													"});",
													"",
													"// Validate each state object structure",
													"jsonData.forEach((stateObj, index) => {",
													"    pm.test(`State object #${index + 1} has required properties`, () => {",
													"        pm.expect(stateObj).to.have.property(\"state\");",
													"        pm.expect(stateObj).to.have.property(\"lgas\");",
													"        pm.expect(stateObj).to.have.property(\"alias\");",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'state' is a non-empty string`, () => {",
													"        pm.expect(stateObj.state).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'lgas' is a non-empty array`, () => {",
													"        pm.expect(stateObj.lgas).to.be.an(\"array\");",
													"        pm.expect(stateObj.lgas.length).to.be.greaterThan(0);",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'alias' is a non-empty string`, () => {",
													"        pm.expect(stateObj.alias).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`LGAs of state #${index + 1} are valid strings`, () => {",
													"        stateObj.lgas.forEach(lga => {",
													"            pm.expect(lga).to.be.a(\"string\").and.not.empty;",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9db656c5-7b27-45fa-9abe-4f742fa28106",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/proassest/getstates"
									},
									"response": [
										{
											"id": "c988e52e-d8b9-41c9-884b-e770994af5f8",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/proassest/getstates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  },\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  }\n]"
										}
									]
								}
							],
							"id": "5ebb141d-c82b-4ba6-abbf-2289ea388140"
						}
					],
					"id": "c33052f0-409d-4551-aa41-ae65e5c77449"
				},
				{
					"name": "Save Meter Supplier",
					"item": [
						{
							"name": "save meter supplier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75663c3c-50c2-49a5-80e8-257af7221b8b",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e13cf748-a44d-4496-ab3c-ad128edd1213",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savems"
							},
							"response": [
								{
									"id": "f1b09233-b2ee-4c3a-a978-05a2992b4614",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savems"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "11a1ea71-712e-442b-8851-96fc64a913a1"
				},
				{
					"name": "Get Meter Supplier [Name]",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get ms name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7516d331-23f0-4faa-a64c-b22529e8e39c",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Optionally check that totalpage and currentpage exist",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "a6a49eb6-16ee-4b4a-86b2-181f5abbca29",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"getmsname",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "599fd62a-8e85-400b-a82a-e3c4abc20ae4",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getmsname",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 8349,\n  \"responsecode\": 1554,\n  \"data\": [\n    {\n      \"emailaddress\": \"y2a@hBrmvfWFtqBnttKxDMNqLZTifbrTbMjE.znkr\",\n      \"ms_name\": \"string\",\n      \"id\": 1303\n    },\n    {\n      \"emailaddress\": \"GSTs3@MiaUBOabpshp.dbxu\",\n      \"ms_name\": \"string\",\n      \"id\": 3672\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8578,\n  \"currentpage\": 6290\n}"
												}
											]
										}
									],
									"id": "709d56d8-40a0-4cf0-a75a-0dd381a52238"
								}
							],
							"id": "c5bb777d-abf9-4d4b-8618-308f412a4fb7"
						}
					],
					"id": "8e489e37-cb81-48c7-ab64-602219c23d7a"
				},
				{
					"name": "Get Meter Supplier",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get meter suppliers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93d59b3c-72aa-40f2-9a90-747113b52453",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier's id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Test that totalpage and currentpage exist and are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Optional: Test that all suppliers have an email",
															"pm.test(\"All suppliers have an email address\", () => {",
															"    jsonData.data.forEach(supplier => {",
															"        pm.expect(supplier.emailaddress).to.be.a(\"string\").and.not.be.empty;",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "0ed12aa1-1fda-449e-9c00-106b04d6c6ce",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"metersupplier",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "70bf6f4e-9f78-4083-9840-4945afe8a9b5",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
												}
											]
										}
									],
									"id": "4c133670-3f21-4d95-a981-07cc2994a98b"
								}
							],
							"id": "ab495044-a924-4e74-a598-a394c87e06e3"
						}
					],
					"id": "32fc8b16-8a31-4c88-8e3f-b716970d0a80"
				},
				{
					"name": "Update Meter Supplier",
					"item": [
						{
							"name": "update ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25de1016-c686-4d3d-8ec8-2f844186d849",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
											"",
											"// Test that responsemessage is empty",
											"pm.test(\"responsemessage is empty\", () => pm.expect(jsonData.responsemessage).to.eql(\"\"));",
											"",
											"// Test that totalpage and currentpage are numbers",
											"pm.test(\"totalpage and currentpage are numbers\", () => {",
											"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
											"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d8ab52b7-7d7b-4a2e-bf5c-c277bf30ad8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"address\": \"string\",\n//     \"company\": \"string\",\n//     \"company_phone\": \"string\",\n//     \"country\": \"string\",\n//     \"emailaddress\": \"string\",\n//     \"m_brand\": \"string\",\n//     \"m_country\": \"stri\",\n//     \"m_supplier\": \"string\",\n//     \"mailgoup\": true,\n//     \"phone_number\": \"string\",\n//     \"state\": \"string\",\n//     \"zipcode\": \"string\",\n//     \"id\": 103,\n//     \"pri_contact\": \"string\",\n//     \"contact_email\": \"string\",\n//     \"roles\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"firstname\": \"string\",\n//     \"lastname\": \"string\",\n//     \"mcount\": 7471,\n//     \"concount\": 1430,\n//     \"accountstatus\": false,\n//     \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n//     \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n// }\n\n{\n    \"id\": 8,\n    \"m_supplier\": \"Mita Suplaya\",\n    \"m_brand\": \"Mbah Power Limited\",\n    \"company\": \"Ifeoma Tester\",\n    \"m_country\": \"united-kingdom\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"pri_contact\": \"Ifeoma Tester\",\n    \"contact_email\": \"mitams@yopmail.com\",\n    \"company_phone\": \"80123302345\",\n    \"roles\": \"\",\n    \"vendor_id\": \"Mita\",\n    \"mailgoup\": true,\n    \"phone_number\": \"80123302345\",\n    \"country\": \"country1\",\n    \"state\": \"Lagos\",\n    \"address\": \"12, Tazah Street, Lagos\",\n    \"zipcode\": \"40751\",\n    \"firstname\": \"\",\n    \"lastname\": \"\",\n    \"fullname\": \"Meetah Suplaya\",\n    \"mcount\": 0,\n    \"concount\": 1,\n    \"accountstatus\": false,\n    \"datejoin\": \"2025-08-29T17:25:44.0503349\",\n    \"lastlogin\": \"2025-09-02T17:05:33.6108699\",\n    \"contract\": 1\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/update"
							},
							"response": [
								{
									"id": "7ff6fcf1-bf1e-461b-8e5d-37bea4d623fe",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address\": \"string\",\n  \"company\": \"string\",\n  \"company_phone\": \"string\",\n  \"country\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_brand\": \"string\",\n  \"m_country\": \"stri\",\n  \"m_supplier\": \"string\",\n  \"mailgoup\": true,\n  \"phone_number\": \"string\",\n  \"state\": \"string\",\n  \"zipcode\": \"string\",\n  \"id\": 103,\n  \"pri_contact\": \"string\",\n  \"contact_email\": \"string\",\n  \"roles\": \"string\",\n  \"vendor_id\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"mcount\": 7471,\n  \"concount\": 1430,\n  \"accountstatus\": false,\n  \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n  \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Metersupplier/update"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "22b7898d-3a1a-4ee5-bc26-e33556b0a75d"
				},
				{
					"name": "Meter List",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "meter list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "219f526f-1136-40c6-8ea0-1937e470dfa6",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array",
															"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Test that totalpage and currentpage are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Test that each meter object contains required fields",
															"pm.test(\"Each meter has required fields\", () => {",
															"    jsonData.data.forEach(meter => {",
															"        pm.expect(meter).to.have.property(\"id\");",
															"        pm.expect(meter).to.have.property(\"meter_number\");",
															"        pm.expect(meter).to.have.property(\"meter_brand\");",
															"        pm.expect(meter).to.have.property(\"date_supplied\");",
															"        pm.expect(meter).to.have.property(\"meter_phase\");",
															"        pm.expect(meter).to.have.property(\"batch_number\");",
															"        pm.expect(meter).to.have.property(\"vendor_id\");",
															"        pm.expect(meter).to.have.property(\"vendorname\");",
															"        pm.expect(meter).to.have.property(\"disco\");",
															"        pm.expect(meter).to.have.property(\"prop_scheme\");",
															"        pm.expect(meter).to.have.property(\"certified\");",
															"        pm.expect(meter).to.have.property(\"status\");",
															"        pm.expect(meter).to.have.property(\"approvedate\");",
															"    });",
															"});",
															"",
															"// Save the first meter id as a collection variable",
															"if (jsonData.data.length > 0) {",
															"    pm.collectionVariables.set(\"first_meter_id\", jsonData.data[0].id);",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9e5ec8ed-22a7-422b-8080-b52ed8b8822b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"meterlist",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "578f1516-66c5-405d-b1ed-08436ff21521",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"meterlist",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
												}
											]
										}
									],
									"id": "531ab23e-fe09-4fbb-81e7-ebfe89f4c8dc"
								}
							],
							"id": "e4570c43-061b-4548-b9e2-52d38468e7f4"
						}
					],
					"id": "1a871665-a6cd-4e7b-ba3a-a61cbe337cb9",
					"description": "Get Meters"
				},
				{
					"name": "Get user activities",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get activities",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "72a0f9da-6ba0-4fc1-bc50-f7899a809e1e",
																"exec": [
																	"// Parse the response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Test that response code is 200",
																	"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
																	"",
																	"// Test that responsStatus is true",
																	"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
																	"",
																	"// Test that data is an array",
																	"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																	"",
																	"// Test that totalpage and currentpage are numbers",
																	"pm.test(\"totalpage and currentpage are numbers\", () => {",
																	"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
																	"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
																	"});",
																	"",
																	"// Test that each activity object contains required fields",
																	"pm.test(\"Each activity has required fields\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.property(\"id\");",
																	"        pm.expect(item).to.have.property(\"customerid\");",
																	"        pm.expect(item).to.have.property(\"activity\");",
																	"        pm.expect(item).to.have.property(\"party\");",
																	"        pm.expect(item).to.have.property(\"actby\");",
																	"        pm.expect(item).to.have.property(\"staus\"); // note: spelling matches response",
																	"        pm.expect(item).to.have.property(\"readstatus\");",
																	"        pm.expect(item).to.have.property(\"endate\");",
																	"        pm.expect(item).to.have.property(\"dateread\");",
																	"    });",
																	"});",
																	"",
																	"// Save the first activity id as a collection variable",
																	"if (jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"first_activity_id\", jsonData.data[0].id);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "039e05f3-fc96-40d8-9c04-40b5d261a5eb",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getactivities",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "384fb07e-bce1-4f51-952b-eb6d19b8b29d",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getactivities",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 2697,\n  \"responsecode\": 4041,\n  \"data\": [\n    {\n      \"id\": 547,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": true,\n      \"readstatus\": false,\n      \"endate\": \"1955-09-22T16:03:28.568Z\",\n      \"dateread\": \"1972-02-03T13:37:55.177Z\"\n    },\n    {\n      \"id\": 3475,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": false,\n      \"readstatus\": false,\n      \"endate\": \"2003-06-12T03:38:32.065Z\",\n      \"dateread\": \"2019-11-10T19:25:48.876Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6332,\n  \"currentpage\": 3639\n}"
														}
													]
												}
											],
											"id": "e9c277db-58d4-4be7-9a41-6c26ca46c524"
										}
									],
									"id": "383b469d-ce41-4b9f-99e3-6ff874a62b41"
								}
							],
							"id": "740df412-f9be-4b0b-ab19-8bed4af30032"
						}
					],
					"id": "483aec13-72f2-4c8f-842a-72681219a0e0"
				},
				{
					"name": "Post Users Activities",
					"item": [
						{
							"name": "post activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8583ff53-4633-4e49-9229-c6d0adff944f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "10165eac-0e3a-4b40-abbd-1eb853086e3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/postactivity"
							},
							"response": [
								{
									"id": "1e7a044a-939e-40b1-961a-56a1c1ba6bef",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/postactivity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "6de25de4-9590-4a33-a038-eb96cbd7e1ea"
				},
				{
					"name": "Get User's Comment",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get coments",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0657aef7-ea3b-4196-ae2a-d615e41a7a80",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate data is empty",
																	"pm.test(\"Validate data is empty\", () => {",
																	"    pm.expect(jsonData.data.length).to.eql(0);",
																	"});",
																	"",
																	"// Validate response message is empty",
																	"pm.test(\"Validate response message is empty\", () => {",
																	"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "bf6d1256-44f0-469c-8100-7a649c551e59",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getcomments",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "147",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "343f312c-106c-4233-8029-ebdb01e27651",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getcomments",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6197,\n  \"responsecode\": 6995,\n  \"data\": [\n    {\n      \"id\": 9158,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"2005-02-07T20:46:29.356Z\"\n    },\n    {\n      \"id\": 4418,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"1959-05-04T17:56:38.496Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 499,\n  \"currentpage\": 5013\n}"
														}
													]
												}
											],
											"id": "b0f2d1d7-1e70-40d6-9542-4f6eee691e33"
										}
									],
									"id": "3eeb6043-3d91-4982-a444-40253acc4fa7"
								}
							],
							"id": "8b8b4094-4a2e-42dc-8c0f-d88278fc0b6c"
						}
					],
					"id": "1f37f0eb-b761-48ad-8a46-2121826683b8"
				},
				{
					"name": "Notifications",
					"item": [
						{
							"name": "get notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14673d56-ca1a-4d90-a6f7-e79cf4f60234",
										"exec": [
											"// Parse response",
											"const jsonData = pm.response.json();",
											"",
											"// Test status code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test data object exists",
											"pm.test(\"Data object exists\", () => {",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"});",
											"",
											"// Test counters exist and are numbers",
											"[\"total\", \"read\", \"unread\", \"archived\"].forEach(key => {",
											"    pm.test(`${key} exists and is a number`, () => {",
											"        pm.expect(jsonData.data).to.have.property(key);",
											"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
											"    });",
											"});",
											"",
											"// Test all counters are >= 0",
											"pm.test(\"Counters are non-negative\", () => {",
											"    pm.expect(jsonData.data.total).to.be.at.least(0);",
											"    pm.expect(jsonData.data.read).to.be.at.least(0);",
											"    pm.expect(jsonData.data.unread).to.be.at.least(0);",
											"    pm.expect(jsonData.data.archived).to.be.at.least(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dc7e5b0c-bbcc-4b95-8a78-bb61165ac966",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/operations/notifications/MAF"
							},
							"response": []
						}
					],
					"id": "5af8b36c-0e8d-4786-ab2d-d2b7f46c0da0"
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8159a242-2050-4465-b926-1963e98df6e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e7af3a96-00cc-49ad-8a88-1766e1db773c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/authentication/logout"
							},
							"response": [
								{
									"id": "96639447-dba0-4642-8a74-35cdc5821820",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/authentication/logout"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "59db5953-fd76-45f7-8bcd-f9919d5edff8",
					"description": "Always call this endpoint when user logout from the frontend"
				}
			],
			"id": "d9e620fa-5666-47db-9e6b-651b2c56eae5",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{maf-token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "14c1c2b2-e8ec-4ee0-843c-5a7ef1f4c4d2",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46de7f76-5bc2-42ea-90e0-3746ea6a07a4",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DISREP",
			"item": [
				{
					"name": "Authorization",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "92401b67-e780-4f36-bf9f-480009a2e7a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"lozydisrep@yopmail.com\",\n    \"password\": \"Tester@123\"\n}\n\n// {\n//    \"username\": \"emediongetuk323@gmail.com\",\n//     \"password\": \"1234\"\n// }",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "e4ba2f4c-ae7d-45b4-8280-64d3e74b31d2",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f8800244-9982-45dc-a702-49c5e5139f6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"g\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "012921d5-ffb9-4ea8-925b-86d248a74621",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"",
											"// Test that response status is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test tokenType exists and is 'Bearer'",
											"pm.test(\"Token type is Bearer\", () => {",
											"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
											"});",
											"",
											"// Test accessToken exists and is not empty",
											"pm.test(\"Access token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"accessToken\");",
											"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"// Test expiresIn exists and is greater than 0",
											"pm.test(\"expiresIn is valid\", () => {",
											"    pm.expect(responseData).to.have.property(\"expiresIn\");",
											"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
											"});",
											"",
											"// Test refreshToken exists and is not empty",
											"pm.test(\"Refresh token is present\", () => {",
											"    pm.expect(responseData).to.have.property(\"refreshToken\");",
											"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "339ad6e5-7eae-4090-8576-cfbc59bec201",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"T\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "b6b2064e-2173-4d8b-aa3e-cf92a9499bdc",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "f03d9bfe-da49-47b4-95b7-d69ad98ccb62",
					"description": "This endpoint return bearer token, which must be bind to the request for all others request"
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2970e671-729b-4274-a10e-453324738aee",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate response structure and values\", () => {",
											"",
											"    // Top-level checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"responsecode\", 200);",
											"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Data object should exist",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"  ",
											"});",
											"",
											"pm.test(\"Validate response user dataTypes\", () => {",
											"    pm.expect(jsonData.data).to.have.property(\"fullname\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"username\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"roles\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data.canwrite).to.be.true;",
											"    pm.expect(jsonData.data.lockstatus).to.be.false;",
											"});",
											"",
											"pm.test(\"Validate inroles and roles\", () => {",
											"    pm.expect(jsonData.data.inroles).to.eql(\"DISREP\");",
											"    pm.expect(jsonData.data.roles).to.eql(\"Admin\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d4abc998-c21a-4d17-868e-62cbac27d1cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"lozydisrep@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "3e43be31-63bb-4974-bcda-df8486b73701",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fec27061-94d4-4ae5-9a5a-fa3b2c9cb2e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@13\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "86b1b74e-88d4-4c74-bbf7-7dfc5cc5840b",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d332b7f3-133f-437c-a3b4-695f2f0548b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilm@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "8aec0f91-abda-44d1-acd7-18f7311e96ae",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Empty login Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validation Error Response\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.status).to.eql(400);",
											"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
											"    pm.expect(jsonData.errors).to.be.an(\"object\");",
											"",
											"    if (jsonData.errors.password) {",
											"        pm.expect(jsonData.errors.password).to.include(\"The password field is required.\");",
											"    }",
											"    if (jsonData.errors.username) {",
											"        pm.expect(jsonData.errors.username).to.include(\"The username field is required.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "221d0e5b-7187-4b82-8963-01ef82639f7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \" \",\n    \"password\": \" \"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "ad01fa27-67df-4a10-b224-480f41b41d93",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						}
					],
					"id": "862387e6-bf9d-49ca-a06d-373793c0a27c",
					"description": "Use this endpoint for user login.\n\nThis endpoint return user object upon successful login"
				},
				{
					"name": "Verify Security Code",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{passcode}",
									"item": [
										{
											"name": "verifycode",
											"id": "5f36536a-3b11-43e5-9beb-283d8dbf9649",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"authentication",
														"verifycodeuser",
														":data",
														":passcode"
													],
													"variable": [
														{
															"id": "1ef212e5-2b6c-430c-b815-5d1d0487db4a",
															"key": "data",
															"value": "string",
															"description": "(Required) "
														},
														{
															"id": "fbc0fc89-5423-4d6a-94f1-99d0d61296fa",
															"key": "passcode",
															"value": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "6b3b583a-b55a-4f69-90f8-a0aad7224c37",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"authentication",
																"verifycodeuser",
																":data",
																":passcode"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "passcode"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
												}
											]
										}
									],
									"id": "aedc945b-d6cb-4b3f-b32f-1fb114ad7683",
									"description": "Security code to be validated"
								}
							],
							"id": "6ba49559-43c3-42ab-a360-59a6852e3d91",
							"description": "Email address"
						}
					],
					"id": "7a7ee794-347d-4b6d-beef-44e842fa8faa",
					"description": "Use this endpoint to verify security code for type of users"
				},
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "PMI Chart",
							"item": [
								{
									"name": "/pmichart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "284ee2f0-e936-42ae-ac84-97d6630f8d81",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response structure and months in data\", () => {",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    const expectedMonths = [",
													"        \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\",",
													"        \"july\", \"aug\", \"sept\", \"oct\", \"nov\", \"dec\"",
													"    ];",
													"",
													"    // Validate keys exist and values are numbers",
													"    expectedMonths.forEach(month => {",
													"        pm.expect(jsonData.data).to.have.property(month);",
													"        pm.expect(jsonData.data[month]).to.be.a(\"number\");",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3386bd79-c831-4edc-a02f-8d8a57e44070",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pmichart?disco=abuja disco&ms=undefined&year=2025",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pmichart"
											],
											"query": [
												{
													"key": "disco",
													"value": "abuja disco",
													"description": "(Required) "
												},
												{
													"key": "ms",
													"value": "undefined",
													"description": "(Required) "
												},
												{
													"key": "year",
													"value": "2025",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "9d298cdb-9607-403b-a835-fdbf75855732",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pmichart?disco=string&ms=string&year=147",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pmichart"
													],
													"query": [
														{
															"description": "(Required) ",
															"key": "disco",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "ms",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "year",
															"value": "147"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 8124,\n  \"responsecode\": 4773,\n  \"data\": {\n    \"jan\": 5476,\n    \"feb\": 9670,\n    \"mar\": 7924,\n    \"apr\": 3517,\n    \"may\": 9818,\n    \"jun\": 9014,\n    \"july\": 6898,\n    \"aug\": 3795,\n    \"sept\": 3071,\n    \"oct\": 2050,\n    \"nov\": 1926,\n    \"dec\": 6078\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3420,\n  \"currentpage\": 7800\n}"
										}
									]
								}
							],
							"id": "65e7dfde-3fda-459c-8570-f844d04c829d"
						},
						{
							"name": "DISREP Overview",
							"item": [
								{
									"name": "DISREP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5e824e-594f-49ea-98c8-f89901539b36",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
													"    pm.expect(jsonData).to.have.property(\"totalpage\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"});",
													"",
													"// Validate required keys inside `data`",
													"pm.test(\"Validate keys inside data object\", () => {",
													"    const requiredKeys = [",
													"        \"contract\",",
													"        \"meters\",",
													"        \"assigned\",",
													"        \"assignedmeter\",",
													"        \"pending\",",
													"        \"pendingmeter\"",
													"    ];",
													"",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate types of values inside `data`",
													"pm.test(\"Validate types of values inside data object\", () => {",
													"    pm.expect(jsonData.data.contract).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.meters).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assigned).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assignedmeter).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
													"});",
													"",
													"// Validate values are non-negative",
													"pm.test(\"Validate numeric values are non-negative\", () => {",
													"    Object.values(jsonData.data).forEach(val => {",
													"        pm.expect(val).to.be.at.least(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1bd51a14-e57f-4477-aea2-08bb878d8174",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/contractquick/DISREP"
									},
									"response": []
								}
							],
							"id": "573b6f93-969a-45bd-81c6-9e6e3663c8f9"
						},
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6ed8808-0f46-4e07-b032-a7ed34c1720b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Allowed list of DISCOs",
													"const allowedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Validate that disco field exists and has allowed values",
													"pm.test(\"Validate disco values against allowed list\", () => {",
													"    // The response is an array, so we check the length and items directly",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"",
													"    jsonData.forEach(item => {",
													"        pm.expect(item).to.be.a('string'); // Validate each item is a string",
													"        pm.expect(allowedDiscos).to.include(item); // Check if the item is in the allowed list",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9bbbbd2b-3327-4de6-a8e3-a06ab03dd212",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "38468c84-9950-4f7d-ab0c-a2e7b19d7e11",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "6d08224b-d597-4f00-9ad6-952a3da0092c"
						}
					],
					"id": "2920a75b-56f7-47e6-ac92-f6930c31b665"
				},
				{
					"name": "Meter Suppliers",
					"item": [
						{
							"name": "msoverview",
							"item": [
								{
									"name": "ms overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ffe9c67-82b8-4345-a4ed-bfe0255e46a1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"total_supplier\",",
													"        \"country\",",
													"        \"declined\",",
													"        \"approved\",",
													"        \"approved_meter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "81e246e6-f13b-4bbf-812b-ae61b5b2c01b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/overview/msoverview"
									},
									"response": [
										{
											"id": "b2459de7-8e22-4dd9-917d-3e6b38928a4a",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/overview/msoverview"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2521,\n  \"responsecode\": 698,\n  \"data\": {\n    \"pending\": 985,\n    \"total_supplier\": 7457,\n    \"country\": 1931,\n    \"declined\": 4597,\n    \"approved\": 517,\n    \"approved_meter\": 5100\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8988,\n  \"currentpage\": 8682\n}"
										}
									]
								}
							],
							"id": "237cf7c4-20ce-421c-851f-da5599f02cd5"
						},
						{
							"name": "Get document",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "getdocument",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4aa3c855-e5c0-481c-ade3-14003b1c8cfd",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Test: Response code is 200",
																			"pm.test(\"Response code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Test: responsecode is 200",
																			"pm.test(\"responsecode is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Test: data is an array (and empty)",
																			"pm.test(\"data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Test: responsemessage is empty string",
																			"pm.test(\"responsemessage is of type string\", () => {",
																			"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
																			"});",
																			"",
																			"// Test: responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.be.true;",
																			"});",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "82088de4-b4e7-45ee-9230-5576181bd094",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": {
																		"token": "{{disrep-token}}"
																	}
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/getdocument/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"getdocument",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "undefined",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "fdf1c55f-ae5a-4728-8e18-7ffc9d712202",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getdocument/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getdocument",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9275,\n  \"responsecode\": 1964,\n  \"data\": [\n    {\n      \"docfile\": \"string\",\n      \"docname\": \"string\",\n      \"doctype\": \"string\",\n      \"owner_id\": \"string\",\n      \"ownertype\": \"string\",\n      \"id\": 1850,\n      \"endate\": \"1985-07-02T14:37:11.758Z\"\n    },\n    {\n      \"docfile\": \"string\",\n      \"docname\": \"string\",\n      \"doctype\": \"string\",\n      \"owner_id\": \"string\",\n      \"ownertype\": \"string\",\n      \"id\": 6940,\n      \"endate\": \"1950-01-29T18:56:53.244Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8944,\n  \"currentpage\": 2536\n}"
																}
															]
														}
													],
													"id": "d76bb603-94b6-4ad9-a718-09b4d9ab51c4"
												}
											],
											"id": "617a8f52-b777-43f0-a9a2-0e93ce3c4e71"
										}
									],
									"id": "d2ce1a11-3846-4f95-8269-b334b11d5d1f",
									"description": "vendor id"
								}
							],
							"id": "fb9bd972-c2e8-4eda-9670-4aa4a4722738"
						},
						{
							"name": "Get Meter Supplier List",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "meter suppliers",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dd0e1d6c-0999-4ce6-a1d9-597a944236f8",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API responsecode",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each data object and their types",
																	"pm.test(\"Validate keys in each supplier object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\", \"m_supplier\", \"m_brand\", \"company\", \"m_country\", \"emailaddress\",",
																	"        \"pri_contact\", \"contact_email\", \"company_phone\", \"roles\", \"vendor_id\",",
																	"        \"mailgoup\", \"phone_number\", \"country\", \"state\", \"address\", \"zipcode\",",
																	"        \"firstname\", \"lastname\", \"mcount\", \"concount\", \"accountstatus\",",
																	"        \"datejoin\", \"lastlogin\", \"contract\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional: check types for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.m_supplier).to.be.a(\"string\");",
																	"        pm.expect(item.m_brand).to.be.a(\"string\");",
																	"        pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																	"        pm.expect(item.accountstatus).to.be.a(\"boolean\");",
																	"        pm.expect(item.mcount).to.be.a(\"number\");",
																	"        pm.expect(item.concount).to.be.a(\"number\");",
																	"        pm.expect(item.contract).to.be.a(\"number\");",
																	"        pm.expect(item.datejoin).to.be.a(\"string\");",
																	"        pm.expect(item.lastlogin).to.be.a(\"string\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "57ad02b9-322b-4ce0-8ae0-c860b0c8421d",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "6d0fdd35-6edc-4a48-8d1f-dc703d96105c",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "59e3de8c-0161-468d-af9a-82d2dc0af9cd",
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "4fd68f04-b292-4a3d-b9d6-fe9c4bf7c00e",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"metersupplier",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
														}
													]
												}
											],
											"id": "7c91a51f-6363-4672-9ea2-e45e80bb6e89"
										}
									],
									"id": "da53412c-7e2a-495b-a0c6-d44f70f4b72c"
								}
							],
							"id": "ee8705c3-4efc-4143-b305-84bc2c9f8948",
							"description": "This endpoint return Meter Supplier List"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "8c34adfe-9a7e-4047-85c1-03c9428a6e70",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=MAF",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "MAF",
																	"type": "text"
																}
															],
															"variable": [
																{
																	"id": "87fa5ed3-5752-41e3-8854-44163da7593e",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "203e94c5-9d4c-4079-8243-102d8db6ff99",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "f0e1376c-e05d-4a3e-b7bc-6e741ca38f25",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "0113d0a7-1cf5-4adf-a04f-150885802f63"
										}
									],
									"id": "93b3097a-ad5c-4df2-accb-afa05577e403"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ce720c72-6b1b-4d8b-a231-dedb029ca6f0",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "1be77f95-8d77-4e8d-9c1d-cdf26b8845b2",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "",
																			"disabled": true
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "498d635b-9fcc-4e07-a316-4508fb43160a",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "bd86c8e7-e2a4-4674-b147-215b614c45d1"
												}
											],
											"id": "3c27ceaf-2aab-4e05-a225-0040571b137f"
										},
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "list of DISREP created contracts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save Contract ID of first contract",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", function () {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate top-level response fields",
																					"pm.test(\"Validate top-level response fields\", () => {",
																					"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																					"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																					"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																					"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys exist in each contract object",
																					"pm.test(\"Validate keys in each contract object\", () => {",
																					"    const requiredKeys = [",
																					"        \"id\",",
																					"        \"vendor_id\",",
																					"        \"vendorname\",",
																					"        \"contract_id\",",
																					"        \"contract_title\",",
																					"        \"meter_brand\",",
																					"        \"company\",",
																					"        \"meterphase\",",
																					"        \"disco\",",
																					"        \"quantity\",",
																					"        \"amount\",",
																					"        \"prop_scheme\",",
																					"        \"review_by\",",
																					"        \"datecreated\",",
																					"        \"approved\",",
																					"        \"expected_delivery\"",
																					"    ];",
																					"",
																					"    jsonData.data.forEach((item, index) => {",
																					"        requiredKeys.forEach(key => {",
																					"            pm.expect(item).to.have.property(key);",
																					"        });",
																					"",
																					"        // Optional type checks for some important fields",
																					"        pm.expect(item.id).to.be.a(\"number\");",
																					"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																					"        pm.expect(item.vendorname).to.be.a(\"string\");",
																					"        pm.expect(item.contract_id).to.be.a(\"string\");",
																					"        pm.expect(item.contract_title).to.be.a(\"string\");",
																					"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																					"        pm.expect(item.company).to.be.a(\"string\");",
																					"        pm.expect(item.meterphase).to.be.a(\"string\");",
																					"        pm.expect(item.disco).to.be.a(\"string\");",
																					"        pm.expect(item.quantity).to.be.a(\"number\");",
																					"        pm.expect(item.amount).to.be.a(\"number\");",
																					"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"        pm.expect(item.review_by).to.be.a(\"string\");",
																					"        pm.expect(item.datecreated).to.be.a(\"string\");",
																					"        pm.expect(item.approved).to.be.a(\"boolean\");",
																					"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																					"    });",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "2d598b1e-4ed2-4517-9073-1c6053d9ad76",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=DISREP",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "DISREP"
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "fca7d970-f056-498c-8b1b-c01cf0e1780a",
																			"name": "list of created contracts",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "accept",
																						"value": "application/json, text/plain, */*"
																					},
																					{
																						"key": "accept-language",
																						"value": "en-US,en;q=0.9"
																					},
																					{
																						"key": "authorization",
																						"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																					},
																					{
																						"key": "origin",
																						"value": "https://primes.omniswift.com"
																					},
																					{
																						"key": "priority",
																						"value": "u=1, i"
																					},
																					{
																						"key": "referer",
																						"value": "https://primes.omniswift.com/"
																					},
																					{
																						"key": "sec-ch-ua",
																						"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																					},
																					{
																						"key": "sec-ch-ua-mobile",
																						"value": "?0"
																					},
																					{
																						"key": "sec-ch-ua-platform",
																						"value": "\"macOS\""
																					},
																					{
																						"key": "sec-fetch-dest",
																						"value": "empty"
																					},
																					{
																						"key": "sec-fetch-mode",
																						"value": "cors"
																					},
																					{
																						"key": "sec-fetch-site",
																						"value": "cross-site"
																					},
																					{
																						"key": "user-agent",
																						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"operations",
																						"supplystatus",
																						"1",
																						"10"
																					],
																					"query": [
																						{
																							"key": "prop_scheme",
																							"value": "MAF"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": null,
																			"header": [
																				{
																					"key": "content-type",
																					"value": "application/json; charset=utf-8"
																				},
																				{
																					"key": "date",
																					"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																				},
																				{
																					"key": "server",
																					"value": "Kestrel"
																				},
																				{
																					"key": "access-control-allow-origin",
																					"value": "*"
																				},
																				{
																					"key": "transfer-encoding",
																					"value": "chunked"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																		}
																	]
																}
															],
															"id": "1eae583a-e93e-4282-8415-e72c1d3ef1d7"
														}
													],
													"id": "aaa1eb4a-bd7c-4f27-81d3-7d5c327882c1"
												}
											],
											"id": "676b3596-ec3b-44fd-b92f-75bba6476a2f"
										}
									],
									"id": "b124ca72-a311-427b-a7e2-1a702c2563fb"
								}
							],
							"id": "141f4f68-9965-4f68-b100-a81aefd7d14e"
						}
					],
					"id": "8e6a53d5-3911-4cbb-b20e-0b1bba983d4a"
				},
				{
					"name": "Contract Management",
					"item": [
						{
							"name": "overview",
							"item": [
								{
									"name": "Contract quick view",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "mscontract",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d66ecb0c-db87-4c43-b6e0-c1f5f5acf531",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"pm.test(\"Validate required keys in data and their types\", () => {",
																	"    const expectedKeys = [",
																	"        \"assigned_contract\",",
																	"        \"complete_contract\",",
																	"        \"active_contract\",",
																	"        \"qunty_request\",",
																	"        \"supply\",",
																	"        \"meters\"",
																	"    ];",
																	"",
																	"    expectedKeys.forEach(key => {",
																	"        pm.expect(jsonData.data).to.have.property(key);",
																	"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "d880dac2-5ba4-4527-9a13-9d41ec4cac23",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/overview/mscontract/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"overview",
																"mscontract",
																":data"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "DISREP",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"id": "89525235-38e5-4b3e-b36a-712dfc233261",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/overview/mscontract/:data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"overview",
																		"mscontract",
																		":data"
																	],
																	"variable": [
																		{
																			"key": "data"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 35,\n  \"responsecode\": 4043,\n  \"data\": {\n    \"assigned_contract\": 9786,\n    \"complete_contract\": 9058,\n    \"active_contract\": 8363,\n    \"qunty_request\": 5240,\n    \"supply\": 5059,\n    \"meters\": 2878\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"stri\",\n  \"responsStatus\": true,\n  \"totalpage\": 5372,\n  \"currentpage\": 9922\n}"
														}
													]
												}
											],
											"id": "de3935ed-5be6-48a4-b330-6d0f521e8d42",
											"description": "vendor id"
										}
									],
									"id": "860e502d-c474-4096-8344-bb9736f2d0a6"
								}
							],
							"id": "c61f90d1-f0bd-4d28-83cc-3010b9153dbf"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"}",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "9cfd272e-64aa-443a-8708-18bcaf9a7b73",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=DISREP",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "DISREP"
																}
															],
															"variable": [
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "615e9551-5a4a-4115-8031-50dd684af1ab",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "04c864e2-ef40-47b4-8845-4e9a55019456"
										}
									],
									"id": "609b3871-3307-4f88-965d-44bac4d14a68"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of DISREP created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Save Contract ID of first contract",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																			"}",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200); ",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "86e47bd3-e414-4058-b70c-856d76930070",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "MAF",
																			"disabled": true
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "61fa7c39-7806-43a6-bae2-12ff64dacc65",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "ea8aec42-b406-4805-86e9-34dce3c6a194"
												}
											],
											"id": "6098134e-fd33-4434-9bfb-f95010ad9d10"
										}
									],
									"id": "cde0f9bd-963f-4604-ac3e-a23142cc5caa"
								},
								{
									"name": "create contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1ee4db34-a984-4cb7-a386-d29fc29fbac1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"DISREP\",\n    \"contract_id\": \"Lexy-Power\",\n    \"contract_title\": \"Lexy Power\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-05T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 3,\n    \"review_by\": \"lozydisrep@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 2500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "4887f488-fcbb-456d-bdba-7e67f450535f",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create contract - zero quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bce7384c-f164-4ed5-a292-21f76fa9a812",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"DISREP\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 0,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 4500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "e8b060f9-da6b-4b79-a179-654bf32ed01d",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create new contract- No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0227549-98ea-425d-9a5f-e75c625ab8e1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "67362387-bb6b-46ca-8728-a098d54cd240",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"DISREP\",\n    \"contract_id\": \"Sabinus-natus\",\n    \"contract_title\": \"Sabinus natus\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-23T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mbah Power Limited\",\n    \"quantity\": 6,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "92f4c55d-6064-4854-af39-879fb51cfde1",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_supplier\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"role\": \"string\",\n  \"company\": \"string\",\n  \"contract_id\": \"string\",\n  \"quantity\": 7400,\n  \"amount\": 6096.93058254557,\n  \"expected_delivery\": \"2001-08-16T13:19:03.212Z\",\n  \"endate\": \"1978-04-25T09:22:29.179Z\",\n  \"meter_brand\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/newcontractassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "72b44006-0c52-414e-bb25-d8883acf701d"
						},
						{
							"name": "Approve Meter Supplier Contract",
							"item": [
								{
									"name": "approve contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "435402c8-7770-4ae1-8a45-3fed8e3c281d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message contains contract approval info",
													"pm.test(\"Response message indicates contract approved\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"approved\")",
													");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "387b8245-01b6-459f-8814-6543da84fb45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// {\n//     \"amount\": 4965023555325227000,\n//     \"comment\": \"string\",\n//     \"company\": \"string\",\n//     \"constractstatusd_dstatus\": \"string\",\n//     \"contract_id\": \"string\",\n//     \"contract_title\": \"string\",\n//     \"disco\": \"string\",\n//     \"meter_brand\": \"string\",\n//     \"meterphase\": \"string\",\n//     \"prop_scheme\": \"string\",\n//     \"review_by\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"id\": 0,\n//     \"vendorname\": \"string\",\n//     \"quantity\": 5224,\n//     \"batchschedule\": 5388,\n//     \"quantiysupplier\": 3156,\n//     \"qcertified\": 6048,\n//     \"qassigned\": 8228,\n//     \"singleupload\": 193,\n//     \"threeupload\": 20,\n//     \"singlemeter\": 1529,\n//     \"threemeter\": 3735,\n//     \"singlassigned\": 8134,\n//     \"threeassigned\": 5054,\n//     \"approved\": true,\n//     \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n//     \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n//     \"unassignedcomment\": \"string\",\n//     \"approverequired\": false,\n//     \"endate\": \"1978-06-08T17:44:51.733Z\",\n//     \"meterinstalled\": 2885\n// }\n{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/approvecontract"
									},
									"response": [
										{
											"id": "9bd30f67-9999-4423-9b0e-76762618ecf5",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/approvecontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "860da157-1a2f-41b9-a771-87d3291839f1"
						},
						{
							"name": "Unassign Contract",
							"item": [
								{
									"name": "unassign contract",
									"id": "465f4a2e-91f9-4790-b81a-f12f8d06d972",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 21,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 0,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "5b800f05-f64e-472a-a685-3a1b132d6f9d",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "unassign contract without initiating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb31713f-3447-4eea-93ad-fddd20e5fc41",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is false",
													"pm.test(\"responsStatus is false\", () => pm.expect(jsonData.responsStatus).to.be.false);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message indicates contract cannot be unassigned",
													"pm.test(\"Response message indicates unassign requirement\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"can not be unassigned\")",
													");",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "117f5953-bf84-4c56-992a-4e57c1fdaeca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": true,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}\n// {\n//     \"id\": 21,\n//     \"vendor_id\": \"Mita\",\n//     \"vendorname\": \"Mita Soplaya\",\n//     \"contract_id\": \"Croxhair-Electric\",\n//     \"constractstatusd_dstatus\": \"Approved\",\n//     \"contract_title\": \"Croxhair Electric\",\n//     \"meter_brand\": \"Mojec Meter Company Limited\",\n//     \"company\": \"Mita Soplaya\",\n//     \"meterphase\": \"Both Phase\",\n//     \"disco\": \"Abuja Electricity Distribution Company\",\n//     \"quantity\": 0,\n//     \"newassigned\": false,\n//     \"amount\": 4500000,\n//     \"batchschedule\": 0,\n//     \"prop_scheme\": \"MAF\",\n//     \"quantiysupplier\": 0,\n//     \"qcertified\": 0,\n//     \"qassigned\": 0,\n//     \"singleupload\": 0,\n//     \"threeupload\": 0,\n//     \"singlemeter\": 0,\n//     \"threemeter\": 0,\n//     \"singlassigned\": 0,\n//     \"threeassigned\": 0,\n//     \"approved\": false,\n//     \"expected_delivery\": \"2025-09-29T23:00:00\",\n//     \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n//     \"comment\": \"New Contract\",\n//     \"unassignedcomment\": \"\",\n//     \"approverequired\": false,\n//     \"review_by\": \"gilmaf@yopmail.com\",\n//     \"endate\": \"2025-09-03T23:00:00\",\n//     \"meterinstalled\": 0\n// }",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "c2a042ab-67ad-4261-965d-559614bd4180",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "60cc3708-6992-4fbf-a823-0d9455c8a2e3"
						}
					],
					"id": "b8bc763e-0b63-4c9a-a4aa-81653e4cb421"
				},
				{
					"name": "Installation Schedule",
					"item": [
						{
							"name": "DISREP Overview",
							"item": [
								{
									"name": "DISREP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5e824e-594f-49ea-98c8-f89901539b36",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
													"    pm.expect(jsonData).to.have.property(\"totalpage\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"});",
													"",
													"// Validate required keys inside `data`",
													"pm.test(\"Validate keys inside data object\", () => {",
													"    const requiredKeys = [",
													"        \"contract\",",
													"        \"meters\",",
													"        \"assigned\",",
													"        \"assignedmeter\",",
													"        \"pending\",",
													"        \"pendingmeter\"",
													"    ];",
													"",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate types of values inside `data`",
													"pm.test(\"Validate types of values inside data object\", () => {",
													"    pm.expect(jsonData.data.contract).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.meters).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assigned).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assignedmeter).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
													"});",
													"",
													"// Validate values are non-negative",
													"pm.test(\"Validate numeric values are non-negative\", () => {",
													"    Object.values(jsonData.data).forEach(val => {",
													"        pm.expect(val).to.be.at.least(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "44e1cd81-8cdd-4e22-83cf-8e2b69b99311",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/contractquick/DISREP"
									},
									"response": []
								}
							],
							"id": "f8dfef9d-a962-4d1a-8c48-3d21299db0b7"
						},
						{
							"name": "DISREP Installation quick overview",
							"item": [
								{
									"name": "/api/customers/pmiinstquick",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5b3bb87-a96a-4516-afd9-f3de12006f1d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
													"});",
													"",
													"// Validate data object keys and types",
													"pm.test(\"Validate data object keys and types\", () => {",
													"    const expectedKeys = [",
													"        \"totalsche\",",
													"        \"totalschmeter\",",
													"        \"totalscheinstalled\",",
													"        \"totalschmeterinstaller\",",
													"        \"totalschepending\",",
													"        \"totalschmeterpending\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "83e6848c-e158-4c72-96f6-3c9494c6e6c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstquick"
									},
									"response": [
										{
											"id": "fb09ee52-e0da-400c-91e9-abeb0895129b",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2331,\n  \"responsecode\": 80,\n  \"data\": {\n    \"totalsche\": 644,\n    \"totalschmeter\": 772,\n    \"totalscheinstalled\": 125,\n    \"totalschmeterinstaller\": 6749,\n    \"totalschepending\": 5135,\n    \"totalschmeterpending\": 8974\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2007,\n  \"currentpage\": 7879\n}"
										}
									]
								}
							],
							"id": "ad24474d-5c2a-4d70-a61c-7d7a0578d536",
							"description": "This endpoint return quick over for PMI"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"}",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "c9095525-ef20-4f58-85b3-88dfe922d84c",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "6a1cb52a-c3e4-46ff-8655-6f9bd632c7fe",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "5da1e436-3365-468b-adb7-787baf00e0d8",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "9dd73e87-f243-4e00-addc-d8010db13635",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "5e20b4e0-9035-4c91-a844-01e31815cbb2"
										}
									],
									"id": "8640e12b-3a88-4d53-8f38-b7b242b433b6"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of DISREP created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Save Contract ID of first contract",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																			"}",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "ef786cd6-df17-411c-bf25-5bee0df14e48",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{DISREP_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "{{DISREP_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "634cb3a1-8856-4347-a4ba-6d7a0cf436d6",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														},
														{
															"name": "View a contract detail",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "5ab00419-1277-4834-a12a-9f80e217f6f3",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?contract_id={{contract_id}}&prop_scheme={{DISREP_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "{{contract_id}}"
																		},
																		{
																			"key": "fullname",
																			"value": "HKKLL",
																			"type": "text",
																			"disabled": true
																		},
																		{
																			"key": "prop_scheme",
																			"value": "{{DISREP_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "35c97d27-d759-4bb7-8442-d2919de99134",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "c13baa64-f10f-4c57-9635-561c416e1c10"
												}
											],
											"id": "b9673419-dd55-4149-9a8f-93be8745746d"
										}
									],
									"id": "8aa9f488-5fb2-49b9-b97b-56bd815cad5f"
								}
							],
							"id": "0a8db2f6-d884-4a0b-9a2c-a7f554061d90"
						},
						{
							"name": "Get Customer Schedule",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "Get a customer schedule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b8f93da-f03a-4e53-bb02-8c58230b01dd",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate each item in the data array",
																			"pm.test(\"Validate each installation record\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\", \"fullname\", \"customerid\", \"phone_number\", \"emaill_address\", \"location\",",
																			"        \"schedule_id\", \"feeder_name\", \"vendor_id\", \"prop_scheme\", \"dt\", \"meter_number\",",
																			"        \"meter_phase\", \"disco\", \"state\", \"lga\", \"address\", \"installation_status\",",
																			"        \"installer_number\", \"installer_sealnumber\", \"installer\", \"date_assigned\",",
																			"        \"install_date\", \"installer_remark\", \"customer_remark\", \"disco_seal\", \"nemsa_seal\",",
																			"        \"customer_date\", \"commissioned\", \"date_commissioned\", \"date_disco\", \"expected_date\",",
																			"        \"disco_remark\", \"contract_id\", \"supervisor\", \"latitude\", \"longitude\",",
																			"        \"d_latitude\", \"d_longitude\", \"installer_accept_status\", \"date_installer_accepted\",",
																			"        \"date_installer_assigned\", \"scheduledate\", \"installationstatus\", \"installationid\",",
																			"        \"meterengineer\", \"region\", \"csp\", \"tsp\", \"installerarrived\", \"installerarrived_date\",",
																			"        \"installationstarts\", \"installationstarts_date\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach(item => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"        pm.expect(item.location).to.be.a(\"string\");",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"        pm.expect(item.feeder_name).to.be.a(\"string\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.dt).to.be.a(\"string\");",
																			"        pm.expect(item.meter_number).to.be.a(\"string\");",
																			"        pm.expect(item.meter_phase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.state).to.be.a(\"string\");",
																			"        pm.expect(item.lga).to.be.a(\"string\");",
																			"        pm.expect(item.address).to.be.a(\"string\");",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"        pm.expect(item.installer_accept_status).to.be.a(\"boolean\");",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"        pm.expect(item.installerarrived).to.be.a(\"boolean\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "8e544a80-58f4-4892-8a5b-52d5b6bb9020",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit?fullname=Christopher Dauda Paul",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulepmitype",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "testcontract",
																			"disabled": true
																		},
																		{
																			"key": "fullname",
																			"value": "Christopher Dauda Paul"
																		}
																	],
																	"variable": [
																		{
																			"id": "4dbc00d8-1f83-4a09-889f-96e435feae6b",
																			"key": "data",
																			"value": "Scheduled",
																			"description": "(Required) "
																		},
																		{
																			"id": "329d9fe5-0e48-4332-9d9e-15c1a99f4b34",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "92998e96-e1d1-43aa-996c-518dbb2e551a",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "6fae6889-5b6d-4f9d-ad3a-5f14b8ff4a47",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"schedulepmitype",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														},
														{
															"name": "Get customers schedules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b8f93da-f03a-4e53-bb02-8c58230b01dd",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate each item in the data array",
																			"pm.test(\"Validate each installation record\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\", \"fullname\", \"customerid\", \"phone_number\", \"emaill_address\", \"location\",",
																			"        \"schedule_id\", \"feeder_name\", \"vendor_id\", \"prop_scheme\", \"dt\", \"meter_number\",",
																			"        \"meter_phase\", \"disco\", \"state\", \"lga\", \"address\", \"installation_status\",",
																			"        \"installer_number\", \"installer_sealnumber\", \"installer\", \"date_assigned\",",
																			"        \"install_date\", \"installer_remark\", \"customer_remark\", \"disco_seal\", \"nemsa_seal\",",
																			"        \"customer_date\", \"commissioned\", \"date_commissioned\", \"date_disco\", \"expected_date\",",
																			"        \"disco_remark\", \"contract_id\", \"supervisor\", \"latitude\", \"longitude\",",
																			"        \"d_latitude\", \"d_longitude\", \"installer_accept_status\", \"date_installer_accepted\",",
																			"        \"date_installer_assigned\", \"scheduledate\", \"installationstatus\", \"installationid\",",
																			"        \"meterengineer\", \"region\", \"csp\", \"tsp\", \"installerarrived\", \"installerarrived_date\",",
																			"        \"installationstarts\", \"installationstarts_date\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach(item => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"        pm.expect(item.location).to.be.a(\"string\");",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"        pm.expect(item.feeder_name).to.be.a(\"string\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.dt).to.be.a(\"string\");",
																			"        pm.expect(item.meter_number).to.be.a(\"string\");",
																			"        pm.expect(item.meter_phase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.state).to.be.a(\"string\");",
																			"        pm.expect(item.lga).to.be.a(\"string\");",
																			"        pm.expect(item.address).to.be.a(\"string\");",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"        pm.expect(item.installer_accept_status).to.be.a(\"boolean\");",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"        pm.expect(item.installerarrived).to.be.a(\"boolean\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "c86d8079-d947-49d5-8021-6097f407dd74",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulepmitype",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "testcontract",
																			"disabled": true
																		},
																		{
																			"key": "fullname",
																			"value": "Christopher Dauda Paul",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Scheduled",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "6b21c858-7a05-48b5-ab31-4231d4b1bbf5",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"schedulepmitype",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														}
													],
													"id": "63844859-81e5-4c35-a005-07dec70d0700"
												}
											],
											"id": "22a4261a-f908-453f-80a6-a42bc119b4fb"
										}
									],
									"id": "a5b10f4d-7b48-466d-a97c-bb96cbe92d76",
									"description": "Pending\n\nScheduled"
								}
							],
							"id": "5cc9f24c-f926-49ca-86bd-737cf8b7e359",
							"description": "This endpoint return customer record, Meter assigned.\n\nSince Meters are pre-assigned to customers this endpoint may not be needed anymore"
						},
						{
							"name": "Approve Installation for Meter",
							"item": [
								{
									"name": "meterassign",
									"id": "8d6b9f60-68fc-421f-9347-b3ab68451af2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contract_id\": \"Friday_review_contract\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"vendor_id\": \"ErnestKlien\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/customers/Pmimeterassign"
									},
									"response": [
										{
											"id": "283814a1-fbcb-4fb8-ac58-b21b7d9c57fc",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"contract_id\": \"string\",\n  \"disco\": \"string\",\n  \"vendor_id\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/customers/Pmimeterassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "623cf8be-bfdc-421b-b252-f5d6d4d839e3",
							"description": "Use this endpoint for PMI meter assignment.\n\nCheck the request body for a type of data to be posted"
						}
					],
					"id": "c3c23fdd-b46e-476c-aa66-848f843ed822"
				},
				{
					"name": "Installation Monitoring",
					"item": [
						{
							"name": "PMI Installation quick overview",
							"item": [
								{
									"name": "installtion quick overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b924d59c-2b5c-4eeb-919e-a9e2913b66d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "37f52965-3ccf-42b6-bb58-3e105f12592b",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								},
								{
									"name": "installtion quick overview - No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "4a65f837-c65f-492d-88aa-69f23edc44aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "e85b125e-8f7c-4bcc-8dc0-0ffd683e52af",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								}
							],
							"id": "261fcb1d-1984-42f2-a05d-9087e078b60d",
							"description": "Use this endpoint for PMI Installation quick overview"
						},
						{
							"name": "Installation Group Batch",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{status}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "installation group by batch - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "67abeb7e-c5f8-4e7b-bfdf-5c505d816f80",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": null,
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "a28b18c9-42fd-480c-ace2-8568f2125610",
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"id": "52c4300e-c333-4f67-98cb-06472d66a419",
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"id": "d6243fcd-14eb-4dc2-b08f-5ed9fcf6f844",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "26d2152b-c426-4d81-b7fe-7dd7bff64a3b",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "41cf46ec-9825-4fad-a259-3cb06f8eda56",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch ID - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "348c7213-d683-4a8b-9afa-7a6d4837358e",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}&contract_title={{batch}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "{{batch}}"
																				}
																			],
																			"variable": [
																				{
																					"id": "ef4f78d5-9017-49d2-9c08-5c63d0ee59ef",
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"id": "48ee2c06-ddab-49de-9282-c1eb097a89ae",
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"id": "eac44679-9e30-470e-a6de-898ab8482d3b",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "a6db3e32-13d5-426c-8cee-4887f5c5022a",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "1e1b147e-95b3-490a-b9ba-af73d7adad8e",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Approved",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f424d5a9-fed2-4b9f-bd38-73fcc1c3daf8",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "c3c07512-ad5f-41fe-9acf-487fef6445e5",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "55340f8e-88fe-42fc-84ff-c1a959d1ca6d",
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"id": "92ab72ea-898f-4879-adb6-b582b1df05d1",
																					"key": "status",
																					"value": "Approved",
																					"description": "(Required) "
																				},
																				{
																					"id": "f86f884d-9123-4165-8fe6-6ee84b335021",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "37a81568-7501-493d-afd1-9e98400ab27f",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "eb02558a-a814-4e13-b1be-a1bb37874b8e",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Completed",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "d257d45f-ab62-475c-8287-78ddbefdeab7",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "7749e29e-53eb-49ec-806f-b27491036a67",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "75ea7043-2e2f-4107-8d36-dd2be9480c33",
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"id": "1815ce4e-d2ec-46b5-abcf-06f39400d103",
																					"key": "status",
																					"value": "Completed",
																					"description": "(Required) "
																				},
																				{
																					"id": "59380ca2-07da-4ea5-abee-c39f087e846b",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "97a9c1cf-e4b5-459d-b12c-8f43d2554e81",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "eedc6a06-cd22-4ec8-b197-503e8736e89a",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																}
															],
															"id": "b144e8a5-887c-4980-aa60-549efa5f48bd"
														}
													],
													"id": "44183a3a-32f5-404a-a1b5-589ffad10f0d"
												}
											],
											"id": "1998808d-4910-419e-8e01-23f49fb5d4f7",
											"description": "Pending, Ongoing, Completed, Installed"
										}
									],
									"id": "916ecc7c-da93-49d3-8a64-08fb5e274f1a",
									"description": "PMI, DISREP:\n\n\\--Pass the prop_scheme"
								}
							],
							"id": "8971c2b2-0f80-4d8d-9f15-69bf164ed00c",
							"description": "This endpoint return a schedules, grouping them by schedule ID"
						}
					],
					"id": "88b23092-1788-43b5-ab93-511db174e335"
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "User Management",
							"item": [
								{
									"name": "Get Users",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get users",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "3e366551-020b-4385-9f1d-fcf7bd45dde1",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "1693998e-480e-43c2-8278-4f8835dd62cc",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "4f25c6c7-5528-406d-83b4-7dccf32a2be4",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "beaa1a67-9f12-439d-a4d3-24fb81dbdce9",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														},
														{
															"name": "get user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "fb2b25c1-ff39-4a30-a42b-f20cdee535d7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit?username=emediongetuk323",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "2",
																			"disabled": true
																		},
																		{
																			"key": "username",
																			"value": "emediongetuk323",
																			"type": "text"
																		}
																	],
																	"variable": [
																		{
																			"id": "7affbaea-4adf-45c7-b02a-99cf0f429afe",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "72edd86a-5607-44a5-a866-5fc08b11b482",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "241aac50-8dde-4103-9525-7921a50c72df",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														}
													],
													"id": "a73c9488-6bf0-47af-8ccd-8450b8f9a8f2"
												}
											],
											"id": "f514da05-93e2-4483-9230-3666a35d018e"
										}
									],
									"id": "a6fcfed8-6899-40b0-a30e-8189ac0c691c",
									"description": "This endpoint return list of users from the following user group.\n\nPMI\n\nDISREP\n\nNEMSA\n\netc"
								},
								{
									"name": "Get User group",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "bffe7b90-7df6-41db-bd24-61316b3a9ec9",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "7df1b852-414d-4a7a-8473-cb1696987d7e",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "b32d70fe-7efe-4d04-8cd0-b6b35a828984",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "f5e84f34-33fa-4e6c-973e-e12ca30d291e",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "6a1a3536-af55-4cb7-bbcb-9408580b057d"
												}
											],
											"id": "624d9baa-99be-4177-b59e-b07a6bc93dad"
										},
										{
											"name": "create usergroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c89e328-d388-4bf7-8e30-5794995e5235",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate specific response message",
															"pm.test(\"Validate response message is 'Add'\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Add\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "ac22c347-49cb-449e-a458-f63aaa17bab0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroup"
											},
											"response": [
												{
													"id": "3fc9b699-3cf6-4e41-ba4f-a9dcdb7df3b4",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroup"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "5158dd7b-0d9e-4be1-8ceb-2941d3510dea"
								},
								{
									"name": "Get User group Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Save the first usergroup as a collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"usergroup\", jsonData.data[0].usergroup);",
																			"}",
																			"",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "bf607861-1365-4481-936f-2001966aa710",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "fdd7a15f-d8fe-4522-9c3c-8692214ce111",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "c970df9f-1aef-4327-af5d-915012cde090",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "596db46a-eaff-49bd-b229-7d32f9669a62",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "62f01fd9-408b-4ec7-840b-22d611b84733"
												}
											],
											"id": "2fb12462-dff3-4e6d-8745-bc8085395a72"
										}
									],
									"id": "dac5c950-f0cb-440e-9268-bf27fb35580f"
								},
								{
									"name": "Delete User group",
									"item": [
										{
											"name": "delete user group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fafeb9f-4439-4939-b8dd-382f93d736b8",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate responsemessage is not empty and contains 'removed'",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.be.a(\"string\").and.not.empty;",
															"    pm.expect(jsonData.responsemessage).to.include(\"removed\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "06a1aa97-a5f7-413e-9b03-bdf0666d0460",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": {{usergroup-id}},\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroupdelete"
											},
											"response": [
												{
													"id": "7f16883a-60d3-4c4f-b9ad-ef90970ae19f",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroupdelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "2531a7ef-5259-4109-9fd0-45514f659cc4"
								},
								{
									"name": "Get User group role",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "d2c63f1f-4a2d-45d6-aa27-8b87692628c7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "5fd62289-3d4e-4793-bad1-a7b05f801953",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "279ad918-7460-49e7-986d-93b1e93ecd0e",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "50ee3b03-826e-4cd1-be89-52063489c5d9",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "fb04b642-a3e6-4126-8d46-7569e8654b9d"
												}
											],
											"id": "92226006-839e-4749-a11c-bf9999124a94"
										},
										{
											"name": "create usergroup role",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24a9b83f-3c43-40c4-9cbb-df36443912cf",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate that responsemessage is empty",
															"pm.test(\"Validate responsemessage is empty\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "2bd64497-c4b9-456e-9c73-abf79f4d625e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 10,\n  \"usergroup\": \"MAF\",\n  \"role\": \"Admin 3\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouprole"
											},
											"response": [
												{
													"id": "abee161d-e7d7-4b42-b15b-91c06eee8120",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouprole"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "76c9a3a6-f0a8-4e42-9d64-d69f9715f410"
								},
								{
									"name": "Get User group role Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "61de92ab-c356-4086-ad39-2fa1df41afa4",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "9a4d7a2e-5cd7-4d30-b156-5551e0cdad54",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "c826b5b8-6faf-43de-a928-07957fb2985f",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a602cecb-0872-41fd-8193-d9a2d3612d42",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "749a286b-d399-416d-b58b-e6f5fc867290"
												}
											],
											"id": "f3b12e69-8114-429c-8f70-638a01b67bfc"
										}
									],
									"id": "b06c9655-e3fc-446e-aa41-e1bab8e9ebf7"
								},
								{
									"name": "Delete User group roles",
									"item": [
										{
											"name": "delete usergroup role",
											"id": "1a82ec0a-b4b5-401f-8356-1d1ae82ca934",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouproledelete"
											},
											"response": [
												{
													"id": "3498bd66-b9ec-4424-a5ce-a8df72135fc0",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouproledelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "67ae47fc-fe71-469f-9168-2389405837f7"
								},
								{
									"name": "Deactivate User",
									"item": [
										{
											"name": "deactivate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a3f852-8f7c-4072-9914-a3c1b8ae9c50",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "cda7bee3-49bf-4f96-a512-ad7a86f297c9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": true,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "948186c0-89fd-4ae9-987b-5e24fc6a3a78"
								},
								{
									"name": "Activate User",
									"item": [
										{
											"name": "activate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d385da7-bb33-4766-ad65-8cb56ef51f68",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "13cf9532-b9ac-4f2f-9294-5bca614e0ff1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": false,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "8c201e07-fb83-4177-9789-c62b37639557"
								},
								{
									"name": "Invite User",
									"item": [
										{
											"name": "inviteuser",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 200 or 301",
															"pm.test(\"Status code is 200 or 301\", () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate API response code is 200 or 301",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message based on response code",
															"pm.test(\"Validate response message content\", () => {",
															"    if (jsonData.responsecode === 200) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"registered\");",
															"    } else if (jsonData.responsecode === 301) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"email already exist\");",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "55ab6cf8-4b6b-45af-bc6d-3c635b6d2839",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No auth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"// Validate HTTP status code",
															"pm.test(\"Status code is 401\", () => {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "6b604736-f210-43ea-8822-5a4a79b7163d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 400",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Validate top-level error response fields",
															"pm.test(\"Validate top-level error fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"title\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"status\", 400);",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"object\");",
															"    pm.expect(jsonData).to.have.property(\"traceId\").that.is.a(\"string\");",
															"});",
															"",
															"// Validate email validation error",
															"pm.test(\"Validate email error message\", () => {",
															"    pm.expect(jsonData.errors).to.have.property(\"email\").that.is.an(\"array\");",
															"    pm.expect(jsonData.errors.email[0]).to.eql(\"The email field is required.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "b4d8b0e8-d3ae-40f8-a95a-dc5bfc7b9ce5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \" \",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										}
									],
									"id": "fbb6fd38-cdd4-45b5-84a2-6448a1b19325",
									"description": "Use this endpoint to invite user, auth_level must be specify in a way that it can use to retrieve user list based on auth_level assigned."
								},
								{
									"name": "Post User activities",
									"item": [
										{
											"name": "update activity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38a93eff-240e-4c2b-bd54-3a38f075422b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage.toLowerCase()).to.eql(\"activity saved\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "d6c543f2-9417-400a-97c5-44c0689ad26f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
														"disabled": true
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/updateactivity"
											},
											"response": [
												{
													"id": "7391c8f1-593e-4c8b-ace5-0ac6e55e1785",
													"name": "update activity",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "accept",
																"value": "application/json, text/plain, */*"
															},
															{
																"key": "accept-language",
																"value": "en-US,en;q=0.9"
															},
															{
																"key": "authorization",
																"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
																"disabled": true
															},
															{
																"key": "content-type",
																"value": "application/json"
															},
															{
																"key": "origin",
																"value": "https://primes.omniswift.com"
															},
															{
																"key": "priority",
																"value": "u=1, i"
															},
															{
																"key": "referer",
																"value": "https://primes.omniswift.com/"
															},
															{
																"key": "sec-ch-ua",
																"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
															},
															{
																"key": "sec-ch-ua-mobile",
																"value": "?0"
															},
															{
																"key": "sec-ch-ua-platform",
																"value": "\"macOS\""
															},
															{
																"key": "sec-fetch-dest",
																"value": "empty"
															},
															{
																"key": "sec-fetch-mode",
																"value": "cors"
															},
															{
																"key": "sec-fetch-site",
																"value": "cross-site"
															},
															{
																"key": "user-agent",
																"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/operations/updateactivity"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:05:00 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "access-control-allow-origin",
															"value": "*"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": null,\n    \"responsemessage\": \"activity saved\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 0,\n    \"currentpage\": 0\n}"
												}
											]
										}
									],
									"id": "31f77150-f942-41c9-87d9-9ba29dbadd79"
								},
								{
									"name": "User Invited Account",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "/api/users/invitedaccount/:data/:offset/:limit",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f549a7b9-3ab1-42c3-bbcc-639b8c9a3fe0",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "59a4b24b-91f5-4bb6-a25d-b2ac5c473331",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"id": "3c445015-a17b-4bc1-9c7f-192e8481c729",
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"id": "d526737b-aaf5-4d25-955a-ee3c39d19685",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "24bc1943-c736-4426-9554-b3fec2ec6486",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "49efe2aa-549d-4df1-acf2-8fa321bb8026",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "78c30a53-dec2-4902-bdb3-0d199d759af9"
														}
													],
													"id": "1e9de256-88cc-4cd0-a315-d000125b7d5d"
												}
											],
											"id": "beacefc7-5abf-45e3-8089-81042aa50f20"
										}
									],
									"id": "d7970d37-69dd-4315-a893-1aec0f4893e6"
								},
								{
									"name": "Get Invited Users",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "invited accounts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "7235175d-0742-4f16-836c-43f4200f17b9",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "87d79bc5-3788-41cc-a780-4c8b3abfe7d7",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"id": "e9e74e56-bc54-4179-acbd-3d141041c9de",
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"id": "9dad6c55-72be-472c-a480-9a7026202da1",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "3c552958-1231-48ed-8fe4-96665c0d624b",
																					"key": "limit",
																					"value": "100",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "69a7d190-04ef-466c-961c-017835cd97ca",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "26d14ff1-b1b9-4cee-b5b9-917b7dd8b048"
														}
													],
													"id": "c488a2d1-3735-429b-b3e5-a59a95ed4262"
												}
											],
											"id": "7bce4895-b0ed-45cc-bcc2-3472e021bf46",
											"description": "PMI\n\nDISREP\n\n\\--refere to prop_scheme"
										}
									],
									"id": "46c2db1a-a7f5-42f9-a8b3-c958971154ec",
									"description": "This endpoint return list of newly invited user"
								},
								{
									"name": "Send Mail",
									"item": [
										{
											"name": "/sendmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e61c31c-c49d-4114-aad5-d96f55121de9",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate specific message",
															"pm.test(\"Validate verification message\", () => {",
															"    pm.expect(jsonData).to.eql(\"Verification code sent!!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4fa15bcf-9b7f-42f4-95e3-f8f64ef3c1b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/sendmail"
											},
											"response": [
												{
													"id": "45763a92-9872-44dc-bb05-97ceeb053241",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"string\",\n  \"receiver\": \"string\",\n  \"subject\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"responseTime": null,
													"body": ""
												},
												{
													"id": "4b1a6fd6-d904-46d1-9b6a-7eaffa5a09dd",
													"name": "/sendmail",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:18:23 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "\"Verification code sent!!\""
												}
											]
										}
									],
									"id": "01d832aa-4453-48bc-bd4e-143bf1619a85"
								}
							],
							"id": "ec7954b2-d920-49fa-9a2c-cce1289293df"
						},
						{
							"name": "Security",
							"item": [
								{
									"name": "Update Password",
									"item": [
										{
											"name": "update password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70dedc31-a94c-4636-b9b2-14edeb0351f9",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Test that the response message indicates password was changed",
															"pm.test(\"Response message is 'Password Changed'\", function () {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Password Changed\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9b86f3dd-9d72-4f21-81f1-40b136f6600d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "3b5d6c59-3eb6-4953-8bf1-1f3a3f2a145a",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "update password with same password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "a8e2a0ac-3b33-4c4d-ad66-40cb1724bf10",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "05114def-9f35-4243-9be7-30c95b1f9851",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "validate password complexity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Get the request body",
															"let body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
															"let password = body.newpassword;",
															"",
															"if (!password) {",
															"    pm.test(\"Password validation\", function () {",
															"        pm.expect.fail(\"newpassword is missing from payload\");",
															"    });",
															"} else {",
															"    let minLength = password.length >= 8;",
															"    let hasUppercase = /[A-Z]/.test(password);",
															"    let hasLowercase = /[a-z]/.test(password);",
															"    let hasNumber = /[0-9]/.test(password);",
															"    let hasSpecialChar = /[!@#$%^&*(),.?\\\":{}|<>]/.test(password);",
															"",
															"    pm.test(\"Password meets complexity requirements\", function () {",
															"        pm.expect(minLength, \"Minimum 8 characters\").to.be.true;",
															"        pm.expect(hasUppercase, \"Has uppercase\").to.be.true;",
															"        pm.expect(hasLowercase, \"Has lowercase\").to.be.true;",
															"        pm.expect(hasNumber, \"Has number\").to.be.true;",
															"        pm.expect(hasSpecialChar, \"Has special character\").to.be.true;",
															"    });",
															"}",
															"",
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "e429b9e6-b192-403e-93bb-6b3342dc95cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "568cdfd9-f528-49e9-9ea4-28a15d2c10cd",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "a795f1bd-5d73-4930-ac77-bac09b4964c8"
								}
							],
							"id": "54c4c920-b3e0-456d-83bc-7e21545277d1"
						},
						{
							"name": "Audit Log",
							"item": [
								{
									"name": "Get Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1ae6e76d-3413-41c9-96f7-cea57146ccd2",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "9c157396-c24c-4b96-a54f-e0cc7bdc2eba",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "7aa1104c-d4ad-43d0-bc12-f3d17488065a",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "11b055be-4c59-442e-8664-6bca1a57e943",
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "9f49f899-a111-4eb6-a24e-2cf35cdb4dc9",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "ac732ab2-6ead-4b79-a59f-98a8aad8f298"
												}
											],
											"id": "c04e245a-fe27-4bdd-878d-386a02dd5596"
										}
									],
									"id": "a1cf5eb6-34c9-48d8-bdd0-2297a044c0a6"
								},
								{
									"name": "Get User's Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1e8ec071-2804-440b-b801-0aec7b32a4d1",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    const firstLog = jsonData.data[0];",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "1c99047a-890d-4f7d-a201-bb155fa2b59d",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit?id={{log-id}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "{{log-id}}"
																		}
																	],
																	"variable": [
																		{
																			"id": "dc4f0aae-d8e0-4c40-a9bf-3c83bd2ce7b8",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "04cc1dfa-4bd7-4171-8b84-e37c9691fa01",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "293de720-3e38-4f8d-b826-4e323b2f123f",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "741c30bc-3006-4c58-9272-54cdd5fa3e3a"
												}
											],
											"id": "c62c7372-60c1-42f3-b084-6928954bafbe"
										}
									],
									"id": "7791e956-adc1-4113-9f8e-23ae4a62fef2"
								},
								{
									"name": "Post user logs",
									"item": [
										{
											"name": "/logging",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "250b37fc-f2a5-4aa7-b86e-e53954eec282",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "6fd95f26-4d4a-4236-8a95-2185f8dfc0a5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": {{log-id}},\n    \"logdate\": \"2025-09-02T11:20:33.6271878\",\n    \"logtype\": \"Installer\",\n    \"logmessage\": \"Login\",\n    \"logby\": \"Meter Test\",\n    \"logid\": \"b692d281-5ee0-49e0-9fe0-f29ba0f183eb\",\n    \"logevent\": \"User Login\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "945a88f8-5a99-4afc-984f-929113191043",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "9f9d34e8-f053-4ce2-8037-4b6cb5b069f7"
								},
								{
									"name": "Get User Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "79364f44-fe63-4120-9de6-92240b838957",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "1a22918b-3b24-49ea-bb43-7bbd47b7a664",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "95c95939-b408-4a32-a2cb-1aa824d6f199",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "70bf558a-46b9-4554-99f3-8fa790c6f1c6",
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "495f9497-86a4-4318-ac16-3f3c75c39335",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "ceb60ba0-1b51-4bcb-93b4-e0ecdee5275c"
												}
											],
											"id": "6e138599-09e2-4ed5-96cc-1a1655341422"
										}
									],
									"id": "d3a92568-4a74-427f-ae95-f6eb18c5060c"
								},
								{
									"name": "Post Logs",
									"item": [
										{
											"name": "post logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "038f1db6-bde1-4177-8b8f-cf0527156405",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "b5009510-843a-4286-b6ee-1763f5a876a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "c875a214-71b6-48fd-8475-b8676dd89573",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "2240ff80-5e89-4386-87ef-c7878e3b0849"
								}
							],
							"id": "dfefa2a4-0431-469d-8884-105a0c7695a6"
						}
					],
					"id": "5f919949-53e6-493c-a019-b90503c51ac2"
				},
				{
					"name": "Verify User Email",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "verifyallusers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdea7846-474f-41c2-9505-c15338740496",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate response message",
													"pm.test(\"Validate response message\", () => {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Verified\");",
													"});",
													"",
													"// Validate required keys in data object",
													"pm.test(\"Validate keys in data object\", () => {",
													"    const requiredKeys = [",
													"        \"id\",",
													"        \"fullname\",",
													"        \"username\",",
													"        \"roles\",",
													"        \"pagerole\",",
													"        \"disco\",",
													"        \"prop_scheme\",",
													"        \"canwrite\",",
													"        \"auth_level\",",
													"        \"mailgoup\",",
													"        \"inroles\",",
													"        \"lockstatus\",",
													"        \"userpresnt\",",
													"        \"logtime\",",
													"        \"datejoint\",",
													"        \"password\",",
													"        \"passcode\",",
													"        \"codevalid\",",
													"        \"retry\"",
													"    ];",
													"    ",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate data types of important fields",
													"pm.test(\"Validate data types in user object\", () => {",
													"    pm.expect(jsonData.data.id).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.fullname).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.username).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.roles).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.canwrite).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.mailgoup).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.lockstatus).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.userpresnt).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.retry).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.logtime).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.codevalid).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d852c32c-f8ff-4379-be18-76089eee678f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Profiles",
												"verifyalluser",
												":data"
											],
											"variable": [
												{
													"id": "c8e87e8e-0d14-4c9a-b9d6-e3aaec9d5ac7",
													"key": "data",
													"value": "emediongetuk323@gmail.com",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "7dbf867f-92ac-4b17-9241-1b2b54188773",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Profiles",
														"verifyalluser",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "d471496f-f209-4ceb-8a79-6ff6242eea8a",
							"description": "Email Address"
						}
					],
					"id": "d47691f2-77d2-43bb-8922-9aabe15f432c",
					"description": "This endpoint is for verifying of user by email address, User must be registered first.\n\nUpon successful verification, Security code will be sent to the user mailbox"
				},
				{
					"name": "Get Meter Phase",
					"item": [
						{
							"name": "meter phase list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "244e2b65-7f4a-4bb9-b851-7818a44b7af4",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test that the response is an array",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test that the array contains 'Single Phase' and 'Three Phase'",
											"pm.test(\"Array contains expected meter phases\", function () {",
											"    pm.expect(jsonData).to.include(\"Single Phase\");",
											"    pm.expect(jsonData).to.include(\"Three Phase\");",
											"});",
											"",
											"// Test that the array has exactly 2 elements",
											"pm.test(\"Array has 2 elements\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9732b1e2-0c96-4c53-ae5e-1585aa0efc79",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": "{{baseUrl}}/api/operations/meterphase"
							},
							"response": [
								{
									"id": "1d636953-5bcb-4bcb-ae48-fbd69d2f232c",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/operations/meterphase"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n  \"string\",\n  \"string\"\n]"
								}
							]
						}
					],
					"id": "b004e816-4477-49bf-9cee-2b2d163a0c58"
				},
				{
					"name": "Delete Meter Brand",
					"item": [
						{
							"name": "delete brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daa531ed-f292-4984-8d09-eadacc4a30f6",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a('string');",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a('string');",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is true\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "27792e7b-bf71-4167-8f2d-ee4b40e69f1d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/deletebrand"
							},
							"response": [
								{
									"id": "200c52ba-41c3-486b-9414-6f16c5f0ef0f",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/deletebrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "89948c2c-fe20-425e-bda2-80cfdd4427be"
				},
				{
					"name": "Save Meter Brand",
					"item": [
						{
							"name": "save meter brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf7b3d8-6226-4a11-ba22-34d3fd9289c0",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that cc is 2222",
											"pm.test(\"cc is 2222\", function () {",
											"    pm.expect(jsonData.cc).to.eql(2222);",
											"});",
											"",
											"// Test that responsecode is 2883",
											"pm.test(\"responsecode is 2883\", function () {",
											"    pm.expect(jsonData.responsecode).to.eql(2883);",
											"});",
											"",
											"// Test that data.nullable is true",
											"pm.test(\"data.nullable is true\", function () {",
											"    pm.expect(jsonData.data.nullable).to.be.true;",
											"});",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a(\"string\");",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is false\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.false;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "62d94a5a-9a7b-4915-9834-e486339556db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savemeterbrand"
							},
							"response": [
								{
									"id": "4a93a036-bf51-46fa-a4c7-3f9650610192",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savemeterbrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "713a0fe8-392e-496c-a509-9402d0c5f619"
				},
				{
					"name": "Asset Folder",
					"item": [
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74a81c3-cb31-4832-a018-e89709d1334d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Expected list of DISCOs",
													"const expectedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Test that response is an array",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(jsonData)).to.be.true);",
													"",
													"// Test that response has all expected DISCOs",
													"pm.test(\"Response contains all expected DISCOs\", () => {",
													"    expectedDiscos.forEach(disco => {",
													"        pm.expect(jsonData).to.include(disco);",
													"    });",
													"});",
													"",
													"// Test that the length matches",
													"pm.test(\"Response array length matches expected\", () => {",
													"    pm.expect(jsonData.length).to.eql(expectedDiscos.length);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fc11993f-53cc-4520-9003-0189a8c540f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "ade12dcf-0fd7-4e73-9e96-ae581d8ad198",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "8ca81d52-2259-4862-a08c-71292c736698"
						},
						{
							"name": "Get State",
							"item": [
								{
									"name": "get list of states",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "492cb014-b5cb-4d0d-9c44-ce182e4b2124",
												"exec": [
													"// Parse response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response is an array",
													"pm.test(\"Response is an array\", () => {",
													"    pm.expect(Array.isArray(jsonData)).to.be.true;",
													"});",
													"",
													"// Validate each state object structure",
													"jsonData.forEach((stateObj, index) => {",
													"    pm.test(`State object #${index + 1} has required properties`, () => {",
													"        pm.expect(stateObj).to.have.property(\"state\");",
													"        pm.expect(stateObj).to.have.property(\"lgas\");",
													"        pm.expect(stateObj).to.have.property(\"alias\");",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'state' is a non-empty string`, () => {",
													"        pm.expect(stateObj.state).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'lgas' is a non-empty array`, () => {",
													"        pm.expect(stateObj.lgas).to.be.an(\"array\");",
													"        pm.expect(stateObj.lgas.length).to.be.greaterThan(0);",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'alias' is a non-empty string`, () => {",
													"        pm.expect(stateObj.alias).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`LGAs of state #${index + 1} are valid strings`, () => {",
													"        stateObj.lgas.forEach(lga => {",
													"            pm.expect(lga).to.be.a(\"string\").and.not.empty;",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0869f1b5-b532-46f2-865a-14dbb51a7a41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/proassest/getstates"
									},
									"response": [
										{
											"id": "623fc398-1e20-4e6b-8b5c-94d36d1b88ea",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/proassest/getstates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  },\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  }\n]"
										}
									]
								}
							],
							"id": "720659f2-4280-4bf1-9645-14d49862d8cc"
						}
					],
					"id": "1f8f0708-5582-47b8-83fd-f210667d1fe8"
				},
				{
					"name": "Save Meter Supplier",
					"item": [
						{
							"name": "save meter supplier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75663c3c-50c2-49a5-80e8-257af7221b8b",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9c29284e-de0e-4d18-9431-a794b1558768",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savems"
							},
							"response": [
								{
									"id": "c934ba45-9d47-48c5-8d1d-53c7a6466bdf",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savems"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "744437c3-3404-46ff-b64d-a34050358ef1"
				},
				{
					"name": "Get Meter Supplier [Name]",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get ms name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7516d331-23f0-4faa-a64c-b22529e8e39c",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Optionally check that totalpage and currentpage exist",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "053a06f6-c8aa-4dd7-83f3-2948a9d1bf88",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"getmsname",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "20ef6d31-01c8-408d-8068-ddfa65d9db26",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "90fcef96-e518-474d-a15a-2efcbd2be83a",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "c77f50ad-1a4b-4f51-bec9-61a2eec116f6",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getmsname",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 8349,\n  \"responsecode\": 1554,\n  \"data\": [\n    {\n      \"emailaddress\": \"y2a@hBrmvfWFtqBnttKxDMNqLZTifbrTbMjE.znkr\",\n      \"ms_name\": \"string\",\n      \"id\": 1303\n    },\n    {\n      \"emailaddress\": \"GSTs3@MiaUBOabpshp.dbxu\",\n      \"ms_name\": \"string\",\n      \"id\": 3672\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8578,\n  \"currentpage\": 6290\n}"
												}
											]
										}
									],
									"id": "cf1fbc37-32cd-4e6d-8423-adae3bdff665"
								}
							],
							"id": "84e5d002-8266-4062-9488-ff4124e72557"
						}
					],
					"id": "85ced228-fe34-416e-9869-caafbe0d6618"
				},
				{
					"name": "Get Meter Supplier",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get meter suppliers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93d59b3c-72aa-40f2-9a90-747113b52453",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier's id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Test that totalpage and currentpage exist and are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Optional: Test that all suppliers have an email",
															"pm.test(\"All suppliers have an email address\", () => {",
															"    jsonData.data.forEach(supplier => {",
															"        pm.expect(supplier.emailaddress).to.be.a(\"string\").and.not.be.empty;",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "58a472cd-976c-4ce5-b8e9-7e20856abd8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"metersupplier",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "521da81c-bce5-4e1d-b5cd-31ba4c47d56c",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "44e29ffc-6f75-4cd6-a883-0e0ab516ff44",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "e4516a1d-6694-4e00-987b-ec037ab099b3",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
												}
											]
										}
									],
									"id": "98e1c02c-d3cb-439c-a21e-af74a73ef266"
								}
							],
							"id": "01d4ebfa-2127-4775-bade-0140d4641f3c"
						}
					],
					"id": "ae0a0214-5f4a-4525-9b26-08c3bffc354d"
				},
				{
					"name": "Update Meter Supplier",
					"item": [
						{
							"name": "update ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25de1016-c686-4d3d-8ec8-2f844186d849",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
											"",
											"// Test that responsemessage is empty",
											"pm.test(\"responsemessage is empty\", () => pm.expect(jsonData.responsemessage).to.eql(\"\"));",
											"",
											"// Test that totalpage and currentpage are numbers",
											"pm.test(\"totalpage and currentpage are numbers\", () => {",
											"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
											"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "075567d2-4c74-42c7-add6-00de50d5565a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"address\": \"string\",\n//     \"company\": \"string\",\n//     \"company_phone\": \"string\",\n//     \"country\": \"string\",\n//     \"emailaddress\": \"string\",\n//     \"m_brand\": \"string\",\n//     \"m_country\": \"stri\",\n//     \"m_supplier\": \"string\",\n//     \"mailgoup\": true,\n//     \"phone_number\": \"string\",\n//     \"state\": \"string\",\n//     \"zipcode\": \"string\",\n//     \"id\": 103,\n//     \"pri_contact\": \"string\",\n//     \"contact_email\": \"string\",\n//     \"roles\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"firstname\": \"string\",\n//     \"lastname\": \"string\",\n//     \"mcount\": 7471,\n//     \"concount\": 1430,\n//     \"accountstatus\": false,\n//     \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n//     \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n// }\n\n{\n    \"id\": 8,\n    \"m_supplier\": \"Mita Suplaya\",\n    \"m_brand\": \"Mbah Power Limited\",\n    \"company\": \"Ifeoma Tester\",\n    \"m_country\": \"united-kingdom\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"pri_contact\": \"Ifeoma Tester\",\n    \"contact_email\": \"mitams@yopmail.com\",\n    \"company_phone\": \"80123302345\",\n    \"roles\": \"\",\n    \"vendor_id\": \"Mita\",\n    \"mailgoup\": true,\n    \"phone_number\": \"80123302345\",\n    \"country\": \"country1\",\n    \"state\": \"Lagos\",\n    \"address\": \"12, Tazah Street, Lagos\",\n    \"zipcode\": \"40751\",\n    \"firstname\": \"\",\n    \"lastname\": \"\",\n    \"fullname\": \"Meetah Suplaya\",\n    \"mcount\": 0,\n    \"concount\": 1,\n    \"accountstatus\": false,\n    \"datejoin\": \"2025-08-29T17:25:44.0503349\",\n    \"lastlogin\": \"2025-09-02T17:05:33.6108699\",\n    \"contract\": 1\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/update"
							},
							"response": [
								{
									"id": "e78690d1-245d-4372-93cd-0c4a6ae94baa",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address\": \"string\",\n  \"company\": \"string\",\n  \"company_phone\": \"string\",\n  \"country\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_brand\": \"string\",\n  \"m_country\": \"stri\",\n  \"m_supplier\": \"string\",\n  \"mailgoup\": true,\n  \"phone_number\": \"string\",\n  \"state\": \"string\",\n  \"zipcode\": \"string\",\n  \"id\": 103,\n  \"pri_contact\": \"string\",\n  \"contact_email\": \"string\",\n  \"roles\": \"string\",\n  \"vendor_id\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"mcount\": 7471,\n  \"concount\": 1430,\n  \"accountstatus\": false,\n  \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n  \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Metersupplier/update"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "3fd029c9-5773-46c6-b57a-c61b99f0f155"
				},
				{
					"name": "Meter List",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "meter list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "219f526f-1136-40c6-8ea0-1937e470dfa6",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array",
															"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Test that totalpage and currentpage are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Test that each meter object contains required fields",
															"pm.test(\"Each meter has required fields\", () => {",
															"    jsonData.data.forEach(meter => {",
															"        pm.expect(meter).to.have.property(\"id\");",
															"        pm.expect(meter).to.have.property(\"meter_number\");",
															"        pm.expect(meter).to.have.property(\"meter_brand\");",
															"        pm.expect(meter).to.have.property(\"date_supplied\");",
															"        pm.expect(meter).to.have.property(\"meter_phase\");",
															"        pm.expect(meter).to.have.property(\"batch_number\");",
															"        pm.expect(meter).to.have.property(\"vendor_id\");",
															"        pm.expect(meter).to.have.property(\"vendorname\");",
															"        pm.expect(meter).to.have.property(\"disco\");",
															"        pm.expect(meter).to.have.property(\"prop_scheme\");",
															"        pm.expect(meter).to.have.property(\"certified\");",
															"        pm.expect(meter).to.have.property(\"status\");",
															"        pm.expect(meter).to.have.property(\"approvedate\");",
															"    });",
															"});",
															"",
															"// Save the first meter id as a collection variable",
															"if (jsonData.data.length > 0) {",
															"    pm.collectionVariables.set(\"first_meter_id\", jsonData.data[0].id);",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4f1abdd8-fec1-4e4e-8d6d-27b1c0cb4063",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"meterlist",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "266fc85c-9258-4f27-b0ba-542a7bf3b65d",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "bb64b6ff-de2a-4d54-98d4-1bb48bf05c58",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "cd08074c-cafe-4ed0-b2da-204c264472ec",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"meterlist",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
												}
											]
										}
									],
									"id": "a7b0b8c8-4c76-4c13-aea1-ad75fb83f29a"
								}
							],
							"id": "503477df-96c9-452a-9798-dab36f88806d"
						}
					],
					"id": "7e8dd6d1-5bbd-43a8-80b2-1ecbed0385ab",
					"description": "Get Meters"
				},
				{
					"name": "Get user activities",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get activities",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "72a0f9da-6ba0-4fc1-bc50-f7899a809e1e",
																"exec": [
																	"// Parse the response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Test that response code is 200",
																	"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
																	"",
																	"// Test that responsStatus is true",
																	"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
																	"",
																	"// Test that data is an array",
																	"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																	"",
																	"// Test that totalpage and currentpage are numbers",
																	"pm.test(\"totalpage and currentpage are numbers\", () => {",
																	"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
																	"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
																	"});",
																	"",
																	"// Test that each activity object contains required fields",
																	"pm.test(\"Each activity has required fields\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.property(\"id\");",
																	"        pm.expect(item).to.have.property(\"customerid\");",
																	"        pm.expect(item).to.have.property(\"activity\");",
																	"        pm.expect(item).to.have.property(\"party\");",
																	"        pm.expect(item).to.have.property(\"actby\");",
																	"        pm.expect(item).to.have.property(\"staus\"); // note: spelling matches response",
																	"        pm.expect(item).to.have.property(\"readstatus\");",
																	"        pm.expect(item).to.have.property(\"endate\");",
																	"        pm.expect(item).to.have.property(\"dateread\");",
																	"    });",
																	"});",
																	"",
																	"// Save the first activity id as a collection variable",
																	"if (jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"first_activity_id\", jsonData.data[0].id);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "0f012734-0724-42ef-9d37-d9d805813936",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getactivities",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "a300d909-3fbc-44de-8d1d-651aa414e730",
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "39041e89-9387-4006-9fa4-ea57c7b00d5a",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "2430e124-94be-43de-a725-1f64c062cf05",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "0a80843f-0e5e-4405-ae3c-4a2069d21499",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getactivities",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 2697,\n  \"responsecode\": 4041,\n  \"data\": [\n    {\n      \"id\": 547,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": true,\n      \"readstatus\": false,\n      \"endate\": \"1955-09-22T16:03:28.568Z\",\n      \"dateread\": \"1972-02-03T13:37:55.177Z\"\n    },\n    {\n      \"id\": 3475,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": false,\n      \"readstatus\": false,\n      \"endate\": \"2003-06-12T03:38:32.065Z\",\n      \"dateread\": \"2019-11-10T19:25:48.876Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6332,\n  \"currentpage\": 3639\n}"
														}
													]
												}
											],
											"id": "e3f5f043-4365-4d0f-974f-419ba6e2fe73"
										}
									],
									"id": "06a7efcf-899c-4f07-b321-5f68d18a2721"
								}
							],
							"id": "5a888aa6-ec10-41a9-9ba8-39e612635169"
						}
					],
					"id": "5f346dbf-adca-461f-bb6f-a492e12e8a82"
				},
				{
					"name": "Post Users Activities",
					"item": [
						{
							"name": "post activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8583ff53-4633-4e49-9229-c6d0adff944f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f478d5e5-e1fc-4a44-b2da-decbb7bda395",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/postactivity"
							},
							"response": [
								{
									"id": "5b96d02e-5cd0-402b-941d-bc61dbe4706b",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/postactivity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "bc71cf38-fb5e-451c-9c78-846bf66f1189"
				},
				{
					"name": "Get User's Comment",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get coments",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0657aef7-ea3b-4196-ae2a-d615e41a7a80",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate data is empty",
																	"pm.test(\"Validate data is empty\", () => {",
																	"    pm.expect(jsonData.data.length).to.eql(0);",
																	"});",
																	"",
																	"// Validate response message is empty",
																	"pm.test(\"Validate response message is empty\", () => {",
																	"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "96bd7a39-98c5-444a-a4c8-14d093691f69",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getcomments",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "2ca23126-c073-4a85-bc63-999ade5dd5c7",
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "46e57c10-c37a-45b2-bb63-4879bafc1fb6",
																	"key": "offset",
																	"value": "147",
																	"description": "(Required) "
																},
																{
																	"id": "cb07551b-ccdb-48c6-ba62-f003b322162b",
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "e98a67b3-6568-4142-89c4-45fffa004b08",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getcomments",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6197,\n  \"responsecode\": 6995,\n  \"data\": [\n    {\n      \"id\": 9158,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"2005-02-07T20:46:29.356Z\"\n    },\n    {\n      \"id\": 4418,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"1959-05-04T17:56:38.496Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 499,\n  \"currentpage\": 5013\n}"
														}
													]
												}
											],
											"id": "5df5b393-7f74-491b-bac0-2f4e3fbe1700"
										}
									],
									"id": "770633c1-af4e-4943-9321-b66d7f49286a"
								}
							],
							"id": "56aa86ec-fd13-402b-bfe3-45a300f7304a"
						}
					],
					"id": "3605d43e-673c-405b-8710-386251cd1a4d"
				},
				{
					"name": "Notifications",
					"item": [
						{
							"name": "get notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14673d56-ca1a-4d90-a6f7-e79cf4f60234",
										"exec": [
											"// Parse response",
											"const jsonData = pm.response.json();",
											"",
											"// Test status code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test data object exists",
											"pm.test(\"Data object exists\", () => {",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"});",
											"",
											"// Test counters exist and are numbers",
											"[\"total\", \"read\", \"unread\", \"archived\"].forEach(key => {",
											"    pm.test(`${key} exists and is a number`, () => {",
											"        pm.expect(jsonData.data).to.have.property(key);",
											"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
											"    });",
											"});",
											"",
											"// Test all counters are >= 0",
											"pm.test(\"Counters are non-negative\", () => {",
											"    pm.expect(jsonData.data.total).to.be.at.least(0);",
											"    pm.expect(jsonData.data.read).to.be.at.least(0);",
											"    pm.expect(jsonData.data.unread).to.be.at.least(0);",
											"    pm.expect(jsonData.data.archived).to.be.at.least(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "88fbce24-3c21-4d00-9ed1-d6b0ec2ff814",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "origin",
										"value": "https://primes.omniswift.com"
									},
									{
										"key": "priority",
										"value": "u=1, i"
									},
									{
										"key": "referer",
										"value": "https://primes.omniswift.com/"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "cross-site"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
									}
								],
								"url": "{{baseUrl}}/api/operations/notifications/DISREP"
							},
							"response": []
						}
					],
					"id": "fc26e25b-7666-4994-b0bf-ec2cd1bc0b85"
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8159a242-2050-4465-b926-1963e98df6e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7983877f-8024-4320-a7b9-a2cf8f60db40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/authentication/logout"
							},
							"response": [
								{
									"id": "41c6689f-8a09-4c7b-8bcf-57e78f53493d",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/authentication/logout"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "a3160d5f-b71e-46c1-817c-a2f8adf3d22d",
					"description": "Always call this endpoint when user logout from the frontend"
				}
			],
			"id": "51dec969-aaa4-470b-be62-7373a30faf37",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{disrep-token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "942ce59d-456a-4fba-84ee-ad8ffa3f5513",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a69489fe-0cb0-4de0-9fe0-c90bf946fbe0",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PMI",
			"item": [
				{
					"name": "Authorization",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"pm.collectionVariables.set(\"pmi-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "15728045-64fa-4761-854f-4af96869c1b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\": \"emediongetuk323@gmail.com\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "c03ced75-4905-47ee-82e4-46a3b46503d1",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"pm.collectionVariables.set(\"maf-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fc7b64e0-bfdd-400c-9f42-dc0749af86d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"g\",\n    \"password\": \"Tester@123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "e2da8f9e-1f1e-44f4-9248-2c7ab4a2751f",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						},
						{
							"name": "Invalid Authorize password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
										"exec": [
											"const responseData = pm.response.json();",
											"pm.collectionVariables.set(\"maf-token\", responseData[\"accessToken\"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9cc4c0eb-cda4-4a2a-b50e-b9b714a7f57d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"T\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"response": [
								{
									"id": "9d2c913c-63ab-44de-9ad9-f93d854b5c7e",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/authorize"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "b2ddd525-289a-4e9d-a01a-66a8d9665ae4",
					"description": "This endpoint return bearer token, which must be bind to the request for all others request"
				},
				{
					"name": "Verify Security Code",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{passcode}",
									"item": [
										{
											"name": "verifycode",
											"id": "e6e3a6fc-558b-4627-a64c-e440508d3d76",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"authentication",
														"verifycodeuser",
														":data",
														":passcode"
													],
													"variable": [
														{
															"id": "1ef212e5-2b6c-430c-b815-5d1d0487db4a",
															"key": "data",
															"value": "string",
															"description": "(Required) "
														},
														{
															"id": "fbc0fc89-5423-4d6a-94f1-99d0d61296fa",
															"key": "passcode",
															"value": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "db7ee9d0-0076-4e24-8fca-816aa4e9861d",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/authentication/verifycodeuser/:data/:passcode",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"authentication",
																"verifycodeuser",
																":data",
																":passcode"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "passcode"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
												}
											]
										}
									],
									"id": "6d54d28c-8493-4dee-88d2-2fee6dc4d4f4",
									"description": "Security code to be validated"
								}
							],
							"id": "5453cdd8-efa5-43e0-b6c4-ece2788c8370",
							"description": "Email address"
						}
					],
					"id": "f453787b-851e-4a94-864b-6c65c9a3d3a0",
					"description": "Use this endpoint to verify security code for type of users"
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2970e671-729b-4274-a10e-453324738aee",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate response structure and values\", () => {",
											"",
											"    // Top-level checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"responsecode\", 200);",
											"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Data object should exist",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.be.an(\"object\");",
											"  ",
											"});",
											"",
											"pm.test(\"Validate response user dataTypes\", () => {",
											"    pm.expect(jsonData.data).to.have.property(\"fullname\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"username\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data).to.have.property(\"roles\").that.is.a(\"string\");",
											"    pm.expect(jsonData.data.canwrite).to.be.true;",
											"    pm.expect(jsonData.data.lockstatus).to.be.false;",
											"});",
											"",
											"pm.test(\"Validate inroles and roles\", () => {",
											"    pm.expect(jsonData.data.inroles).to.eql(\"MAF\");",
											"    pm.expect(jsonData.data.roles).to.eql(\"Admin\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "527c70ba-fb43-4f4e-a3ab-7b3887e999cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\": \"emediongetuk323@gmail.com\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "c03ea183-9af0-4bcf-9672-fd16a2bbc483",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "32784579-630d-4627-b63d-87940be462f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\": \"emediongetuk323@gmail.com\",\n    \"password\": \"1234xngh\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "b1efd587-d2cb-4c23-8eb5-007f3d1db4c9",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Invalid login username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validate response structure and values\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Common field checks",
											"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
											"    pm.expect(jsonData).to.have.property(\"data\", null);",
											"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
											"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
											"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
											"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
											"",
											"    // Conditional checks",
											"    if (jsonData.responsecode === 200) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
											"    } else if (jsonData.responsecode === 301) {",
											"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
											"    } else {",
											"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
											"    }",
											"",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6db230ed-3ed3-4fdd-ad5b-ab8a91fe0e18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"username\": \"emedio323@gmail.com\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "dfc35b3e-d355-4a88-811a-5c0b8db42529",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						},
						{
							"name": "Empty login Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
										"exec": [
											"pm.test(\"Validation Error Response\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.status).to.eql(400);",
											"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
											"    pm.expect(jsonData.errors).to.be.an(\"object\");",
											"",
											"    if (jsonData.errors.password) {",
											"        pm.expect(jsonData.errors.password).to.include(\"The password field is required.\");",
											"    }",
											"    if (jsonData.errors.username) {",
											"        pm.expect(jsonData.errors.username).to.include(\"The username field is required.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "82408bc1-5614-40c9-bb9d-89bdfc6f0bf1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \" \",\n    \"password\": \" \"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"response": [
								{
									"id": "f6e95f3f-6899-4681-a933-d64eb2fed8b2",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/authentication/userlogin"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
								}
							]
						}
					],
					"id": "53207eeb-efb1-4981-aa9c-f071c0d824b2",
					"description": "Use this endpoint for user login.\n\nThis endpoint return user object upon successful login"
				},
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "PMI Chart",
							"item": [
								{
									"name": "/pmichart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "284ee2f0-e936-42ae-ac84-97d6630f8d81",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response structure and months in data\", () => {",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    const expectedMonths = [",
													"        \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\",",
													"        \"july\", \"aug\", \"sept\", \"oct\", \"nov\", \"dec\"",
													"    ];",
													"",
													"    // Validate keys exist and values are numbers",
													"    expectedMonths.forEach(month => {",
													"        pm.expect(jsonData.data).to.have.property(month);",
													"        pm.expect(jsonData.data[month]).to.be.a(\"number\");",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "510a9080-ba67-481e-ba18-5dcccccd5e22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pmichart?disco=abuja disco&ms=undefined&year=2025",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pmichart"
											],
											"query": [
												{
													"key": "disco",
													"value": "abuja disco",
													"description": "(Required) "
												},
												{
													"key": "ms",
													"value": "undefined",
													"description": "(Required) "
												},
												{
													"key": "year",
													"value": "2025",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "1ec43439-278d-4ee0-b8d4-7b68c9bd304c",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/pmichart?disco=string&ms=string&year=147",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pmichart"
													],
													"query": [
														{
															"description": "(Required) ",
															"key": "disco",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "ms",
															"value": "string"
														},
														{
															"description": "(Required) ",
															"key": "year",
															"value": "147"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 8124,\n  \"responsecode\": 4773,\n  \"data\": {\n    \"jan\": 5476,\n    \"feb\": 9670,\n    \"mar\": 7924,\n    \"apr\": 3517,\n    \"may\": 9818,\n    \"jun\": 9014,\n    \"july\": 6898,\n    \"aug\": 3795,\n    \"sept\": 3071,\n    \"oct\": 2050,\n    \"nov\": 1926,\n    \"dec\": 6078\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3420,\n  \"currentpage\": 7800\n}"
										}
									]
								}
							],
							"id": "c7fd0e53-973c-4632-a0a1-ccdc0f15e27a"
						},
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6ed8808-0f46-4e07-b032-a7ed34c1720b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Allowed list of DISCOs",
													"const allowedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Validate that disco field exists and has allowed values",
													"pm.test(\"Validate disco values against allowed list\", () => {",
													"    // The response is an array, so we check the length and items directly",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"",
													"    jsonData.forEach(item => {",
													"        pm.expect(item).to.be.a('string'); // Validate each item is a string",
													"        pm.expect(allowedDiscos).to.include(item); // Check if the item is in the allowed list",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0eb39cb2-c3d2-43f9-8470-8a3d1f1f0024",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "ac0fb2e6-211d-43d0-848b-7e6b4d547688",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "4b4a023c-b53b-4e53-8c84-38e0ff4aed61"
						}
					],
					"id": "cf619e73-5418-4875-a351-dc53da3c8130"
				},
				{
					"name": "Meter Suppliers",
					"item": [
						{
							"name": "msoverview",
							"item": [
								{
									"name": "ms overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ffe9c67-82b8-4345-a4ed-bfe0255e46a1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"total_supplier\",",
													"        \"country\",",
													"        \"declined\",",
													"        \"approved\",",
													"        \"approved_meter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "027942e8-2cf1-403e-ac94-2225f5515ccd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/overview/msoverview"
									},
									"response": [
										{
											"id": "5826e17d-46d5-4b27-aa97-d43e8de33859",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/overview/msoverview"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2521,\n  \"responsecode\": 698,\n  \"data\": {\n    \"pending\": 985,\n    \"total_supplier\": 7457,\n    \"country\": 1931,\n    \"declined\": 4597,\n    \"approved\": 517,\n    \"approved_meter\": 5100\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8988,\n  \"currentpage\": 8682\n}"
										}
									]
								}
							],
							"id": "ff8f0cfd-6b87-4880-b73a-d1c04fcabb8c"
						},
						{
							"name": "Get Meter Supplier List",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "meter suppliers",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dd0e1d6c-0999-4ce6-a1d9-597a944236f8",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API responsecode",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each data object and their types",
																	"pm.test(\"Validate keys in each supplier object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\", \"m_supplier\", \"m_brand\", \"company\", \"m_country\", \"emailaddress\",",
																	"        \"pri_contact\", \"contact_email\", \"company_phone\", \"roles\", \"vendor_id\",",
																	"        \"mailgoup\", \"phone_number\", \"country\", \"state\", \"address\", \"zipcode\",",
																	"        \"firstname\", \"lastname\", \"mcount\", \"concount\", \"accountstatus\",",
																	"        \"datejoin\", \"lastlogin\", \"contract\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional: check types for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.m_supplier).to.be.a(\"string\");",
																	"        pm.expect(item.m_brand).to.be.a(\"string\");",
																	"        pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																	"        pm.expect(item.accountstatus).to.be.a(\"boolean\");",
																	"        pm.expect(item.mcount).to.be.a(\"number\");",
																	"        pm.expect(item.concount).to.be.a(\"number\");",
																	"        pm.expect(item.contract).to.be.a(\"number\");",
																	"        pm.expect(item.datejoin).to.be.a(\"string\");",
																	"        pm.expect(item.lastlogin).to.be.a(\"string\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "d9d3c58e-c1b4-4caf-bb27-c9d84289337e",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "d90d9009-cd52-4ec8-ad16-f9065d32d2a1",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "2beba9aa-4680-4242-805b-c1590515214e",
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "df677c5f-8ac0-4380-98af-c5ab8c28f397",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"metersupplier",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
														}
													]
												}
											],
											"id": "ce91bbd1-156c-4510-bd75-9d4ec4aaa0ff"
										}
									],
									"id": "b702a7d9-3d8c-4ead-aaf5-b8ad3f8b150b"
								}
							],
							"id": "e0692cd5-18f6-451d-9f3d-9ea4a61eadb6",
							"description": "This endpoint return Meter Supplier List"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "6256da1a-0abc-449a-982a-17fcb151c902",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=MAF",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "MAF",
																	"type": "text"
																}
															],
															"variable": [
																{
																	"id": "87fa5ed3-5752-41e3-8854-44163da7593e",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "203e94c5-9d4c-4079-8243-102d8db6ff99",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "d6dc4f3c-681b-4e7c-8297-d1d7dd9cbced",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "8ded5b04-1c74-4d87-8f9b-4392c5bb0a79"
										}
									],
									"id": "f5046ead-0868-49e8-9f2d-ed2d0e3a57f4"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ce720c72-6b1b-4d8b-a231-dedb029ca6f0",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "98d8b3a8-ec98-4c0e-8244-3fb028a3444a",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "67ad5756-1c3e-4230-9667-147dafa370b1",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "fbe00968-e363-4e5f-b4f0-e03f81cff45a"
												}
											],
											"id": "4ee38119-6f8b-4a9d-8a19-4cd4738e1897"
										},
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "list of MAF created contracts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save Contract ID of first contract",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", function () {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate top-level response fields",
																					"pm.test(\"Validate top-level response fields\", () => {",
																					"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																					"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																					"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																					"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys exist in each contract object",
																					"pm.test(\"Validate keys in each contract object\", () => {",
																					"    const requiredKeys = [",
																					"        \"id\",",
																					"        \"vendor_id\",",
																					"        \"vendorname\",",
																					"        \"contract_id\",",
																					"        \"contract_title\",",
																					"        \"meter_brand\",",
																					"        \"company\",",
																					"        \"meterphase\",",
																					"        \"disco\",",
																					"        \"quantity\",",
																					"        \"amount\",",
																					"        \"prop_scheme\",",
																					"        \"review_by\",",
																					"        \"datecreated\",",
																					"        \"approved\",",
																					"        \"expected_delivery\"",
																					"    ];",
																					"",
																					"    jsonData.data.forEach((item, index) => {",
																					"        requiredKeys.forEach(key => {",
																					"            pm.expect(item).to.have.property(key);",
																					"        });",
																					"",
																					"        // Optional type checks for some important fields",
																					"        pm.expect(item.id).to.be.a(\"number\");",
																					"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																					"        pm.expect(item.vendorname).to.be.a(\"string\");",
																					"        pm.expect(item.contract_id).to.be.a(\"string\");",
																					"        pm.expect(item.contract_title).to.be.a(\"string\");",
																					"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																					"        pm.expect(item.company).to.be.a(\"string\");",
																					"        pm.expect(item.meterphase).to.be.a(\"string\");",
																					"        pm.expect(item.disco).to.be.a(\"string\");",
																					"        pm.expect(item.quantity).to.be.a(\"number\");",
																					"        pm.expect(item.amount).to.be.a(\"number\");",
																					"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"        pm.expect(item.review_by).to.be.a(\"string\");",
																					"        pm.expect(item.datecreated).to.be.a(\"string\");",
																					"        pm.expect(item.approved).to.be.a(\"boolean\");",
																					"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																					"    });",
																					"});",
																					"",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "01e328ee-8725-44c4-bfe3-74ff339e8cab",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "9771deb2-5a06-44de-9a7c-261e124b66f0",
																			"name": "list of created contracts",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "accept",
																						"value": "application/json, text/plain, */*"
																					},
																					{
																						"key": "accept-language",
																						"value": "en-US,en;q=0.9"
																					},
																					{
																						"key": "authorization",
																						"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																					},
																					{
																						"key": "origin",
																						"value": "https://primes.omniswift.com"
																					},
																					{
																						"key": "priority",
																						"value": "u=1, i"
																					},
																					{
																						"key": "referer",
																						"value": "https://primes.omniswift.com/"
																					},
																					{
																						"key": "sec-ch-ua",
																						"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																					},
																					{
																						"key": "sec-ch-ua-mobile",
																						"value": "?0"
																					},
																					{
																						"key": "sec-ch-ua-platform",
																						"value": "\"macOS\""
																					},
																					{
																						"key": "sec-fetch-dest",
																						"value": "empty"
																					},
																					{
																						"key": "sec-fetch-mode",
																						"value": "cors"
																					},
																					{
																						"key": "sec-fetch-site",
																						"value": "cross-site"
																					},
																					{
																						"key": "user-agent",
																						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"operations",
																						"supplystatus",
																						"1",
																						"10"
																					],
																					"query": [
																						{
																							"key": "prop_scheme",
																							"value": "MAF"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": null,
																			"header": [
																				{
																					"key": "content-type",
																					"value": "application/json; charset=utf-8"
																				},
																				{
																					"key": "date",
																					"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																				},
																				{
																					"key": "server",
																					"value": "Kestrel"
																				},
																				{
																					"key": "access-control-allow-origin",
																					"value": "*"
																				},
																				{
																					"key": "transfer-encoding",
																					"value": "chunked"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																		}
																	]
																}
															],
															"id": "a062149f-3f48-4ba1-9c98-a6258a65d6bb"
														}
													],
													"id": "30f3c669-364d-4ddb-9320-b48a0b5a847c"
												}
											],
											"id": "f5f0d184-84a1-4cac-94ff-85f04bdb98d4"
										}
									],
									"id": "36d8b1eb-6b39-4abf-841b-8dbec4dc4a45"
								}
							],
							"id": "f0f91888-413d-4e49-a43f-c6542a4a382c"
						}
					],
					"id": "54ccebec-0fa8-49e6-bea8-95606b597d20"
				},
				{
					"name": "Contract Management",
					"item": [
						{
							"name": "overview",
							"item": [
								{
									"name": "Contract quick view",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "mscontract",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d66ecb0c-db87-4c43-b6e0-c1f5f5acf531",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"pm.test(\"Validate required keys in data and their types\", () => {",
																	"    const expectedKeys = [",
																	"        \"assigned_contract\",",
																	"        \"complete_contract\",",
																	"        \"active_contract\",",
																	"        \"qunty_request\",",
																	"        \"supply\",",
																	"        \"meters\"",
																	"    ];",
																	"",
																	"    expectedKeys.forEach(key => {",
																	"        pm.expect(jsonData.data).to.have.property(key);",
																	"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "50ac3764-ca60-46e0-92b2-2646e59786e9",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/overview/mscontract/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"overview",
																"mscontract",
																":data"
															],
															"variable": [
																{
																	"id": "7d25b369-22b3-4ead-b827-fccae97ef642",
																	"key": "data",
																	"value": "MAF",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"id": "9e364278-ec4c-4db5-9177-bef6eebfcf66",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/overview/mscontract/:data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"overview",
																		"mscontract",
																		":data"
																	],
																	"variable": [
																		{
																			"key": "data"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 35,\n  \"responsecode\": 4043,\n  \"data\": {\n    \"assigned_contract\": 9786,\n    \"complete_contract\": 9058,\n    \"active_contract\": 8363,\n    \"qunty_request\": 5240,\n    \"supply\": 5059,\n    \"meters\": 2878\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"stri\",\n  \"responsStatus\": true,\n  \"totalpage\": 5372,\n  \"currentpage\": 9922\n}"
														}
													]
												}
											],
											"id": "fbdfe559-f51f-4934-bf6b-369909eee9b4",
											"description": "vendor id"
										}
									],
									"id": "33de6992-a683-4ad4-8a60-e58cf8590f4e"
								}
							],
							"id": "9e32c605-7429-4431-85e1-0abef50fd1f0"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "90e83034-ba07-494f-941e-282acd043743",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit?prop_scheme=MAF",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"query": [
																{
																	"key": "prop_scheme",
																	"value": "MAF"
																}
															],
															"variable": [
																{
																	"id": "d9f057cf-db14-4873-9884-9a2b254dcc2f",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "d13da3d0-8420-46bf-92f3-760fe043081a",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "b0347b6d-6d25-4de2-a056-591a77951b63",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "533a9644-af96-4b24-b4c3-db1ca69235cd"
										}
									],
									"id": "e474e56d-8dc9-450e-ab3e-d11f8577bffc"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of MAF created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Save Contract ID of first contract",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																			"}",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200); ",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "3123e56b-e039-4528-8a98-a5bf340c26ae",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "MAF"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "7b7228e6-ca26-4247-ae6c-710bf1f95c40",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "faed5b3c-106e-4d25-8572-93bb8c93a631"
												}
											],
											"id": "e5e6e12a-fcd7-46b1-984d-28133f62afd4"
										}
									],
									"id": "97efed31-3a4f-430c-b2bd-aeb668092f3f"
								},
								{
									"name": "create contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1cba5ca2-0d43-4beb-84d8-ee12523071f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Lex-Electric\",\n    \"contract_title\": \"Lex Electric\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 3,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 4500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "48de9ef2-fee9-4467-9772-7574f922ffbc",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create contract - zero quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cac2f8-938d-4ed8-bd32-e2b3f8ca1766",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "aa1db500-9342-4f96-8999-9f8763679922",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIck3x4e8MK4RZIIyBH0DwnzYa9cDvadBe2dXYGj7PQFUSKjaHvTupsHmp3mOnTggiOCLJoikLIrSBuqIp2nksu04AGhPRRD7Hh1ZdTe7o1pbMhn2wsQPDcl-c-eH95p00Bc44iH6yHtdxVkXJsFJtPE6Slf3rZti-jRcuPfuqPtIf_P94MVcp8BjLvQ9B2MOPgdGJfJ8Y56sfQJQUjWM0cUAQBQhP7fJH8EwkuVVk35-zsZ1DdH7DhlLAsfCxvUBjf7Q2I4CJ9ZlNiYcX71xTFo8-0ecC2WawlyyyXuAYwe1zWzmzExQNOe30qItTkCYw30PQMCQfDsLyPXXefOcydAcVjNblkACo7LK2DqNt8VA3LpeX4nR4R46LCWEbNb3dkt1fLpC1pBXWuXfPkBra4u7PPvzyFjHcRDUQoqJXineG2bCGE3dd6yny-zMRQ9iZZtbknW_iD8Pr9dJvSQRgZ0ILFoA0bvFgLiPoZIwGzucLzRhssvjGHcOzZEfSBJuvcGREuYFGIuxo-3FD55q3FAo4-hO10LX__jUTW7MMHEw"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-29T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"quantity\": 0,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 4500000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "be6cb2a7-815d-40e4-8f6a-11978cc32488",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/supplystatus"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "create new contract- No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0227549-98ea-425d-9a5f-e75c625ab8e1",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Parse stringified data and validate required keys\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    const expectedKeys = [",
													"        \"id\",",
													"        \"vendor_id\",",
													"        \"vendorname\",",
													"        \"contract_id\",",
													"        \"contract_title\",",
													"        \"meter_brand\",",
													"        \"company\",",
													"        \"meterphase\",",
													"        \"disco\",",
													"        \"quantity\",",
													"        \"amount\",",
													"        \"prop_scheme\",",
													"        \"review_by\",",
													"        \"datecreated\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(parsedData).to.have.property(key);",
													"    });",
													"});",
													"",
													"pm.test(\"Validate key types\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"",
													"    pm.expect(parsedData.id).to.be.a(\"number\");",
													"    pm.expect(parsedData.vendor_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.vendorname).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_id).to.be.a(\"string\");",
													"    pm.expect(parsedData.contract_title).to.be.a(\"string\");",
													"    pm.expect(parsedData.meter_brand).to.be.a(\"string\");",
													"    pm.expect(parsedData.company).to.be.a(\"string\");",
													"    pm.expect(parsedData.meterphase).to.be.a(\"string\");",
													"    pm.expect(parsedData.disco).to.be.a(\"string\");",
													"    pm.expect(parsedData.quantity).to.be.a(\"number\");",
													"    pm.expect(parsedData.amount).to.be.a(\"number\");",
													"    pm.expect(parsedData.prop_scheme).to.be.a(\"string\");",
													"    pm.expect(parsedData.review_by).to.be.a(\"string\");",
													"    pm.expect(parsedData.datecreated).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Validate quantity is not zero\", () => {",
													"    const parsedData = JSON.parse(jsonData.data);",
													"    pm.expect(parsedData.quantity).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "08c8e7a9-9999-43fc-94aa-ee881b3d3f9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"m_supplier\": \"Mita Soplaya\",\n    \"company\": \"Mita Soplaya\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"prop_scheme\": \"MAF\",\n    \"contract_id\": \"Sabinus-natus\",\n    \"contract_title\": \"Sabinus natus\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"expected_delivery\": \"2025-09-23T23:00:00.000Z\",\n    \"endate\": \"2025-09-03T23:00:00.000Z\",\n    \"meterphase\": \"Both Phase\",\n    \"meter_brand\": \"Mbah Power Limited\",\n    \"quantity\": 6,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"constractStatusd_dstatus\": \"pending\",\n    \"role\": \"group admin\",\n    \"amount\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/newcontractassign"
									},
									"response": [
										{
											"id": "8f315f27-5184-48db-ab9b-8acf43536a11",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_supplier\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"role\": \"string\",\n  \"company\": \"string\",\n  \"contract_id\": \"string\",\n  \"quantity\": 7400,\n  \"amount\": 6096.93058254557,\n  \"expected_delivery\": \"2001-08-16T13:19:03.212Z\",\n  \"endate\": \"1978-04-25T09:22:29.179Z\",\n  \"meter_brand\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/newcontractassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "cd398660-b93a-465f-bc7a-c712a35d0718"
						},
						{
							"name": "Approve Meter Supplier Contract",
							"item": [
								{
									"name": "approve contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "435402c8-7770-4ae1-8a45-3fed8e3c281d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message contains contract approval info",
													"pm.test(\"Response message indicates contract approved\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"approved\")",
													");",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d4fb68ea-d879-4ef7-8e64-528b282b6010",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "// {\n//     \"amount\": 4965023555325227000,\n//     \"comment\": \"string\",\n//     \"company\": \"string\",\n//     \"constractstatusd_dstatus\": \"string\",\n//     \"contract_id\": \"string\",\n//     \"contract_title\": \"string\",\n//     \"disco\": \"string\",\n//     \"meter_brand\": \"string\",\n//     \"meterphase\": \"string\",\n//     \"prop_scheme\": \"string\",\n//     \"review_by\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"id\": 0,\n//     \"vendorname\": \"string\",\n//     \"quantity\": 5224,\n//     \"batchschedule\": 5388,\n//     \"quantiysupplier\": 3156,\n//     \"qcertified\": 6048,\n//     \"qassigned\": 8228,\n//     \"singleupload\": 193,\n//     \"threeupload\": 20,\n//     \"singlemeter\": 1529,\n//     \"threemeter\": 3735,\n//     \"singlassigned\": 8134,\n//     \"threeassigned\": 5054,\n//     \"approved\": true,\n//     \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n//     \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n//     \"unassignedcomment\": \"string\",\n//     \"approverequired\": false,\n//     \"endate\": \"1978-06-08T17:44:51.733Z\",\n//     \"meterinstalled\": 2885\n// }\n{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/approvecontract"
									},
									"response": [
										{
											"id": "62b5c1ef-9868-49cf-a916-9eb80e731c47",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/approvecontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "81bcc02e-504e-4f86-b2e4-8998a85ec496"
						},
						{
							"name": "Unassign Contract",
							"item": [
								{
									"name": "unassign contract",
									"id": "436c9917-99bc-4de9-a72f-e964bafe74eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 21,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Croxhair-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Croxhair Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 0,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": false,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "8f6b7bc0-3731-41cb-8ab9-2303ddc8bae4",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "unassign contract without initiating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb31713f-3447-4eea-93ad-fddd20e5fc41",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that response code is 200",
													"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Test that responsStatus is false",
													"pm.test(\"responsStatus is false\", () => pm.expect(jsonData.responsStatus).to.be.false);",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
													"",
													"// Test that response message indicates contract cannot be unassigned",
													"pm.test(\"Response message indicates unassign requirement\", () => ",
													"    pm.expect(jsonData.responsemessage).to.include(\"can not be unassigned\")",
													");",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "547d9604-d07e-4ce9-9731-fd35ab42c124",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"vendor_id\": \"Mita\",\n    \"vendorname\": \"Mita Soplaya\",\n    \"contract_id\": \"Lex-Electric\",\n    \"constractstatusd_dstatus\": \"Approved\",\n    \"contract_title\": \"Lex Electric\",\n    \"meter_brand\": \"Mojec Meter Company Limited\",\n    \"company\": \"Mita Soplaya\",\n    \"meterphase\": \"Both Phase\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"quantity\": 3,\n    \"newassigned\": false,\n    \"amount\": 4500000,\n    \"batchschedule\": 0,\n    \"prop_scheme\": \"MAF\",\n    \"quantiysupplier\": 0,\n    \"qcertified\": 0,\n    \"qassigned\": 0,\n    \"singleupload\": 0,\n    \"threeupload\": 0,\n    \"singlemeter\": 0,\n    \"threemeter\": 0,\n    \"singlassigned\": 0,\n    \"threeassigned\": 0,\n    \"approved\": true,\n    \"expected_delivery\": \"2025-09-29T23:00:00\",\n    \"datecreated\": \"2025-09-02T12:31:21.5164133\",\n    \"comment\": \"New Contract\",\n    \"unassignedcomment\": \"\",\n    \"approverequired\": false,\n    \"review_by\": \"gilmaf@yopmail.com\",\n    \"endate\": \"2025-09-03T23:00:00\",\n    \"meterinstalled\": 0\n}\n// {\n//     \"id\": 21,\n//     \"vendor_id\": \"Mita\",\n//     \"vendorname\": \"Mita Soplaya\",\n//     \"contract_id\": \"Croxhair-Electric\",\n//     \"constractstatusd_dstatus\": \"Approved\",\n//     \"contract_title\": \"Croxhair Electric\",\n//     \"meter_brand\": \"Mojec Meter Company Limited\",\n//     \"company\": \"Mita Soplaya\",\n//     \"meterphase\": \"Both Phase\",\n//     \"disco\": \"Abuja Electricity Distribution Company\",\n//     \"quantity\": 0,\n//     \"newassigned\": false,\n//     \"amount\": 4500000,\n//     \"batchschedule\": 0,\n//     \"prop_scheme\": \"MAF\",\n//     \"quantiysupplier\": 0,\n//     \"qcertified\": 0,\n//     \"qassigned\": 0,\n//     \"singleupload\": 0,\n//     \"threeupload\": 0,\n//     \"singlemeter\": 0,\n//     \"threemeter\": 0,\n//     \"singlassigned\": 0,\n//     \"threeassigned\": 0,\n//     \"approved\": false,\n//     \"expected_delivery\": \"2025-09-29T23:00:00\",\n//     \"datecreated\": \"2025-09-02T12:30:58.2706896\",\n//     \"comment\": \"New Contract\",\n//     \"unassignedcomment\": \"\",\n//     \"approverequired\": false,\n//     \"review_by\": \"gilmaf@yopmail.com\",\n//     \"endate\": \"2025-09-03T23:00:00\",\n//     \"meterinstalled\": 0\n// }",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/unassinedcontract"
									},
									"response": [
										{
											"id": "bdbc26d9-c434-4876-9ae3-ff2cf945a3f2",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 4965023555325227000,\n  \"comment\": \"string\",\n  \"company\": \"string\",\n  \"constractstatusd_dstatus\": \"string\",\n  \"contract_id\": \"string\",\n  \"contract_title\": \"string\",\n  \"disco\": \"string\",\n  \"meter_brand\": \"string\",\n  \"meterphase\": \"string\",\n  \"prop_scheme\": \"string\",\n  \"review_by\": \"string\",\n  \"vendor_id\": \"string\",\n  \"id\": 7787,\n  \"vendorname\": \"string\",\n  \"quantity\": 5224,\n  \"batchschedule\": 5388,\n  \"quantiysupplier\": 3156,\n  \"qcertified\": 6048,\n  \"qassigned\": 8228,\n  \"singleupload\": 193,\n  \"threeupload\": 20,\n  \"singlemeter\": 1529,\n  \"threemeter\": 3735,\n  \"singlassigned\": 8134,\n  \"threeassigned\": 5054,\n  \"approved\": true,\n  \"expected_delivery\": \"1970-02-15T11:14:49.237Z\",\n  \"datecreated\": \"1986-10-27T12:25:13.747Z\",\n  \"unassignedcomment\": \"string\",\n  \"approverequired\": false,\n  \"endate\": \"1978-06-08T17:44:51.733Z\",\n  \"meterinstalled\": 2885\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/unassinedcontract"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "e540ebe7-97b0-4ff8-8f05-7e17ed6b6040"
						}
					],
					"id": "b6eaaea6-a281-492c-a41f-c53fd5488dbf"
				},
				{
					"name": "Installation Schedule",
					"item": [
						{
							"name": "MAF Overview",
							"item": [
								{
									"name": "MAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5e824e-594f-49ea-98c8-f89901539b36",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
													"    pm.expect(jsonData).to.have.property(\"totalpage\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"});",
													"",
													"// Validate required keys inside `data`",
													"pm.test(\"Validate keys inside data object\", () => {",
													"    const requiredKeys = [",
													"        \"contract\",",
													"        \"meters\",",
													"        \"assigned\",",
													"        \"assignedmeter\",",
													"        \"pending\",",
													"        \"pendingmeter\"",
													"    ];",
													"",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate types of values inside `data`",
													"pm.test(\"Validate types of values inside data object\", () => {",
													"    pm.expect(jsonData.data.contract).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.meters).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assigned).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.assignedmeter).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
													"});",
													"",
													"// Validate values are non-negative",
													"pm.test(\"Validate numeric values are non-negative\", () => {",
													"    Object.values(jsonData.data).forEach(val => {",
													"        pm.expect(val).to.be.at.least(0);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "44ddcf13-dd41-4fbf-ae35-6feb7a52a6ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/contractquick/MAF"
									},
									"response": []
								}
							],
							"id": "6634bc4c-f7f9-4f5c-89b5-737ed6e6d871"
						},
						{
							"name": "MAF Installation quick overview",
							"item": [
								{
									"name": "/api/customers/pmiinstquick",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5b3bb87-a96a-4516-afd9-f3de12006f1d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");",
													"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
													"});",
													"",
													"// Validate data object keys and types",
													"pm.test(\"Validate data object keys and types\", () => {",
													"    const expectedKeys = [",
													"        \"totalsche\",",
													"        \"totalschmeter\",",
													"        \"totalscheinstalled\",",
													"        \"totalschmeterinstaller\",",
													"        \"totalschepending\",",
													"        \"totalschmeterpending\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "653674b0-5315-4194-bccc-9c64a9b772ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstquick"
									},
									"response": [
										{
											"id": "b5ee0527-f823-4a9c-badf-53218e2c818c",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2331,\n  \"responsecode\": 80,\n  \"data\": {\n    \"totalsche\": 644,\n    \"totalschmeter\": 772,\n    \"totalscheinstalled\": 125,\n    \"totalschmeterinstaller\": 6749,\n    \"totalschepending\": 5135,\n    \"totalschmeterpending\": 8974\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2007,\n  \"currentpage\": 7879\n}"
										}
									]
								}
							],
							"id": "5ecbacba-9c9b-4b4c-aaaf-14265e5982cc",
							"description": "This endpoint return quick over for PMI"
						},
						{
							"name": "Get Contracts",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "View Contract List",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ee9d07aa-e948-44f0-9c17-813bba74a44a",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save Contract ID of first contract",
																	"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"contract_id\", jsonData.data[0].contract_id);",
																	"}",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate top-level response fields",
																	"pm.test(\"Validate top-level response fields\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																	"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																	"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																	"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys exist in each contract object",
																	"pm.test(\"Validate keys in each contract object\", () => {",
																	"    const requiredKeys = [",
																	"        \"id\",",
																	"        \"vendor_id\",",
																	"        \"vendorname\",",
																	"        \"contract_id\",",
																	"        \"contract_title\",",
																	"        \"meter_brand\",",
																	"        \"company\",",
																	"        \"meterphase\",",
																	"        \"disco\",",
																	"        \"quantity\",",
																	"        \"amount\",",
																	"        \"prop_scheme\",",
																	"        \"review_by\",",
																	"        \"datecreated\",",
																	"        \"approved\",",
																	"        \"expected_delivery\"",
																	"    ];",
																	"",
																	"    jsonData.data.forEach((item, index) => {",
																	"        requiredKeys.forEach(key => {",
																	"            pm.expect(item).to.have.property(key);",
																	"        });",
																	"",
																	"        // Optional type checks for some important fields",
																	"        pm.expect(item.id).to.be.a(\"number\");",
																	"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																	"        pm.expect(item.vendorname).to.be.a(\"string\");",
																	"        pm.expect(item.contract_id).to.be.a(\"string\");",
																	"        pm.expect(item.contract_title).to.be.a(\"string\");",
																	"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																	"        pm.expect(item.company).to.be.a(\"string\");",
																	"        pm.expect(item.meterphase).to.be.a(\"string\");",
																	"        pm.expect(item.disco).to.be.a(\"string\");",
																	"        pm.expect(item.quantity).to.be.a(\"number\");",
																	"        pm.expect(item.amount).to.be.a(\"number\");",
																	"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"        pm.expect(item.review_by).to.be.a(\"string\");",
																	"        pm.expect(item.datecreated).to.be.a(\"string\");",
																	"        pm.expect(item.approved).to.be.a(\"boolean\");",
																	"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																	"    });",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "eb55ad44-e4ec-4e4c-9969-a283abc86c19",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"supplystatus",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "464dc43b-0f22-4893-96c6-1da03157bcba",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "89def26c-feb8-45ee-864c-fcf7b20c8b3a",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "e2650236-6cbd-46fe-9540-42d55a6dcb78",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 1259,\n  \"responsecode\": 545,\n  \"data\": [\n    {\n      \"amount\": 3429581371944295000,\n      \"comment\": \"string\",\n      \"company\": \"string\",\n      \"constractstatusd_dstatus\": \"string\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 171,\n      \"vendorname\": \"string\",\n      \"quantity\": 775,\n      \"batchschedule\": 8587,\n      \"quantiysupplier\": 2754,\n      \"qcertified\": 6734,\n      \"qassigned\": 8757,\n      \"singleupload\": 4554,\n      \"threeupload\": 5803,\n      \"singlemeter\": 1830,\n      \"threemeter\": 7200,\n      \"singlassigned\": 6152,\n      \"threeassigned\": 6323,\n      \"approved\": true,\n      \"expected_delivery\": \"2014-07-12T22:50:34.638Z\",\n      \"datecreated\": \"1990-06-30T02:18:36.402Z\",\n      \"unassignedcomment\": \"\",\n      \"approverequired\": true,\n      \"endate\": \"1963-11-18T20:54:09.785Z\",\n      \"meterinstalled\": 6648\n    },\n    {\n      \"amount\": 815978838791995400,\n      \"comment\": \"string\",\n      \"company\": \"stri\",\n      \"constractstatusd_dstatus\": \"st\",\n      \"contract_id\": \"string\",\n      \"contract_title\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"stri\",\n      \"meterphase\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"review_by\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 1053,\n      \"vendorname\": \"string\",\n      \"quantity\": 6047,\n      \"batchschedule\": 3268,\n      \"quantiysupplier\": 8936,\n      \"qcertified\": 7202,\n      \"qassigned\": 5255,\n      \"singleupload\": 685,\n      \"threeupload\": 1357,\n      \"singlemeter\": 8660,\n      \"threemeter\": 2060,\n      \"singlassigned\": 5695,\n      \"threeassigned\": 9822,\n      \"approved\": false,\n      \"expected_delivery\": \"1991-09-27T16:15:36.515Z\",\n      \"datecreated\": \"2014-08-04T11:07:46.773Z\",\n      \"unassignedcomment\": \"string\",\n      \"approverequired\": true,\n      \"endate\": \"1949-04-27T19:44:01.751Z\",\n      \"meterinstalled\": 9497\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4148,\n  \"currentpage\": 5164\n}"
														}
													]
												}
											],
											"id": "17691ce3-61ff-4eb8-84ea-f7e872b8555d"
										}
									],
									"id": "c9b2b7e7-ce76-4033-a304-88e482cf1c38"
								},
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "list of MAF created contracts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "38949b54-9003-4423-b64e-be5646f3dcc0",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "86bc1b14-2054-4f94-9ce6-2d65711e1a9b",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														},
														{
															"name": "View a contract detail",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2f0d57a8-76f6-4f54-a000-9156420f8a56",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys exist in each contract object",
																			"pm.test(\"Validate keys in each contract object\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\",",
																			"        \"vendor_id\",",
																			"        \"vendorname\",",
																			"        \"contract_id\",",
																			"        \"contract_title\",",
																			"        \"meter_brand\",",
																			"        \"company\",",
																			"        \"meterphase\",",
																			"        \"disco\",",
																			"        \"quantity\",",
																			"        \"amount\",",
																			"        \"prop_scheme\",",
																			"        \"review_by\",",
																			"        \"datecreated\",",
																			"        \"approved\",",
																			"        \"expected_delivery\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach((item, index) => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks for some important fields",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.vendorname).to.be.a(\"string\");",
																			"        pm.expect(item.contract_id).to.be.a(\"string\");",
																			"        pm.expect(item.contract_title).to.be.a(\"string\");",
																			"        pm.expect(item.meter_brand).to.be.a(\"string\");",
																			"        pm.expect(item.company).to.be.a(\"string\");",
																			"        pm.expect(item.meterphase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.quantity).to.be.a(\"number\");",
																			"        pm.expect(item.amount).to.be.a(\"number\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.review_by).to.be.a(\"string\");",
																			"        pm.expect(item.datecreated).to.be.a(\"string\");",
																			"        pm.expect(item.approved).to.be.a(\"boolean\");",
																			"        pm.expect(item.expected_delivery).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "259051cc-1668-47e7-bcb0-5aafb0cfc150",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "accept",
																		"value": "application/json, text/plain, */*"
																	},
																	{
																		"key": "accept-language",
																		"value": "en-US,en;q=0.9"
																	},
																	{
																		"key": "authorization",
																		"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																	},
																	{
																		"key": "origin",
																		"value": "https://primes.omniswift.com"
																	},
																	{
																		"key": "priority",
																		"value": "u=1, i"
																	},
																	{
																		"key": "referer",
																		"value": "https://primes.omniswift.com/"
																	},
																	{
																		"key": "sec-ch-ua",
																		"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																	},
																	{
																		"key": "sec-ch-ua-mobile",
																		"value": "?0"
																	},
																	{
																		"key": "sec-ch-ua-platform",
																		"value": "\"macOS\""
																	},
																	{
																		"key": "sec-fetch-dest",
																		"value": "empty"
																	},
																	{
																		"key": "sec-fetch-mode",
																		"value": "cors"
																	},
																	{
																		"key": "sec-fetch-site",
																		"value": "cross-site"
																	},
																	{
																		"key": "user-agent",
																		"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?contract_id={{contract_id}}&prop_scheme={{MAF_Scheme}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"supplystatus",
																		"1",
																		"10"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "{{contract_id}}"
																		},
																		{
																			"key": "prop_scheme",
																			"value": "{{MAF_Scheme}}"
																		},
																		{
																			"key": "fullname",
																			"value": "HKKLL",
																			"type": "text",
																			"disabled": true
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "4d72f4c1-5c37-44a0-8237-af178db60b08",
																	"name": "list of created contracts",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "accept",
																				"value": "application/json, text/plain, */*"
																			},
																			{
																				"key": "accept-language",
																				"value": "en-US,en;q=0.9"
																			},
																			{
																				"key": "authorization",
																				"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLlFIq5uSSyjcx7G23okcD4agj5HnXHkZFMTc0qArR0cXoQIQggUa0kvU5l8snw4E-HdvWu0BjAB97m4ORnmYHP2Xb5jmPxUx-K288rl5aIF2hCvV9x_eI7MPENnIC377yPGnGqrW7sW6J2gQp_gjHUZMfXPuRVr4xpndQdUYPdpPa0HivCRQan5nP4q58p8B7BiMJ-um7DtPOmmmTDgLO470R1kyLm5dO8Rygk0BfPYjxyZ9O4ipWgGkq5R5Wr32-95Omn8dnAoEGsD_lSJk2ZqFM-F5qEnFrCWapfswNyWj0RZuJMHcD8bIdQ_AwSBnrtdEya66VNECQ_jZ_M54wVqD1YQf_w-mlrbWverjegbvzgQgF3eNOWCbKKsQNqkCAmQ8yyTj5uoz7fwhv5q3Oa94w2omYbrTPXj2CBKyV3k5Bw6IG3aW1t4aVBnel_vKFXBeRx2SYgvI9b0jxgmCvmoR8fukY2waT_kX54Hu_GrRBxCH3SjSaNAxr9m5UfJLyFH8GBZ5JnJWuWJolyj07DPt5sjSi4oLyGY8VSNZfF0g"
																			},
																			{
																				"key": "origin",
																				"value": "https://primes.omniswift.com"
																			},
																			{
																				"key": "priority",
																				"value": "u=1, i"
																			},
																			{
																				"key": "referer",
																				"value": "https://primes.omniswift.com/"
																			},
																			{
																				"key": "sec-ch-ua",
																				"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
																			},
																			{
																				"key": "sec-ch-ua-mobile",
																				"value": "?0"
																			},
																			{
																				"key": "sec-ch-ua-platform",
																				"value": "\"macOS\""
																			},
																			{
																				"key": "sec-fetch-dest",
																				"value": "empty"
																			},
																			{
																				"key": "sec-fetch-mode",
																				"value": "cors"
																			},
																			{
																				"key": "sec-fetch-site",
																				"value": "cross-site"
																			},
																			{
																				"key": "user-agent",
																				"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/operations/supplystatus/1/10?prop_scheme=MAF",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"operations",
																				"supplystatus",
																				"1",
																				"10"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "MAF"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": null,
																	"header": [
																		{
																			"key": "content-type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "date",
																			"value": "Tue, 02 Sep 2025 02:11:48 GMT"
																		},
																		{
																			"key": "server",
																			"value": "Kestrel"
																		},
																		{
																			"key": "access-control-allow-origin",
																			"value": "*"
																		},
																		{
																			"key": "transfer-encoding",
																			"value": "chunked"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": [\n        {\n            \"id\": 18,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Sokomashi-Power\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Sokomashi Power\",\n            \"meter_brand\": \"Kayz Consortium Ltd\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 2300,\n            \"newassigned\": false,\n            \"amount\": 45500000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-31T20:44:47.6969255\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-31T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 16,\n            \"vendor_id\": \"Mita\",\n            \"vendorname\": \"Mita Soplaya\",\n            \"contract_id\": \"Strange-Volts\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Strange Volts\",\n            \"meter_brand\": \"Mbah Power Limited\",\n            \"company\": \"Mita Soplaya\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 5,\n            \"qcertified\": 5,\n            \"qassigned\": 3,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 2,\n            \"threemeter\": 3,\n            \"singlassigned\": 0,\n            \"threeassigned\": 3,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-08-29T23:00:00\",\n            \"datecreated\": \"2025-08-29T17:25:44.1447106\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-29T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 12,\n            \"vendor_id\": \"Numquam\",\n            \"vendorname\": \"Numquam molestiae qu\",\n            \"contract_id\": \"Saepe-accusantium-do\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Saepe accusantium do\",\n            \"meter_brand\": \"Emerald Industrial Co. Cfze\",\n            \"company\": \"Numquam molestiae qu\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"EKO Electricity Distribution Company\",\n            \"quantity\": 2000,\n            \"newassigned\": false,\n            \"amount\": 200000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 1632,\n            \"qcertified\": 6000,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-09-25T23:00:00\",\n            \"datecreated\": \"2025-08-28T12:38:57.0854227\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"nustikedro@necub.com\",\n            \"endate\": \"2025-12-19T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 7,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Flow-Spark-01\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Flow Spark 01\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 5,\n            \"newassigned\": false,\n            \"amount\": 6000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 3,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-30T23:00:00\",\n            \"datecreated\": \"2025-08-27T09:59:29.7600016\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-28T23:00:00\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 6,\n            \"vendor_id\": \"Emediong\",\n            \"vendorname\": \"Emediong\",\n            \"contract_id\": \"emed_poo\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Supply and Installation of Meters for AEDC\",\n            \"meter_brand\": \"My Brand\",\n            \"company\": \"Emediong International\",\n            \"meterphase\": \"Single Phase\",\n            \"disco\": \"Abuja Electricity Distribution Company\",\n            \"quantity\": 7400,\n            \"newassigned\": false,\n            \"amount\": 6096.93058254557,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 0,\n            \"qcertified\": 0,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2026-08-16T13:19:03.212\",\n            \"datecreated\": \"2025-08-27T07:30:18.1021934\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"None\",\n            \"endate\": \"2025-09-25T09:22:29.179\",\n            \"meterinstalled\": 0\n        },\n        {\n            \"id\": 3,\n            \"vendor_id\": \"Bankai\",\n            \"vendorname\": \"Bankai Electrics\",\n            \"contract_id\": \"Infinite-Tsukuyomi\",\n            \"constractstatusd_dstatus\": \"Approved\",\n            \"contract_title\": \"Infinite Tsukuyomi\",\n            \"meter_brand\": \"Unistar Hi-Tech System Limited\",\n            \"company\": \"Bankai Electrics\",\n            \"meterphase\": \"Both Phase\",\n            \"disco\": \"Ikeja Electricity Distribution Company\",\n            \"quantity\": 4,\n            \"newassigned\": false,\n            \"amount\": 5000000,\n            \"batchschedule\": 0,\n            \"prop_scheme\": \"MAF\",\n            \"quantiysupplier\": 216,\n            \"qcertified\": 216,\n            \"qassigned\": 0,\n            \"singleupload\": 0,\n            \"threeupload\": 0,\n            \"singlemeter\": 0,\n            \"threemeter\": 0,\n            \"singlassigned\": 0,\n            \"threeassigned\": 0,\n            \"approved\": false,\n            \"expected_delivery\": \"2025-09-29T23:00:00\",\n            \"datecreated\": \"2025-08-26T07:23:43.2573502\",\n            \"comment\": \"New Contract\",\n            \"unassignedcomment\": \"\",\n            \"approverequired\": false,\n            \"review_by\": \"gilmaf@yopmail.com\",\n            \"endate\": \"2025-08-27T23:00:00\",\n            \"meterinstalled\": 0\n        }\n    ],\n    \"responsemessage\": \"\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 6,\n    \"currentpage\": 1\n}"
																}
															]
														}
													],
													"id": "1a818ee4-a424-4f5e-8255-e230727d9b6a"
												}
											],
											"id": "78421480-e862-41f6-83ab-2b002841d527"
										}
									],
									"id": "220c389c-42e5-412e-a4f8-e5709807a122"
								}
							],
							"id": "9ebb1344-c1c6-49cc-81d5-f5908541b802"
						},
						{
							"name": "Get Customer Schedule",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "/api/customers/schedulepmitype/:data/:offset/:limit",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b8f93da-f03a-4e53-bb02-8c58230b01dd",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate top-level response fields",
																			"pm.test(\"Validate top-level response fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
																			"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
																			"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate each item in the data array",
																			"pm.test(\"Validate each installation record\", () => {",
																			"    const requiredKeys = [",
																			"        \"id\", \"fullname\", \"customerid\", \"phone_number\", \"emaill_address\", \"location\",",
																			"        \"schedule_id\", \"feeder_name\", \"vendor_id\", \"prop_scheme\", \"dt\", \"meter_number\",",
																			"        \"meter_phase\", \"disco\", \"state\", \"lga\", \"address\", \"installation_status\",",
																			"        \"installer_number\", \"installer_sealnumber\", \"installer\", \"date_assigned\",",
																			"        \"install_date\", \"installer_remark\", \"customer_remark\", \"disco_seal\", \"nemsa_seal\",",
																			"        \"customer_date\", \"commissioned\", \"date_commissioned\", \"date_disco\", \"expected_date\",",
																			"        \"disco_remark\", \"contract_id\", \"supervisor\", \"latitude\", \"longitude\",",
																			"        \"d_latitude\", \"d_longitude\", \"installer_accept_status\", \"date_installer_accepted\",",
																			"        \"date_installer_assigned\", \"scheduledate\", \"installationstatus\", \"installationid\",",
																			"        \"meterengineer\", \"region\", \"csp\", \"tsp\", \"installerarrived\", \"installerarrived_date\",",
																			"        \"installationstarts\", \"installationstarts_date\"",
																			"    ];",
																			"",
																			"    jsonData.data.forEach(item => {",
																			"        requiredKeys.forEach(key => {",
																			"            pm.expect(item).to.have.property(key);",
																			"        });",
																			"",
																			"        // Optional type checks",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"        pm.expect(item.location).to.be.a(\"string\");",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"        pm.expect(item.feeder_name).to.be.a(\"string\");",
																			"        pm.expect(item.vendor_id).to.be.a(\"string\");",
																			"        pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        pm.expect(item.dt).to.be.a(\"string\");",
																			"        pm.expect(item.meter_number).to.be.a(\"string\");",
																			"        pm.expect(item.meter_phase).to.be.a(\"string\");",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"        pm.expect(item.state).to.be.a(\"string\");",
																			"        pm.expect(item.lga).to.be.a(\"string\");",
																			"        pm.expect(item.address).to.be.a(\"string\");",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"        pm.expect(item.installer_accept_status).to.be.a(\"boolean\");",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"        pm.expect(item.installerarrived).to.be.a(\"boolean\");",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "a05d13c6-9a1f-45c2-b19d-09ef7eae3e71",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit?fullname=Christopher Dauda Paul",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"schedulepmitype",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "contract_id",
																			"value": "testcontract",
																			"disabled": true
																		},
																		{
																			"key": "fullname",
																			"value": "Christopher Dauda Paul"
																		}
																	],
																	"variable": [
																		{
																			"id": "f5c98307-79a9-4379-a909-6b791f334fff",
																			"key": "data",
																			"value": "Scheduled",
																			"description": "(Required) "
																		},
																		{
																			"id": "a095c63f-654a-497e-9cda-b1c9b5d2f312",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "fe430105-dcd9-49fe-b399-704f063d85be",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "ba1c0fc0-eea2-414f-ad12-3c8db5ece0ef",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/schedulepmitype/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"schedulepmitype",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														}
													],
													"id": "d21570b2-1374-41b9-a520-2fa777c471fa"
												}
											],
											"id": "5cc43bc1-6c93-495f-9e17-4797ba0b36ab"
										}
									],
									"id": "56964aed-1f30-4fdd-a458-3c321c19c3a6",
									"description": "Pending\n\nScheduled"
								}
							],
							"id": "2cac6b43-612e-46a5-95e1-26d3e4a556da",
							"description": "This endpoint return customer record, Meter assigned.\n\nSince Meters are pre-assigned to customers this endpoint may not be needed anymore"
						},
						{
							"name": "Approve Installation for Meter",
							"item": [
								{
									"name": "meterassign",
									"id": "6766f920-9e78-4655-bf83-e83e528fb88f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contract_id\": \"Friday_review_contract\",\n    \"disco\": \"Abuja Electricity Distribution Company\",\n    \"vendor_id\": \"ErnestKlien\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/customers/Pmimeterassign"
									},
									"response": [
										{
											"id": "adba9eae-7471-4cce-ad8a-92868e1cbce2",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"contract_id\": \"string\",\n  \"disco\": \"string\",\n  \"vendor_id\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/customers/Pmimeterassign"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "94ed1867-3f1f-40ba-9afe-d8cc181b0f90",
							"description": "Use this endpoint for PMI meter assignment.\n\nCheck the request body for a type of data to be posted"
						}
					],
					"id": "69be1a54-aa55-4ea6-be9d-61383b2f17e9"
				},
				{
					"name": "Installation Monitoring",
					"item": [
						{
							"name": "PMI Installation quick overview",
							"item": [
								{
									"name": "installtion quick overview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "100e67e5-8eb6-42f5-87b9-fc4724962028",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "e31cd3bf-77a0-44c5-8f97-a5534d5fd53e",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								},
								{
									"name": "installtion quick overview - No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6206130-559c-45ee-8055-475f87314a1b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate required keys exist in data",
													"pm.test(\"Validate required keys exist in data and are numbers\", () => {",
													"    const expectedKeys = [",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"installedbatch\",",
													"        \"installedmeter\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e2191d19-31b8-46ff-b87e-2d1b06f62106",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
									},
									"response": [
										{
											"id": "47111c16-4ae2-4b2d-a92b-fc6557e7b2ad",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/customers/pmiinstallmquick"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3249,\n  \"responsecode\": 8044,\n  \"data\": {\n    \"pending\": 7612,\n    \"totalactiveinstaller\": 9065,\n    \"installedbatch\": 9399,\n    \"installedmeter\": 2077\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3458,\n  \"currentpage\": 2870\n}"
										}
									]
								}
							],
							"id": "f275b943-b1d0-4e3c-b5fd-18e31b59fff2",
							"description": "Use this endpoint for PMI Installation quick overview"
						},
						{
							"name": "Installation Group Batch",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{status}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "installation group by batch - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "0add736f-e3ca-481c-9feb-084a7b9b0845",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": null,
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "81f6e107-59ce-4d91-8e81-0b89827835d7",
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"id": "0e42b753-fd2b-48ee-ba25-ed2e0a8a7daf",
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"id": "3307a403-42e1-4f62-9d73-443188e1c912",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "93aa9bbf-303c-45b3-8cfd-bb1da6ea1436",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "d03e5582-8473-40cb-a178-919f6c2b6d77",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch ID - Pending",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "5b407682-ee80-4aa4-b16a-681e3231ef47",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "8190d8bf-e8d2-4e28-815b-a577d4eac484",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}&contract_title={{batch}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "{{batch}}"
																				}
																			],
																			"variable": [
																				{
																					"id": "9df43905-8a1f-4ea7-b9ab-1cbe0353ba60",
																					"key": "data",
																					"value": "{{MAF_Scheme}}",
																					"description": "(Required) "
																				},
																				{
																					"id": "9109c972-883b-482b-904e-5d4b6931f545",
																					"key": "status",
																					"value": "Pending",
																					"description": "(Required) "
																				},
																				{
																					"id": "6d120f00-7c95-4e1a-bef1-89e6e5630d11",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "b14be8bc-e6b2-44e1-abd8-a7cf2c0a27db",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "ad04bad1-8727-4780-b273-17ac1422090d",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Approved",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f424d5a9-fed2-4b9f-bd38-73fcc1c3daf8",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "ae74a3e1-d4ce-4b98-bdac-8c013668a219",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "bea0305c-cb96-4727-a386-cb4d5f74508c",
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"id": "27bb9c81-71b0-4a0c-b610-5d6a1a496d06",
																					"key": "status",
																					"value": "Approved",
																					"description": "(Required) "
																				},
																				{
																					"id": "a5ceb667-da3b-467e-ba9b-a6b7ad9208f7",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "39b74545-74b7-44fb-8f0c-179df5476cc1",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "5df3f7c4-d1cd-461f-a57b-933c7f14930b",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																},
																{
																	"name": "installation group by batch - Completed",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "d257d45f-ab62-475c-8287-78ddbefdeab7",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Save batch of first item",
																					"if (jsonData.data && jsonData.data.length > 0) {",
																					"    pm.collectionVariables.set(\"batch\", jsonData.data[0].batch);",
																					"}",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate required keys in first data object",
																					"pm.test(\"Validate required keys in first data object\", () => {",
																					"    const expectedKeys = [",
																					"        \"scheduleid\",",
																					"        \"scheduleinstalled\",",
																					"        \"lga\",",
																					"        \"status\",",
																					"        \"contract_id\",",
																					"        \"prop_scheme\",",
																					"        \"scheduledate\",",
																					"        \"disco\",",
																					"        \"customer\",",
																					"        \"batch\",",
																					"        \"three\",",
																					"        \"single\",",
																					"        \"supervisor\"",
																					"    ];",
																					"",
																					"    expectedKeys.forEach(key => {",
																					"        pm.expect(jsonData.data[0]).to.have.property(key);",
																					"    });",
																					"});",
																					"",
																					"// Validate key types in first data object",
																					"pm.test(\"Validate key types in first data object\", () => {",
																					"    const item = jsonData.data[0];",
																					"",
																					"    pm.expect(item.status).to.be.a(\"string\");",
																					"    pm.expect(item.contract_id).to.be.a(\"string\");",
																					"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																					"    pm.expect(item.scheduledate).to.be.a(\"string\");",
																					"    pm.expect(item.disco).to.be.a(\"string\");",
																					"    pm.expect(item.customer).to.be.a(\"number\");",
																					"    pm.expect(item.batch).to.be.a(\"string\");",
																					"    pm.expect(item.three).to.be.a(\"number\");",
																					"    pm.expect(item.single).to.be.a(\"number\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "5a317b6b-774c-4b2d-83d7-d4f4daa44b88",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit?prop_scheme={{MAF_Scheme}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationgroupbatch",
																				":data",
																				":status",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "prop_scheme",
																					"value": "{{MAF_Scheme}}"
																				},
																				{
																					"key": "contract_title",
																					"value": "",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"id": "d1d955ed-ed98-429a-bb2f-578dcb62cd97",
																					"key": "data",
																					"value": "MAF",
																					"description": "(Required) "
																				},
																				{
																					"id": "c4b1dff2-cfd4-4b06-9c3b-69e6b6d919c1",
																					"key": "status",
																					"value": "Completed",
																					"description": "(Required) "
																				},
																				{
																					"id": "2e79e916-6b44-4415-bd63-c17c68658b74",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "54ac511e-8a61-4c0b-a9ac-e469fc85d63f",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "e9350554-31ff-4338-bb31-6ad5bfb4dcbb",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/customers/installationgroupbatch/:data/:status/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"customers",
																						"installationgroupbatch",
																						":data",
																						":status",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "status"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 3233,\n  \"responsecode\": 7767,\n  \"data\": [\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1949-10-01T12:15:54.041Z\",\n      \"disco\": \"string\",\n      \"customer\": 6401,\n      \"batch\": \"string\",\n      \"three\": 5927,\n      \"single\": 2882,\n      \"supervisor\": \"string\"\n    },\n    {\n      \"status\": \"string\",\n      \"contract_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"scheduledate\": \"1988-10-10T07:41:27.966Z\",\n      \"disco\": \"string\",\n      \"customer\": 7321,\n      \"batch\": \"string\",\n      \"three\": 9981,\n      \"single\": 19,\n      \"supervisor\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5576,\n  \"currentpage\": 8468\n}"
																		}
																	]
																}
															],
															"id": "c8ee27f1-4950-49a9-b786-8208c922ffb6"
														}
													],
													"id": "19501f8b-25f9-4a95-b1b0-202450090c6a"
												}
											],
											"id": "53172f35-df66-4d59-9a1a-b1bc7fc8d426",
											"description": "Pending, Ongoing, Completed, Installed"
										}
									],
									"id": "4ba4b4a4-3fed-4ab1-b692-3fad979e4d5c",
									"description": "PMI, DISREP:\n\n\\--Pass the prop_scheme"
								}
							],
							"id": "35e03a2b-0875-4a01-9cad-4ec1dc9ff6f9",
							"description": "This endpoint return a schedules, grouping them by schedule ID"
						}
					],
					"id": "b6a04c92-f127-4125-a07f-dc9e98875b9f"
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "User Management",
							"item": [
								{
									"name": "Get Users",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get users",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "4661c047-656e-4d6e-a033-03e1f37777b7",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "9607dab2-9269-40a1-95bf-9a13c569c8d1",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "5836b2ae-18e2-4e09-899c-e257d428608e",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "4eebcb83-3ad0-4012-b06a-c9f27c7a16d0",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														},
														{
															"name": "get user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Save first user's ID as collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																			"}",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate required keys in first user object",
																			"pm.test(\"Validate required keys in first user object\", () => {",
																			"    const expectedKeys = [",
																			"        \"id\",",
																			"        \"fullname\",",
																			"        \"username\",",
																			"        \"roles\",",
																			"        \"pagerole\",",
																			"        \"disco\",",
																			"        \"prop_scheme\",",
																			"        \"canwrite\",",
																			"        \"auth_level\",",
																			"        \"mailgoup\",",
																			"        \"inroles\",",
																			"        \"lockstatus\",",
																			"        \"userpresnt\",",
																			"        \"logtime\",",
																			"        \"datejoint\",",
																			"        \"password\",",
																			"        \"passcode\",",
																			"        \"codevalid\",",
																			"        \"retry\"",
																			"    ];",
																			"",
																			"    expectedKeys.forEach(key => {",
																			"        pm.expect(jsonData.data[0]).to.have.property(key);",
																			"    });",
																			"});",
																			"",
																			"// Validate important field types in first user object",
																			"pm.test(\"Validate key types in first user object\", () => {",
																			"    const item = jsonData.data[0];",
																			"",
																			"    pm.expect(item.id).to.be.a(\"number\");",
																			"    pm.expect(item.fullname).to.be.a(\"string\");",
																			"    pm.expect(item.username).to.be.a(\"string\");",
																			"    pm.expect(item.roles).to.be.a(\"string\");",
																			"    pm.expect(item.pagerole).to.be.a(\"string\");",
																			"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																			"    pm.expect(item.auth_level).to.be.a(\"string\");",
																			"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																			"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																			"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																			"    pm.expect(item.retry).to.be.a(\"number\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "d7598d11-0a28-4281-a0ef-d4b6801b8555",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit?username=emediongetuk323",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "2",
																			"disabled": true
																		},
																		{
																			"key": "username",
																			"value": "emediongetuk323",
																			"type": "text"
																		}
																	],
																	"variable": [
																		{
																			"id": "ac7e6c58-d267-4b76-9f63-5aaa989f37fd",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "21b2f4db-3840-455e-a4ca-594c8fd4a57c",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a5eb25b7-17c9-4ee7-ace6-d8ccfe8103e8",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"getuser",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														}
													],
													"id": "652a43a9-d77e-427d-a3da-a4e42d2d7a7b"
												}
											],
											"id": "cab1974e-2cb6-4311-8ef2-b34c4dedc647"
										}
									],
									"id": "65737704-0b6d-41a2-9662-de2cb674a49f",
									"description": "This endpoint return list of users from the following user group.\n\nPMI\n\nDISREP\n\nNEMSA\n\netc"
								},
								{
									"name": "Get User group",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "d878cee5-18a8-43f0-b30f-d47d1cf7fbe6",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "d914e86b-2e3a-49e8-b25d-516407465a5a",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "815104a1-bc3f-4006-aaeb-519a79693e2b",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "5b63f8a9-e91e-4fe6-babb-0ca4121fcf9b",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "f5594a42-907f-4163-aa77-bc88ef42f67b"
												}
											],
											"id": "4490b44b-59a1-4369-b10d-92053368c22b"
										},
										{
											"name": "create usergroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c89e328-d388-4bf7-8e30-5794995e5235",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate specific response message",
															"pm.test(\"Validate response message is 'Add'\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Add\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "364f16fb-d17d-4485-89ca-a0cef907f057",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroup"
											},
											"response": [
												{
													"id": "2f25c0da-6f4f-498a-9abf-0e3981681b6e",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroup"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "df9c240b-226b-45ff-8e86-f46cb237def2"
								},
								{
									"name": "Get User group Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "usergroups",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "db02df69-0eac-4b8e-a5c4-12e40965277a",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Save the first usergroup as a collection variable",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    pm.collectionVariables.set(\"usergroup\", jsonData.data[0].usergroup);",
																			"}",
																			"",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate each object in data has required keys",
																			"pm.test(\"Validate each usergroup object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types for each item",
																			"pm.test(\"Validate key types in data array\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"        pm.expect(item.usergroup).to.be.a(\"string\");",
																			"    });",
																			"});",
																			"",
																			"// Ensure no id is null or zero",
																			"pm.test(\"Validate no id is null or zero\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"    });",
																			"});",
																			"",
																			"// Ensure usergroup strings are not empty",
																			"pm.test(\"Validate usergroup is not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.usergroup).to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "c4e7a393-1869-4292-bdcf-29067d39c764",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergroup",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "ba6ac1a6-b4ea-47e9-9090-c9458a4248b9",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "726d04aa-ad29-4be9-b293-5aa056de35aa",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a94a987d-1ae2-4729-b56a-2b18506c4ef6",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergroup/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergroup",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 2185,\n  \"responsecode\": 3008,\n  \"data\": [\n    {\n      \"id\": 1143,\n      \"usergroup\": \"string\"\n    },\n    {\n      \"id\": 5691,\n      \"usergroup\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4530,\n  \"currentpage\": 3209\n}"
																}
															]
														}
													],
													"id": "aa588c0a-d476-4e38-bff4-db4a7f4129aa"
												}
											],
											"id": "5331ff5a-2fd7-411c-9dea-018a5a8856ab"
										}
									],
									"id": "6c9f9dd6-30ed-401e-8fb9-711709620a31"
								},
								{
									"name": "Delete User group",
									"item": [
										{
											"name": "delete user group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fafeb9f-4439-4939-b8dd-382f93d736b8",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															"",
															"// Validate responsemessage is not empty and contains 'removed'",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.be.a(\"string\").and.not.empty;",
															"    pm.expect(jsonData.responsemessage).to.include(\"removed\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9b30a0f7-14c0-41a7-8cd7-78dc7023ec10",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": {{usergroup-id}},\n  \"usergroup\": \"{{usergroup}}\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergroupdelete"
											},
											"response": [
												{
													"id": "8d25f99b-0478-4039-8c26-aeb529f926ba",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8646,\n  \"usergroup\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergroupdelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "999a75f3-c665-4355-9123-22642225f8e4"
								},
								{
									"name": "Get User group role",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "206cba47-23c2-4002-8911-a523c6018749",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "d998434a-218b-4660-b651-8f22d7552201",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "d27a0637-5971-443d-bc8e-20394e081d20",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "e33dc5ce-776d-4713-9e83-76d665ee1b8a",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "6920ba8d-8d7a-4cb0-897d-1bc215036a54"
												}
											],
											"id": "f3979f15-b4cc-4b74-acc0-3e64c8fab5bb"
										},
										{
											"name": "create usergroup role",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24a9b83f-3c43-40c4-9cbb-df36443912cf",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// ✅ Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// ✅ Validate response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// ✅ Validate response structure",
															"pm.test(\"Validate response structure\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"});",
															"",
															"// ✅ Validate that responsemessage is empty",
															"pm.test(\"Validate responsemessage is empty\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "06c36062-d9af-4953-bce2-d7466a1dd35b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 10,\n  \"usergroup\": \"MAF\",\n  \"role\": \"Admin 3\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouprole"
											},
											"response": [
												{
													"id": "a16844c9-5ad0-4f9b-8011-c36483397816",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouprole"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "df8c9eaa-1323-42b4-8ee9-0cb2cb5a792b"
								},
								{
									"name": "Get User group role Copy",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get usergroup roles",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate that data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate required keys in each object",
																			"pm.test(\"Validate each user object has required keys\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item).to.have.property(\"id\");",
																			"        pm.expect(item).to.have.property(\"usergroup\");",
																			"        pm.expect(item).to.have.property(\"role\");",
																			"    });",
																			"});",
																			"",
																			"// Validate key types and non-empty values",
																			"pm.test(\"Validate key types and non-empty values\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																			"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			"",
																			"// Optional: Ensure unique IDs",
																			"pm.test(\"Ensure IDs are unique\", () => {",
																			"    const ids = jsonData.data.map(item => item.id);",
																			"    const uniqueIds = new Set(ids);",
																			"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																			"});",
																			"",
																			"// Optional: Check that all roles are valid strings",
																			"pm.test(\"Validate role values are not empty\", () => {",
																			"    jsonData.data.forEach(item => {",
																			"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																			"    });",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "1541344d-ccdc-4f20-a830-a063c02f5454",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "9a4d7a2e-5cd7-4d30-b156-5551e0cdad54",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "c826b5b8-6faf-43de-a928-07957fb2985f",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "772c30e2-d3f7-4596-af3e-a2e7966c05f3",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"usergrouprole",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
																}
															]
														}
													],
													"id": "5c77b8ea-ca3b-4b2c-98c2-9ce8adc064a1"
												}
											],
											"id": "46d9dc57-ee4a-45d5-be87-0ce229402cb3"
										}
									],
									"id": "946a9465-7fbd-4fb6-954f-dd1192b53e54"
								},
								{
									"name": "Delete User group roles",
									"item": [
										{
											"name": "delete usergroup role",
											"id": "3d70bf41-2781-4375-bbb8-9faffe2ad54b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/usergrouproledelete"
											},
											"response": [
												{
													"id": "a039eef4-93eb-4958-ae7c-f9f7f0f2a668",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 5904,\n  \"usergroup\": \"string\",\n  \"role\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/users/usergrouproledelete"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "1d70ca3b-24de-46ec-8026-994cd9c51545"
								},
								{
									"name": "Deactivate User",
									"item": [
										{
											"name": "deactivate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a3f852-8f7c-4072-9914-a3c1b8ae9c50",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "89d65bed-de47-4e63-b267-83ab70ca51fd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": true,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "4c543969-b26b-463f-9a83-b649bf282d6c"
								},
								{
									"name": "Activate User",
									"item": [
										{
											"name": "activate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d385da7-bb33-4766-ad65-8cb56ef51f68",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Status updated\");",
															"});",
															"",
															"// Validate top-level response fields and types",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.null;",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "cf556157-8c2c-49d3-a8c8-6c9f00719905",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgLk9GkKxutcpImRp5ddG1KS3KZSFbV05X2ztED61Ut2COqB2gJ5Wz0_GV6iWnfF5wOauExO5nFsKNblRZwu7Q-oCHy8r7P2YB-Ca-C7RIURtd2KD3WWV9Tfs1CUzEEyw1grK4g3b5mDJL82P1bNr31mXZu4nIx6FQa3kg7GXHLvv5Rcso4vwdGWltSc5B-6yh8fhX8dVYYsBtnW9fVEuV-WTCbYC0bo9Ow43YlwE2wzaez3z5Vgy5dMBIF-YyFL4Hcoj5QSnnG1ts9z5z2uZszA1M4_EGOapNt9ImwdRNYTKq8gF2MliVDc2LFXzI9Pwkfxoy-YvzSmuyBovc_xhBDwKPYtMTQGVg3KhI-vZO-kKEGThoIOkDbdic8vEmbYh7_V81PDrDMoMuQjfGfWOw_D-cColTenn9fyMf3HC18gclI9Q54P5rfJxzA7n855F_NoGC4GZqUkEWrMrUOkGbTnQa91UNVJXFsSV3hQdJ2FQ2BwWd6mY1kL-F75E4XmlEAWOGMrfPMVLFupEc2KcDAa9OeScEDIgWL4dyE6dM4lPg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 2,\n    \"fullname\": \"Emediong\",\n    \"username\": \"emediongetuk323@gmail.com\",\n    \"roles\": \"Super-Admin\",\n    \"pagerole\": \"1\",\n    \"disco\": \"abuja disco\",\n    \"prop_scheme\": \"PMI\",\n    \"canwrite\": true,\n    \"auth_level\": \"PMI-SGDL\",\n    \"mailgoup\": false,\n    \"inroles\": \"PMI\",\n    \"lockstatus\": false,\n    \"userpresnt\": true,\n    \"logtime\": \"2025-09-02T16:00:09.4958593\",\n    \"datejoint\": \"0001-01-01T00:00:00\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"codevalid\": \"2025-09-01T13:22:12.6024546\",\n    \"retry\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/userupdate"
											},
											"response": []
										}
									],
									"id": "819c29a9-3095-43aa-9e9e-befc8a1ecfc5"
								},
								{
									"name": "Invite User",
									"item": [
										{
											"name": "inviteuser",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 200 or 301",
															"pm.test(\"Status code is 200 or 301\", () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate API response code is 200 or 301",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.be.oneOf([200, 301]);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message based on response code",
															"pm.test(\"Validate response message content\", () => {",
															"    if (jsonData.responsecode === 200) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"registered\");",
															"    } else if (jsonData.responsecode === 301) {",
															"        pm.expect(jsonData.responsemessage.toLowerCase()).to.include(\"email already exist\");",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "1015e82b-9a7f-4377-af1f-88a5ce0f7cdd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No auth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"// Validate HTTP status code",
															"pm.test(\"Status code is 401\", () => {",
															"    pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "8a173a5f-b28a-4943-8cfd-84886a3099c1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \"viviendrep@yopmail.com\",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										},
										{
											"name": "inviteuser - No Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aab22dd7-e085-4944-8ebf-2896d6570e8b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code is 400",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Validate top-level error response fields",
															"pm.test(\"Validate top-level error fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"title\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"status\", 400);",
															"    pm.expect(jsonData).to.have.property(\"errors\").that.is.an(\"object\");",
															"    pm.expect(jsonData).to.have.property(\"traceId\").that.is.a(\"string\");",
															"});",
															"",
															"// Validate email validation error",
															"pm.test(\"Validate email error message\", () => {",
															"    pm.expect(jsonData.errors).to.have.property(\"email\").that.is.an(\"array\");",
															"    pm.expect(jsonData.errors.email[0]).to.eql(\"The email field is required.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "59da4fa7-26f7-4d7d-95cb-208d55a3ed6e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fullname\": \"Vivien Ford\",\n    \"email\": \" \",\n    \"roles\": \"Admin\",\n    \"pagerole\": \"1\",\n    \"auth_level\": \"DISREP\",\n    \"disco\": \"\",\n    \"canwrite\": true,\n    \"prop_scheme\": \"DISREP\",\n    \"inrole\": \"DISREP\",\n    \"mailgoup\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/users/inviteuser"
											},
											"response": []
										}
									],
									"id": "10f38305-1e92-4b7e-8111-7a669b451a2d",
									"description": "Use this endpoint to invite user, auth_level must be specify in a way that it can use to retrieve user list based on auth_level assigned."
								},
								{
									"name": "Post User activities",
									"item": [
										{
											"name": "update activity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38a93eff-240e-4c2b-bd54-3a38f075422b",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"data\");",
															"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
															"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
															"});",
															"",
															"// Validate that data is null",
															"pm.test(\"Validate data is null\", () => {",
															"    pm.expect(jsonData.data).to.eql(null);",
															"});",
															"",
															"// Validate response message",
															"pm.test(\"Validate response message\", () => {",
															"    pm.expect(jsonData.responsemessage.toLowerCase()).to.eql(\"activity saved\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "66d16445-aee6-4edd-ad8f-63fc1a018bb0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
														"disabled": true
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/updateactivity"
											},
											"response": [
												{
													"id": "12ecabdf-576a-467b-9518-10f02a631fd2",
													"name": "update activity",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "accept",
																"value": "application/json, text/plain, */*"
															},
															{
																"key": "accept-language",
																"value": "en-US,en;q=0.9"
															},
															{
																"key": "authorization",
																"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
																"disabled": true
															},
															{
																"key": "content-type",
																"value": "application/json"
															},
															{
																"key": "origin",
																"value": "https://primes.omniswift.com"
															},
															{
																"key": "priority",
																"value": "u=1, i"
															},
															{
																"key": "referer",
																"value": "https://primes.omniswift.com/"
															},
															{
																"key": "sec-ch-ua",
																"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
															},
															{
																"key": "sec-ch-ua-mobile",
																"value": "?0"
															},
															{
																"key": "sec-ch-ua-platform",
																"value": "\"macOS\""
															},
															{
																"key": "sec-fetch-dest",
																"value": "empty"
															},
															{
																"key": "sec-fetch-mode",
																"value": "cors"
															},
															{
																"key": "sec-fetch-site",
																"value": "cross-site"
															},
															{
																"key": "user-agent",
																"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/operations/updateactivity"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:05:00 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "access-control-allow-origin",
															"value": "*"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": null,\n    \"responsemessage\": \"activity saved\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 0,\n    \"currentpage\": 0\n}"
												}
											]
										}
									],
									"id": "9ae48ffd-9fcf-4185-b4df-200e9d1a7454"
								},
								{
									"name": "User Invited Account",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "/api/users/invitedaccount/:data/:offset/:limit",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "f549a7b9-3ab1-42c3-bbcc-639b8c9a3fe0",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "6c123a71-6e40-4aa4-8097-21afe39d074f",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"id": "813acc9a-41cb-41eb-96e6-e7a544835b33",
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"id": "1feaacd1-d774-479a-976f-236afcec4466",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "560ddc8a-1e88-4222-9916-708ca5c1d41f",
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "e094a19d-6a64-4565-ad36-51984186a80e",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "27aede73-a04e-4d8e-acc1-7708d4a7dd15"
														}
													],
													"id": "b7be618f-5c3e-482c-aaaf-d24f24cd90d7"
												}
											],
											"id": "685b11d0-077c-430a-aa9a-395ad8d21c6d"
										}
									],
									"id": "6fbcf7f2-c31c-4edc-8c3c-8674ea92a4a9"
								},
								{
									"name": "Get Invited Users",
									"item": [
										{
											"name": "{data}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "invited accounts",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "7235175d-0742-4f16-836c-43f4200f17b9",
																				"exec": [
																					"const jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Status code is 200\", () => {",
																					"    pm.response.to.have.status(200);",
																					"});",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => {",
																					"    pm.expect(jsonData.responsecode).to.eql(200);",
																					"});",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => {",
																					"    pm.expect(jsonData.responsStatus).to.eql(true);",
																					"});",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => {",
																					"    pm.expect(jsonData.data).to.be.an(\"array\");",
																					"});",
																					"",
																					"// Validate data is empty",
																					"pm.test(\"Validate data is empty\", () => {",
																					"    pm.expect(jsonData.data.length).to.eql(0);",
																					"});",
																					"",
																					"// Validate response message is empty",
																					"pm.test(\"Validate response message is empty\", () => {",
																					"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																					"});",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "e212c33d-76b2-470f-a259-e4621df81300",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"id": "69295e51-f36c-4add-bd52-23432d1e6d44",
																					"key": "data",
																					"value": "",
																					"description": "(Required) "
																				},
																				{
																					"id": "9327de57-a61c-48b2-ba36-a253b960a3a9",
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"id": "dea7034a-6e93-47c9-99fa-f2581f535112",
																					"key": "limit",
																					"value": "100",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "284f26ac-1e0f-4887-8557-d1f3d4f43314",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"users",
																						"invitedaccount",
																						":data",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																		}
																	]
																}
															],
															"id": "5cb52783-508d-40e6-982c-33145c346870"
														}
													],
													"id": "f0b43ea1-f749-4ca5-8209-d55524aae072"
												}
											],
											"id": "563a85f8-93ed-4a6a-8c56-77b192b029a0",
											"description": "PMI\n\nDISREP\n\n\\--refere to prop_scheme"
										}
									],
									"id": "ab9f9a90-d1cd-4405-8c61-5565770b66b6",
									"description": "This endpoint return list of newly invited user"
								},
								{
									"name": "Send Mail",
									"item": [
										{
											"name": "/sendmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e61c31c-c49d-4114-aad5-d96f55121de9",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate specific message",
															"pm.test(\"Validate verification message\", () => {",
															"    pm.expect(jsonData).to.eql(\"Verification code sent!!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "bae30d7d-4c7d-42f7-b1e7-615efd926935",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/sendmail"
											},
											"response": [
												{
													"id": "f690eca5-e235-4dfa-9c66-6bf57374c64b",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"string\",\n  \"receiver\": \"string\",\n  \"subject\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"responseTime": null,
													"body": ""
												},
												{
													"id": "58424c1a-f760-4989-b923-e2242685374e",
													"name": "/sendmail",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:18:23 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "\"Verification code sent!!\""
												}
											]
										}
									],
									"id": "4039939b-6660-4848-bdd6-0d58aa083654"
								}
							],
							"id": "6a671df1-4e9d-474b-9f12-793bff7439c9"
						},
						{
							"name": "Security",
							"item": [
								{
									"name": "Update Password",
									"item": [
										{
											"name": "update password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70dedc31-a94c-4636-b9b2-14edeb0351f9",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Test that the response message indicates password was changed",
															"pm.test(\"Response message is 'Password Changed'\", function () {",
															"    pm.expect(jsonData.responsemessage).to.eql(\"Password Changed\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "787b0cca-8635-4a81-aae9-98dc0a60a8b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "3eb52eed-a40c-41be-97dc-a6c698c97b7b",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "update password with same password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															"",
															"// Test that data is null",
															"pm.test(\"Data is null\", function () {",
															"    pm.expect(jsonData.data).to.be.null;",
															"});",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", function () {",
															"    pm.expect(jsonData.responsStatus).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "c75c853f-95c2-4184-a959-b3f300c87f5d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "2f731829-e0fa-48f9-9b53-c14a73c3d4a5",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										},
										{
											"name": "validate password complexity",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
														"exec": [
															"// Get the request body",
															"let body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
															"let password = body.newpassword;",
															"",
															"if (!password) {",
															"    pm.test(\"Password validation\", function () {",
															"        pm.expect.fail(\"newpassword is missing from payload\");",
															"    });",
															"} else {",
															"    let minLength = password.length >= 8;",
															"    let hasUppercase = /[A-Z]/.test(password);",
															"    let hasLowercase = /[a-z]/.test(password);",
															"    let hasNumber = /[0-9]/.test(password);",
															"    let hasSpecialChar = /[!@#$%^&*(),.?\\\":{}|<>]/.test(password);",
															"",
															"    pm.test(\"Password meets complexity requirements\", function () {",
															"        pm.expect(minLength, \"Minimum 8 characters\").to.be.true;",
															"        pm.expect(hasUppercase, \"Has uppercase\").to.be.true;",
															"        pm.expect(hasLowercase, \"Has lowercase\").to.be.true;",
															"        pm.expect(hasNumber, \"Has number\").to.be.true;",
															"        pm.expect(hasSpecialChar, \"Has special character\").to.be.true;",
															"    });",
															"}",
															"",
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 400",
															"pm.test(\"Response code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// Test that the response message indicates password cannot be the same",
															"pm.test(\"Response message indicates cannot change to same password\", function () {",
															"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9324fcf2-4f80-40d3-90ef-2b38bf0a63f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"response": [
												{
													"id": "dcd84526-d988-495b-b0b6-4b0a9d1e6085",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/Profiles/updatepassword"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "517665a7-290d-4d74-9102-dc73bafe7c1f"
								}
							],
							"id": "9eb688b3-5692-4459-a9b9-311519dda096"
						},
						{
							"name": "Audit Log",
							"item": [
								{
									"name": "Get Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1ae6e76d-3413-41c9-96f7-cea57146ccd2",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "6c86e423-b26f-4437-b196-aefd8ef6a6f4",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "28f33b42-f812-4ec2-ab85-3080bbf9d60a",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "5d95cfa3-a340-4733-889d-bf3997dc4f2f",
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "cfd72fa0-9f48-49cb-8da2-ee1d9021713f",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "44f2e36c-0cd1-42db-a440-331e659dfd78"
												}
											],
											"id": "1727aa2d-bfb1-4541-a18c-d3f42017d1b3"
										}
									],
									"id": "be12def6-b44f-4317-a9da-d1823115c4fa"
								},
								{
									"name": "Get User's Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1e8ec071-2804-440b-b801-0aec7b32a4d1",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    const firstLog = jsonData.data[0];",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "16d9dff2-4c3d-4f39-b699-afea28a51495",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit?id={{log-id}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "{{log-id}}"
																		}
																	],
																	"variable": [
																		{
																			"id": "1c11268a-e845-4556-96c2-a84a72b8bb90",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "e2ac954c-b713-45a2-8507-965a35b6c65e",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "0a3c1416-9901-476d-ba28-d834d026d47f",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "7ab9f262-c4f5-47e6-b230-4d13e5b0a890"
												}
											],
											"id": "799f3716-638e-472d-acff-c7cef52444c5"
										}
									],
									"id": "3fcbfa30-af15-47a6-9627-1357dfad863f"
								},
								{
									"name": "Post user logs",
									"item": [
										{
											"name": "/logging",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "250b37fc-f2a5-4aa7-b86e-e53954eec282",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "5d6c62f5-e031-4ce1-a7aa-32b20852b716",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": {{log-id}},\n    \"logdate\": \"2025-09-02T11:20:33.6271878\",\n    \"logtype\": \"Installer\",\n    \"logmessage\": \"Login\",\n    \"logby\": \"Meter Test\",\n    \"logid\": \"b692d281-5ee0-49e0-9fe0-f29ba0f183eb\",\n    \"logevent\": \"User Login\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "f2cde1a4-553d-47ef-bdae-6cd207cd5799",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "ffc26869-821b-405d-8fec-2e0a4d844f33"
								},
								{
									"name": "Get User Logs",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "get activity logs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "79364f44-fe63-4120-9de6-92240b838957",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is not empty",
																			"pm.test(\"Validate data is not empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.be.above(0);",
																			"});",
																			"",
																			"// Validate fields inside each log entry",
																			"pm.test(\"Validate log entry fields\", () => {",
																			"    jsonData.data.forEach((log) => {",
																			"        pm.expect(log).to.have.property(\"id\");",
																			"        pm.expect(log).to.have.property(\"logdate\");",
																			"        pm.expect(log).to.have.property(\"logtype\");",
																			"        pm.expect(log).to.have.property(\"logmessage\");",
																			"        pm.expect(log).to.have.property(\"logby\");",
																			"        pm.expect(log).to.have.property(\"logid\");",
																			"        pm.expect(log).to.have.property(\"logevent\");",
																			"    });",
																			"});",
																			"",
																			"// Declare and initialize firstLog variable",
																			"const firstLog = jsonData.data[0];",
																			"",
																			"// Validate first log has expected structure",
																			"pm.test(\"Validate first log entry structure\", () => {",
																			"    pm.expect(firstLog.logmessage).to.eql(\"Login\");",
																			"    pm.expect(firstLog.logevent).to.eql(\"User Login\");",
																			"});",
																			"",
																			"// Save the first ID as a collection variable",
																			"pm.collectionVariables.set(\"logId\", firstLog.id);",
																			"",
																			"// Ensure data array exists and has at least one item",
																			"if (jsonData.data && jsonData.data.length > 0) {",
																			"    // Save the first id as a collection variable",
																			"    pm.collectionVariables.set(\"log-id\", firstLog.id);",
																			"}",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination fields\", () => {",
																			"    pm.expect(jsonData).to.have.property(\"totalpage\");",
																			"    pm.expect(jsonData).to.have.property(\"currentpage\");",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "b1d07190-abab-4095-a319-c0e8c3591253",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"getapplogs",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "f68f375d-f875-4d42-849f-345956b48326",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "9a80eb6a-327b-4ccb-883b-4ef0c2ff1b9a",
																			"key": "limit",
																			"value": "147",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a885ac56-407b-49ec-ae62-aeee3f918a1b",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"getapplogs",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
																}
															]
														}
													],
													"id": "a15a1725-a3ee-4780-acea-78e27d12591f"
												}
											],
											"id": "e1af4534-ce3b-4589-836c-ef71089840d8"
										}
									],
									"id": "db4191f0-cf3a-4c04-a84e-0cc199081008"
								},
								{
									"name": "Post Logs",
									"item": [
										{
											"name": "post logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "038f1db6-bde1-4177-8b8f-cf0527156405",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "098dbcaa-6a1a-4455-8cdd-ffffd568a96e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/loging"
											},
											"response": [
												{
													"id": "60603972-e58a-447a-84d1-f5c5a2c3b877",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": 8975,\n  \"logdate\": \"1986-10-07T05:48:20.842Z\",\n  \"logtype\": \"string\",\n  \"logmessage\": \"string\",\n  \"logby\": \"string\",\n  \"logid\": \"string\",\n  \"logevent\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/loging"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
												}
											]
										}
									],
									"id": "4b5636f2-e227-4dae-a5a5-7aef78d28744"
								}
							],
							"id": "d427e555-9e76-447e-89ee-b525155ccb1e"
						}
					],
					"id": "48065bc2-d33f-4293-93d4-5c7493fb57bd"
				},
				{
					"name": "Verify User Email",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "verifyallusers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdea7846-474f-41c2-9505-c15338740496",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate response message",
													"pm.test(\"Validate response message\", () => {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Verified\");",
													"});",
													"",
													"// Validate required keys in data object",
													"pm.test(\"Validate keys in data object\", () => {",
													"    const requiredKeys = [",
													"        \"id\",",
													"        \"fullname\",",
													"        \"username\",",
													"        \"roles\",",
													"        \"pagerole\",",
													"        \"disco\",",
													"        \"prop_scheme\",",
													"        \"canwrite\",",
													"        \"auth_level\",",
													"        \"mailgoup\",",
													"        \"inroles\",",
													"        \"lockstatus\",",
													"        \"userpresnt\",",
													"        \"logtime\",",
													"        \"datejoint\",",
													"        \"password\",",
													"        \"passcode\",",
													"        \"codevalid\",",
													"        \"retry\"",
													"    ];",
													"    ",
													"    requiredKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"    });",
													"});",
													"",
													"// Validate data types of important fields",
													"pm.test(\"Validate data types in user object\", () => {",
													"    pm.expect(jsonData.data.id).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.fullname).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.username).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.roles).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.canwrite).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.mailgoup).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.lockstatus).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.userpresnt).to.be.a(\"boolean\");",
													"    pm.expect(jsonData.data.retry).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.logtime).to.be.a(\"string\");",
													"    pm.expect(jsonData.data.codevalid).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2319298d-ec1f-47ba-a11b-c5a4403b0122",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Profiles",
												"verifyalluser",
												":data"
											],
											"variable": [
												{
													"id": "21b22f1b-0549-492c-83d2-111256bd389d",
													"key": "data",
													"value": "emediongetuk323@gmail.com",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "1ad7d4b4-842d-4c94-aa39-086f3698667e",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Profiles/verifyalluser/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Profiles",
														"verifyalluser",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "6bb93396-bf47-4a85-b020-bb8cad7b735c",
							"description": "Email Address"
						}
					],
					"id": "4ac1747d-0354-4f27-b13d-803a148aae25",
					"description": "This endpoint is for verifying of user by email address, User must be registered first.\n\nUpon successful verification, Security code will be sent to the user mailbox"
				},
				{
					"name": "Get Meter Phase",
					"item": [
						{
							"name": "meter phase list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "244e2b65-7f4a-4bb9-b851-7818a44b7af4",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test that the response is an array",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test that the array contains 'Single Phase' and 'Three Phase'",
											"pm.test(\"Array contains expected meter phases\", function () {",
											"    pm.expect(jsonData).to.include(\"Single Phase\");",
											"    pm.expect(jsonData).to.include(\"Three Phase\");",
											"});",
											"",
											"// Test that the array has exactly 2 elements",
											"pm.test(\"Array has 2 elements\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b631e876-d455-42db-a5ea-8db31efe7f42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": "{{baseUrl}}/api/operations/meterphase"
							},
							"response": [
								{
									"id": "6c3cb913-2987-461b-9577-ed9fc5cdd7c9",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/operations/meterphase"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "[\n  \"string\",\n  \"string\"\n]"
								}
							]
						}
					],
					"id": "5715b0e6-63b6-471d-b06a-8bfa56d592cd"
				},
				{
					"name": "Delete Meter Brand",
					"item": [
						{
							"name": "delete brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daa531ed-f292-4984-8d09-eadacc4a30f6",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a('string');",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a('string');",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is true\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b121cb8f-a2ed-48ad-ac98-124136c8538c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/deletebrand"
							},
							"response": [
								{
									"id": "652866bb-4861-4301-91c8-f3a2de374d3c",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 7830,\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/deletebrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "c61df587-5866-4feb-9549-f93ca2cfd3c6"
				},
				{
					"name": "Save Meter Brand",
					"item": [
						{
							"name": "save meter brand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf7b3d8-6226-4a11-ba22-34d3fd9289c0",
										"exec": [
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that cc is 2222",
											"pm.test(\"cc is 2222\", function () {",
											"    pm.expect(jsonData.cc).to.eql(2222);",
											"});",
											"",
											"// Test that responsecode is 2883",
											"pm.test(\"responsecode is 2883\", function () {",
											"    pm.expect(jsonData.responsecode).to.eql(2883);",
											"});",
											"",
											"// Test that data.nullable is true",
											"pm.test(\"data.nullable is true\", function () {",
											"    pm.expect(jsonData.data.nullable).to.be.true;",
											"});",
											"",
											"// Test that responsemessage is a string",
											"pm.test(\"responsemessage is a string\", function () {",
											"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
											"});",
											"",
											"// Test that patterns is a string",
											"pm.test(\"patterns is a string\", function () {",
											"    pm.expect(jsonData.patterns).to.be.a(\"string\");",
											"});",
											"",
											"// Test that responsStatus is false",
											"pm.test(\"responsStatus is false\", function () {",
											"    pm.expect(jsonData.responsStatus).to.be.false;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "71d6fa2f-e0b2-4f46-8a1c-7d0c6fbded1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savemeterbrand"
							},
							"response": [
								{
									"id": "d99619f0-48d6-4c52-ae1b-f87695e9d441",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"meter_brand\": \"string\",\n  \"meter_type\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savemeterbrand"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "1e4d0726-73e1-48e1-9d5d-95f1c1799e5b"
				},
				{
					"name": "Asset Folder",
					"item": [
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74a81c3-cb31-4832-a018-e89709d1334d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Expected list of DISCOs",
													"const expectedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Test that response is an array",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(jsonData)).to.be.true);",
													"",
													"// Test that response has all expected DISCOs",
													"pm.test(\"Response contains all expected DISCOs\", () => {",
													"    expectedDiscos.forEach(disco => {",
													"        pm.expect(jsonData).to.include(disco);",
													"    });",
													"});",
													"",
													"// Test that the length matches",
													"pm.test(\"Response array length matches expected\", () => {",
													"    pm.expect(jsonData.length).to.eql(expectedDiscos.length);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b921b26f-2508-4327-8d47-7e18cb7bbd50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "2140b5f3-ef60-4cec-87d0-44201c614bbe",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "5595e51d-9da4-416a-b1c0-8f4404defda8"
						},
						{
							"name": "Get State",
							"item": [
								{
									"name": "get list of states",
									"id": "3863146c-fdd8-4381-a7f7-1ad7d5e9dd0e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/proassest/getstates"
									},
									"response": [
										{
											"id": "b5ad6587-fbe9-4221-b586-cbf77569669a",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/proassest/getstates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  },\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  }\n]"
										}
									]
								}
							],
							"id": "57bffd4d-906c-4f79-b1a6-6c4d24b27142"
						}
					],
					"id": "eb76a098-0672-41e5-9cc5-ab2bfeac2a61"
				},
				{
					"name": "Save Meter Supplier",
					"item": [
						{
							"name": "save meter supplier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75663c3c-50c2-49a5-80e8-257af7221b8b",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1abdf69c-4214-4eba-af3c-1acd6ab6caaf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/savems"
							},
							"response": [
								{
									"id": "a38b38e8-9140-4758-91d2-1599c7e111f9",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailaddress\": \"wApUNQ126AaZ@QzpXxMGIcnoAkbmvU.yfl\",\n  \"ms_name\": \"string\",\n  \"id\": 8314\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/savems"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "b2de7d34-5083-4565-8212-5ccc6108dbd1"
				},
				{
					"name": "Get Meter Supplier [Name]",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get ms name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7516d331-23f0-4faa-a64c-b22529e8e39c",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Optionally check that totalpage and currentpage exist",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4051e7ee-ca6d-4036-b128-b69bb5614954",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"getmsname",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "e27c2aa2-b0d8-49cd-ab6e-a8a70e42f5f4",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "15aa2201-8bf5-4b67-818d-9b989890d9d3",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "8f2d70e6-b190-4511-ad31-8acf51d42fbb",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getmsname/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getmsname",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 8349,\n  \"responsecode\": 1554,\n  \"data\": [\n    {\n      \"emailaddress\": \"y2a@hBrmvfWFtqBnttKxDMNqLZTifbrTbMjE.znkr\",\n      \"ms_name\": \"string\",\n      \"id\": 1303\n    },\n    {\n      \"emailaddress\": \"GSTs3@MiaUBOabpshp.dbxu\",\n      \"ms_name\": \"string\",\n      \"id\": 3672\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8578,\n  \"currentpage\": 6290\n}"
												}
											]
										}
									],
									"id": "da3b00c1-7dd0-417a-aa13-b96171850220"
								}
							],
							"id": "1e58c66a-b29e-43f8-9c46-3c6dd1061d8e"
						}
					],
					"id": "feebcef3-855e-4f9c-b6e9-1dabf0719db7"
				},
				{
					"name": "Get Meter Supplier",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "get meter suppliers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93d59b3c-72aa-40f2-9a90-747113b52453",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that the response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array and not empty",
															"pm.test(\"Data is an array with values\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
															"});",
															"",
															"// Save the first supplier's id and email as collection variables",
															"if (jsonData.data.length > 0) {",
															"    const firstSupplier = jsonData.data[0];",
															"    pm.collectionVariables.set(\"ms-id\", firstSupplier.id);",
															"    pm.collectionVariables.set(\"ms-email\", firstSupplier.emailaddress);",
															"    console.log(`Saved first supplier id: ${firstSupplier.id} and email: ${firstSupplier.emailaddress}`);",
															"}",
															"",
															"// Test that totalpage and currentpage exist and are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Optional: Test that all suppliers have an email",
															"pm.test(\"All suppliers have an email address\", () => {",
															"    jsonData.data.forEach(supplier => {",
															"        pm.expect(supplier.emailaddress).to.be.a(\"string\").and.not.be.empty;",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "4e2312ee-3839-466d-9805-d113d1e6fc5b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"metersupplier",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "3a9265d2-b06a-4e14-a26a-01adfd139e77",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "2a424df4-219e-4a3b-86a7-e841bae5086a",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "a77ecd4b-1e17-40a9-85ff-0c2e06d67e99",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
												}
											]
										}
									],
									"id": "a112c751-f420-4bf1-a3b1-cf13cfd664ba"
								}
							],
							"id": "eff437ea-bf64-41ad-97d1-a3ca12c428d3"
						}
					],
					"id": "bccb9abe-910e-4623-a32d-be8a30ae5b03"
				},
				{
					"name": "Update Meter Supplier",
					"item": [
						{
							"name": "update ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25de1016-c686-4d3d-8ec8-2f844186d849",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Test that the response code is 200",
											"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Test that responsStatus is true",
											"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
											"",
											"// Test that data is null",
											"pm.test(\"Data is null\", () => pm.expect(jsonData.data).to.be.null);",
											"",
											"// Test that responsemessage is empty",
											"pm.test(\"responsemessage is empty\", () => pm.expect(jsonData.responsemessage).to.eql(\"\"));",
											"",
											"// Test that totalpage and currentpage are numbers",
											"pm.test(\"totalpage and currentpage are numbers\", () => {",
											"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
											"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a3a3092c-39bf-4c9d-bce7-975ba015dc44",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"address\": \"string\",\n//     \"company\": \"string\",\n//     \"company_phone\": \"string\",\n//     \"country\": \"string\",\n//     \"emailaddress\": \"string\",\n//     \"m_brand\": \"string\",\n//     \"m_country\": \"stri\",\n//     \"m_supplier\": \"string\",\n//     \"mailgoup\": true,\n//     \"phone_number\": \"string\",\n//     \"state\": \"string\",\n//     \"zipcode\": \"string\",\n//     \"id\": 103,\n//     \"pri_contact\": \"string\",\n//     \"contact_email\": \"string\",\n//     \"roles\": \"string\",\n//     \"vendor_id\": \"string\",\n//     \"firstname\": \"string\",\n//     \"lastname\": \"string\",\n//     \"mcount\": 7471,\n//     \"concount\": 1430,\n//     \"accountstatus\": false,\n//     \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n//     \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n// }\n\n{\n    \"id\": 8,\n    \"m_supplier\": \"Mita Suplaya\",\n    \"m_brand\": \"Mbah Power Limited\",\n    \"company\": \"Ifeoma Tester\",\n    \"m_country\": \"united-kingdom\",\n    \"emailaddress\": \"mitams@yopmail.com\",\n    \"pri_contact\": \"Ifeoma Tester\",\n    \"contact_email\": \"mitams@yopmail.com\",\n    \"company_phone\": \"80123302345\",\n    \"roles\": \"\",\n    \"vendor_id\": \"Mita\",\n    \"mailgoup\": true,\n    \"phone_number\": \"80123302345\",\n    \"country\": \"country1\",\n    \"state\": \"Lagos\",\n    \"address\": \"12, Tazah Street, Lagos\",\n    \"zipcode\": \"40751\",\n    \"firstname\": \"\",\n    \"lastname\": \"\",\n    \"fullname\": \"Meetah Suplaya\",\n    \"mcount\": 0,\n    \"concount\": 1,\n    \"accountstatus\": false,\n    \"datejoin\": \"2025-08-29T17:25:44.0503349\",\n    \"lastlogin\": \"2025-09-02T17:05:33.6108699\",\n    \"contract\": 1\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/update"
							},
							"response": [
								{
									"id": "02972693-c88c-428d-8ec9-55780bd0fae6",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address\": \"string\",\n  \"company\": \"string\",\n  \"company_phone\": \"string\",\n  \"country\": \"string\",\n  \"emailaddress\": \"string\",\n  \"m_brand\": \"string\",\n  \"m_country\": \"stri\",\n  \"m_supplier\": \"string\",\n  \"mailgoup\": true,\n  \"phone_number\": \"string\",\n  \"state\": \"string\",\n  \"zipcode\": \"string\",\n  \"id\": 103,\n  \"pri_contact\": \"string\",\n  \"contact_email\": \"string\",\n  \"roles\": \"string\",\n  \"vendor_id\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"mcount\": 7471,\n  \"concount\": 1430,\n  \"accountstatus\": false,\n  \"datejoin\": \"1989-08-22T07:16:06.650Z\",\n  \"lastlogin\": \"1973-07-08T03:27:57.742Z\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Metersupplier/update"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "e2fb2618-bb44-459f-aaac-284b603265b4"
				},
				{
					"name": "Meter List",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "meter list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "219f526f-1136-40c6-8ea0-1937e470dfa6",
														"exec": [
															"// Parse the response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Test that response code is 200",
															"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
															"",
															"// Test that responsStatus is true",
															"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
															"",
															"// Test that data is an array",
															"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Test that totalpage and currentpage are numbers",
															"pm.test(\"totalpage and currentpage are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															"// Test that each meter object contains required fields",
															"pm.test(\"Each meter has required fields\", () => {",
															"    jsonData.data.forEach(meter => {",
															"        pm.expect(meter).to.have.property(\"id\");",
															"        pm.expect(meter).to.have.property(\"meter_number\");",
															"        pm.expect(meter).to.have.property(\"meter_brand\");",
															"        pm.expect(meter).to.have.property(\"date_supplied\");",
															"        pm.expect(meter).to.have.property(\"meter_phase\");",
															"        pm.expect(meter).to.have.property(\"batch_number\");",
															"        pm.expect(meter).to.have.property(\"vendor_id\");",
															"        pm.expect(meter).to.have.property(\"vendorname\");",
															"        pm.expect(meter).to.have.property(\"disco\");",
															"        pm.expect(meter).to.have.property(\"prop_scheme\");",
															"        pm.expect(meter).to.have.property(\"certified\");",
															"        pm.expect(meter).to.have.property(\"status\");",
															"        pm.expect(meter).to.have.property(\"approvedate\");",
															"    });",
															"});",
															"",
															"// Save the first meter id as a collection variable",
															"if (jsonData.data.length > 0) {",
															"    pm.collectionVariables.set(\"first_meter_id\", jsonData.data[0].id);",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "474b0a90-e0f8-4c64-8303-72b28e2e8859",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"meterlist",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "f6aa7c42-1f51-4954-8a93-be0d46f30215",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "8de9b176-542a-4baf-9c1f-6afa2c3e2067",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "9ac64740-ea33-48f3-822b-e78cbf8d1ff5",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/meterlist/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"meterlist",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
												}
											]
										}
									],
									"id": "efda8f99-24e0-44ec-8c2c-dbc57c7ebea9"
								}
							],
							"id": "2151c773-1d62-486e-a511-37d564a9cb2e"
						}
					],
					"id": "ccd56b3a-5800-4944-9440-f63cbaeba090",
					"description": "Get Meters"
				},
				{
					"name": "Get user activities",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get activities",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "72a0f9da-6ba0-4fc1-bc50-f7899a809e1e",
																"exec": [
																	"// Parse the response JSON",
																	"const jsonData = pm.response.json();",
																	"",
																	"// Test that response code is 200",
																	"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
																	"",
																	"// Test that responsStatus is true",
																	"pm.test(\"responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.be.true);",
																	"",
																	"// Test that data is an array",
																	"pm.test(\"Data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																	"",
																	"// Test that totalpage and currentpage are numbers",
																	"pm.test(\"totalpage and currentpage are numbers\", () => {",
																	"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
																	"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
																	"});",
																	"",
																	"// Test that each activity object contains required fields",
																	"pm.test(\"Each activity has required fields\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.property(\"id\");",
																	"        pm.expect(item).to.have.property(\"customerid\");",
																	"        pm.expect(item).to.have.property(\"activity\");",
																	"        pm.expect(item).to.have.property(\"party\");",
																	"        pm.expect(item).to.have.property(\"actby\");",
																	"        pm.expect(item).to.have.property(\"staus\"); // note: spelling matches response",
																	"        pm.expect(item).to.have.property(\"readstatus\");",
																	"        pm.expect(item).to.have.property(\"endate\");",
																	"        pm.expect(item).to.have.property(\"dateread\");",
																	"    });",
																	"});",
																	"",
																	"// Save the first activity id as a collection variable",
																	"if (jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"first_activity_id\", jsonData.data[0].id);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "4aff32a7-3913-4158-be37-59b99ab42efd",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getactivities",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "9a3c47ce-3e62-454a-8b78-93616afce1bf",
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "442d237f-f363-44da-a0e9-cb34bf8bacfa",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "40254fa6-ee7b-432b-82d4-6f11d8d76d48",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "3bd57513-5a18-4640-9675-b9be090f33b6",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getactivities/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getactivities",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 2697,\n  \"responsecode\": 4041,\n  \"data\": [\n    {\n      \"id\": 547,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": true,\n      \"readstatus\": false,\n      \"endate\": \"1955-09-22T16:03:28.568Z\",\n      \"dateread\": \"1972-02-03T13:37:55.177Z\"\n    },\n    {\n      \"id\": 3475,\n      \"customerid\": \"string\",\n      \"activity\": \"string\",\n      \"party\": \"string\",\n      \"actby\": \"string\",\n      \"staus\": false,\n      \"readstatus\": false,\n      \"endate\": \"2003-06-12T03:38:32.065Z\",\n      \"dateread\": \"2019-11-10T19:25:48.876Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6332,\n  \"currentpage\": 3639\n}"
														}
													]
												}
											],
											"id": "f86e376c-9c6b-43b4-a08a-ed4fcc461425"
										}
									],
									"id": "741d9dd2-77ce-44a0-9eef-821150fb159e"
								}
							],
							"id": "615458c5-0dff-4c4a-a297-aef59baddd76"
						}
					],
					"id": "38ee3fe2-3570-4667-b272-962a28c7d274"
				},
				{
					"name": "Post Users Activities",
					"item": [
						{
							"name": "post activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8583ff53-4633-4e49-9229-c6d0adff944f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "19164465-5e3c-4861-9e00-0d1183ffb100",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/postactivity"
							},
							"response": [
								{
									"id": "07c113fe-a068-4a03-b8a8-3872d777284a",
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"actby\": \"string\",\n  \"activity\": \"string\",\n  \"customerid\": \"string\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/postactivity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
								}
							]
						}
					],
					"id": "b2ab8d68-4d86-437a-a211-0516e47dc9ca"
				},
				{
					"name": "Get User's Comment",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get coments",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0657aef7-ea3b-4196-ae2a-d615e41a7a80",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate data is empty",
																	"pm.test(\"Validate data is empty\", () => {",
																	"    pm.expect(jsonData.data.length).to.eql(0);",
																	"});",
																	"",
																	"// Validate response message is empty",
																	"pm.test(\"Validate response message is empty\", () => {",
																	"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "8a908065-1c04-4e83-8b40-e757b718da66",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getcomments",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "20825062-6912-4671-bcf0-bfe8398493a6",
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "df8789a5-1662-4729-bb47-f309cf896a93",
																	"key": "offset",
																	"value": "147",
																	"description": "(Required) "
																},
																{
																	"id": "b5281592-4612-4212-a6b8-6b8c9167fa5d",
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "f484fe91-aedd-43dd-9c8d-673b045b7f4e",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getcomments",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6197,\n  \"responsecode\": 6995,\n  \"data\": [\n    {\n      \"id\": 9158,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"2005-02-07T20:46:29.356Z\"\n    },\n    {\n      \"id\": 4418,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"1959-05-04T17:56:38.496Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 499,\n  \"currentpage\": 5013\n}"
														}
													]
												}
											],
											"id": "5dba55e8-1dff-4a81-8b94-fe5c2da8d8bb"
										}
									],
									"id": "9fec83a6-a235-4320-8d8b-e26c2822c710"
								}
							],
							"id": "b60bdf4b-ea38-4237-8047-3df7a05c8a41"
						}
					],
					"id": "07221aa0-be4a-426a-b10b-edd397f4e362"
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8159a242-2050-4465-b926-1963e98df6e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9173b0f4-9855-45ba-b656-064965e2d02c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/authentication/logout"
							},
							"response": [
								{
									"id": "43ba41bc-d0a0-4f8a-8ebe-76a88dabc971",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/authentication/logout"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": ""
								}
							]
						}
					],
					"id": "c4549570-1454-4ec5-bf4c-c13cc85ef0c4",
					"description": "Always call this endpoint when user logout from the frontend"
				}
			],
			"id": "7a23a0a0-d4e5-4017-8f73-9332022d99d3",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{pmi-token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b72dc5e4-444e-4ee3-992b-0d6dd7c8f2b5",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b603420-3092-4671-bde9-966d31de8ae7",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "13c52fcc-de83-426b-bd0b-27230c58ae3c",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "230b9d65-d280-4eed-87b4-aa906451f0b5",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "disrep-token",
			"value": ""
		},
		{
			"key": "maf-token",
			"value": ""
		},
		{
			"key": "pmi-token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://appmodule.delightfulgrass-0dcdf3e6.brazilsouth.azurecontainerapps.io",
			"type": "string"
		}
	]
}